<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>逍遥居</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zwgeek.com/"/>
  <updated>2016-11-02T10:07:59.000Z</updated>
  <id>http://zwgeek.com/</id>
  
  <author>
    <name>轩辕</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Activity的管理结构分析及源码解析</title>
    <link href="http://zwgeek.com/2016/11/02/Activity%E7%AE%A1%E7%90%86%E7%BB%93%E6%9E%84%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://zwgeek.com/2016/11/02/Activity管理结构及源码分析/</id>
    <published>2016-11-02T09:03:13.000Z</published>
    <updated>2016-11-02T10:07:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>例行广告，喜欢这篇文章的朋友可以关注我的博客<a href="http://zwgeek.com">http://zwgeek.com</a></p>
<p>之前几篇文章分析了Activity的启动流程，当时因为要抓启动的主线，所以中间涉及到一些类之间的关系都一笔带过了。后来再重新看前面文章的时候发现没有这部分的讲解，很影响理解，所以今天准备把这些详细拿出来讲一下。</p>
<p>没看过Activity启动流程分析的同学可以去看一下，因为这篇文章中会直接引用启动流程中已经说过的一些点。以下是传送门。</p>
<p><a href="http://zwgeek.com/2016/10/09/Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/">Activity启动流程分析</a></p>
<p><a href="http://zwgeek.com/2016/10/25/Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%902/">Activity启动流程分析(二)</a></p>
<p><a href="http://zwgeek.com/2016/10/26/Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E7%95%AA%E5%A4%96%E7%AF%87/">Activity启动流程番外篇</a></p>
<p>这篇文章是带着这样一个问题来讲的，我们知道Android分为Server和Client两部分，那么Activity在这两部分中是怎么被组织被管理的。管理Activity的各部分组件又是什么时候生成的，并且在管理过程中起到了什么作用。</p>
<h3 id="Activity的管理结构"><a href="#Activity的管理结构" class="headerlink" title="Activity的管理结构"></a>Activity的管理结构</h3><p>先放一张结果图</p>
<p><img src="http://img.blog.csdn.net/20161102165944689" alt="这里写图片描述"></p>
<p>这就是整个Android中对Activity的管理结构，左边是Client端也就是APP部分，右边是Server端也就是Android System部分。</p>
<p>我们先来看Server端，在Server端跟Activity有关系的最大的类就是ActivityManagerService了，但是它更像是一个上帝类，而不是管理结构中的一部分，所以我就没有把它列在图上。</p>
<p>那么我们依次来看图上的部分<br>ActivityStackSupervisor，这个类像是一个工具类，会封装一些管理Activity的操作，但相信我，真正做事情的肯定不是它。</p>
<p>下面就是管理结构了，最外层是ActivityStack，直译过来是Activity栈，但却不是我们通常意义上理解的Activity栈，因为这个ActivityStack在Android中只有两个，HomeStack和FocusStack，跟Launcher有关的Activity都在HomeStack中，其他所有Activity都在FocusStack中。</p>
<p>然后ActivityStack中有TaskRecord，这个TaskRecord才是我们理解的Activity栈，一系列有关的Activity都在一个TaskRecord中，并且只有在一个TaskRecord中的Activity才能调用startActivityForResult，这个是前面提到的。这个TaskRecord跟两个参数息息相关。</p>
<ul>
<li>FLAG_ACTIVITY_NEW_TASK</li>
<li>affinity</li>
</ul>
<p>这两个参数熟悉开发的朋友应该都很熟悉吧。</p>
<p>然后在TaskRecord中有ActivityRecord，这个ActivityRecord在Server端就对应着一个Activity。是的，在Server端并没有真正的Activity实例，而只有Activity的token，而这个token就是存在ActivityRecord中的appToken，ActivityRecord还记录了一些其他的必要信息。</p>
<p>Token的类型是IApplicationToken.Stub，也是个Binder对象，服务端只存储Activity对应的Token。而真正的Activity实例是存储在Client端的。Server端就是通过token去Client端找到对应的Activity实例的。</p>
<p>接下来我们看Client端，在Client端也不是直接存储Activity的，因为还有一些Activity的信息要记录，所以Client端存的是Activity的包装类ActivityClientRecord，在ActivityClientRecord中包含有真正的Activity实例。</p>
<p>整个管理结构就是这样的，其实很简单。但是要从Android那繁杂错乱的源码中梳理出这层关系，还真是花了我好长时间。下面我们从源码中来验证这层管理关系。</p>
<h4 id="1-ActivityStackSupervisor"><a href="#1-ActivityStackSupervisor" class="headerlink" title="1. ActivityStackSupervisor"></a>1. ActivityStackSupervisor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** The stack containing the launcher app. Assumed to always be attached to</span></div><div class="line">     * Display.DEFAULT_DISPLAY. */</div><div class="line">    <span class="keyword">private</span> ActivityStack mHomeStack;</div><div class="line"></div><div class="line">    <span class="comment">/** The stack currently receiving input or launching the next activity. */</span></div><div class="line">    <span class="keyword">private</span> ActivityStack mFocusedStack;</div><div class="line"></div><div class="line">    <span class="comment">/** If this is the same as mFocusedStack then the activity on the top of the focused stack has</span></div><div class="line">     * been resumed. If stacks are changing position this will hold the old stack until the new</div><div class="line">     * stack becomes resumed after which it will be set to mFocusedStack. */</div><div class="line">    <span class="keyword">private</span> ActivityStack mLastFocusedStack;</div></pre></td></tr></table></figure>
<p>ActivityStackSupervisor中就这三个ActivityStack，正如前面说的mHomeStack是存所有与Launcher有关的Activity。mFocusStack是存所有其他的Activity。mLastFocusedStack是一个备份用的，从注释可以看出，是用来备份mFocusStack的。</p>
<p>至于为什么这样做，当然为了用户体验了，用户可以随时回到桌面就是因为这种管理结构。</p>
<h4 id="2-ActivityStack"><a href="#2-ActivityStack" class="headerlink" title="2. ActivityStack"></a>2. ActivityStack</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * The back history of all previous (and possibly still</div><div class="line">     * running) activities.  It contains #TaskRecord objects.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;TaskRecord&gt; mTaskHistory = <span class="keyword">new</span> ArrayList&lt;TaskRecord&gt;();</div></pre></td></tr></table></figure>
<p>ActivityStack中存有一个TaskRecord的List，不同的TaskRecord就保存在这个List中。</p>
<p>另外，为了方便调用，AMS中这些类都持有它上一级管理者的引用，比如在ActivityStack代码中你就可以看到这样的引用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Run all ActivityStacks through this */</span></div><div class="line">  <span class="keyword">final</span> ActivityStackSupervisor mStackSupervisor;</div></pre></td></tr></table></figure>
<h4 id="3-TaskRecord"><a href="#3-TaskRecord" class="headerlink" title="3. TaskRecord"></a>3. TaskRecord</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** List of all activities in the task arranged in history order */</span></div><div class="line">    <span class="keyword">final</span> ArrayList&lt;ActivityRecord&gt; mActivities;</div></pre></td></tr></table></figure>
<p>TaskRecord中存的是一个ActivityRecord的List，这个List就是我们传统意义上理解的Activity栈，这个List中Activity的顺序也就是Activity在屏幕上被启动的顺序。</p>
<p>同样的，TaskRecord也持有它的上一级管理器ActivityStack的引用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Current stack */</span></div><div class="line">    ActivityStack stack;</div></pre></td></tr></table></figure>
<h4 id="4-ActivityRecord"><a href="#4-ActivityRecord" class="headerlink" title="4. ActivityRecord"></a>4. ActivityRecord</h4><p>在AMS这边的Activity，就是ActivityRecord了，它的变量中有真正Activity对应的token。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> IApplicationToken.Stub appToken; <span class="comment">// window manager token</span></div></pre></td></tr></table></figure>
<p>同时，他也持有它父管理器的一些引用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TaskRecord task;        <span class="comment">// the task this is in.</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> ActivityManagerService service; <span class="comment">// owner</span></div></pre></td></tr></table></figure>
<p>以上就是Server端对Activity的管理结构，接下来我们看Client端的管理结构</p>
<h4 id="5-ActivityThread"><a href="#5-ActivityThread" class="headerlink" title="5. ActivityThread"></a>5. ActivityThread</h4><p>Client这边最大的类是ActivityThread，我们知道，在ActivityThread中就管理着所有的Acitivity。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> ArrayMap&lt;IBinder, ActivityClientRecord&gt; mActivities</div><div class="line">            = <span class="keyword">new</span> ArrayMap&lt;IBinder, ActivityClientRecord&gt;();</div></pre></td></tr></table></figure>
<p>ActivityThread中有一个ActivityClientRecord的Map，Map的key就是Activity的token。</p>
<h4 id="6-ActivityClientRecord"><a href="#6-ActivityClientRecord" class="headerlink" title="6. ActivityClientRecord"></a>6. ActivityClientRecord</h4><p>在ActivityClientRecord中，存有真正的Activity实例和他对应的token。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IBinder token;</div><div class="line">Activity activity;</div></pre></td></tr></table></figure>
<h4 id="7-相互调用"><a href="#7-相互调用" class="headerlink" title="7. 相互调用"></a>7. 相互调用</h4><p>接下来我们用一小段代码来说明一下Server端是怎么查找到Activity的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用onResume              next.app.thread.scheduleResumeActivity(next.appToken, next.app.repProcState,mService.isNextTransitionForward(), resumeAnimOptions);</span></div></pre></td></tr></table></figure>
<p>这是在ActivityStack中的一段调用Resume的方法，看了前面的Activity启动流程分析，我们知道scheduleResumeActivity最终会被ActivityThread的handleResumeActivity处理。</p>
<p>handleResumeActivity又交给了performResumeActivity去处理这件事，我们看performResumeActivity的代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ActivityClientRecord <span class="title">performResumeActivity</span><span class="params">(IBinder token,</span></span></div><div class="line">           <span class="keyword">boolean</span> clearHide) &#123;</div><div class="line">       ActivityClientRecord r = mActivities.get(token);</div><div class="line">       ...</div><div class="line">       r.activity.performResume();</div></pre></td></tr></table></figure>
<p>看，Client端会首先根据token从mActivities中找到ActivityClientRecord，然后取出AcitivityClientRecord中的Activity，去调用它的onResume方法。</p>
<h3 id="管理结构的创建时间点"><a href="#管理结构的创建时间点" class="headerlink" title="管理结构的创建时间点"></a>管理结构的创建时间点</h3><p>好的，已经讲完了Activity的管理结构，我们知道在Activity的启动过程中，这个管理结构的类会被依次创建，那么他们是在什么时间点被创建的呢？</p>
<p>前面分析Activity的时候我没有特别去讲解这个结构的创建，这里就补充一下这个点。我会说每个结构是在哪个方法中被创建的，但是方法是在什么时候调用的， 不清楚的同学可以去查阅Activity启动流程分析。</p>
<p>ActivityStackSupervisor因为很重要，所以在ActivityManagerService构造函数的时候就创建了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ActivityManagerService</span><span class="params">(Context systemContext)</span> </span>&#123;</div><div class="line">       ...</div><div class="line">       mStackSupervisor = <span class="keyword">new</span> ActivityStackSupervisor(<span class="keyword">this</span>);</div><div class="line">       ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ActivityRecord是在ActivityStackSupervisor的startActivityLocked中被创建的，如下图</p>
<p><img src="http://img.blog.csdn.net/20161102175329326" alt="这里写图片描述"></p>
<p>然后ActivityStack和TaskRecord在同个类的startActivityUncheckedlocked方法中被创建，如下图。</p>
<p><img src="http://img.blog.csdn.net/20161102175501924" alt="这里写图片描述"></p>
<p>adjustStackFocus中会创建ActivityStack，但是正如前面说的，只有当mFocusStack没有被创建的时候才会重新创建，如果mFocusStack已经有啦，那么，就用mFocusStack。</p>
<p>至此，Server端这边的结构都被创建出来了，然后再看Client端的结构。</p>
<p>ActivityClientRecord是在ActivityThread的scheduleLaunchActivity，如图</p>
<p><img src="http://img.blog.csdn.net/20161102175850425" alt="这里写图片描述"></p>
<p>注意，这个时候Activity实例还没有被创建出来。而Activity的创建是在什么点呢。</p>
<p><img src="http://img.blog.csdn.net/20161102180002769" alt="这里写图片描述"></p>
<p>在performLaunchActivity中，并且创建完了之后把自己加入到ActivityClientRecord中，然后把ActivityCLientRecord加入到mActivities中。</p>
<p>至此，所有的管理结构都创建完成，Activity也基本启动完成了。</p>
<p>例行广告，喜欢这篇文章的朋友可以关注我的博客<a href="http://zwgeek.com">http://zwgeek.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;例行广告，喜欢这篇文章的朋友可以关注我的博客&lt;a href=&quot;http://zwgeek.com&quot;&gt;http://zwgeek.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前几篇文章分析了Activity的启动流程，当时因为要抓启动的主线，所以中间涉及到一些类之间的关系都一笔带过了。后
    
    </summary>
    
      <category term="Android" scheme="http://zwgeek.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zwgeek.com/tags/Android/"/>
    
      <category term="Activity启动" scheme="http://zwgeek.com/tags/Activity%E5%90%AF%E5%8A%A8/"/>
    
      <category term="系统" scheme="http://zwgeek.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Activity启动流程番外篇</title>
    <link href="http://zwgeek.com/2016/10/26/Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E7%95%AA%E5%A4%96%E7%AF%87/"/>
    <id>http://zwgeek.com/2016/10/26/Activity启动流程番外篇/</id>
    <published>2016-10-26T09:29:01.000Z</published>
    <updated>2016-10-31T03:33:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>前两篇文章分析了Activity的启动流程的大部分。</p>
<p>第一篇文章讲了程序在调用startActivity之后发生的一些操作<a href="http://zwgeek.com/2016/10/09/Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/">Activity启动流程分析</a></p>
<p>第二篇文章讲了一个Android程序从最开始启动到一个Activity呈现到用户之间发生的一些操作<a href="http://zwgeek.com/2016/10/25/Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%902/">Activity启动流程分析（二）</a></p>
<p>在这两篇文章之前，我就提出了三个问题，前面也分析的差不多了，准备在这篇文章中来回答这三个问题，所以如果你还没有看前两篇文章，还是希望你能大概读一下之前两篇文章再来看这篇番外篇。</p>
<p>好，回归正题，提了三个问题，分别是哪三个问题呢。</p>
<ul>
<li>getApplication() ，getApplicationContext()，getBaseContext()分别有什么区别？</li>
<li>单个进程中能存在多个application么？</li>
<li>为什么不能使用service或者application作为创建dialog的context参数？</li>
</ul>
<h4 id="第一个问题"><a href="#第一个问题" class="headerlink" title="第一个问题"></a>第一个问题</h4><p>getApplication() ，getApplicationContext()，getBaseContext()分别有什么区别？</p>
<p>对于这个问题，我们首先看一下这三个方法返回的对象分别是什么。</p>
<p>getApplication()<br><img src="http://img.blog.csdn.net/20161026174737355" alt="这里写图片描述"></p>
<p>getApplication返回的是Activity中的mApplication对象，这个对象是在attach的时候赋给Activity的</p>
<p><img src="http://img.blog.csdn.net/20161026174850543" alt="这里写图片描述"></p>
<p>第二篇文章中也讲到了attach的调用是在ActivityThread的performLaunchActivity中，传递的Application是通过makeApplication生成的。</p>
<p><img src="http://img.blog.csdn.net/20161026175138524" alt="这里写图片描述"></p>
<p>我们来看下makeApplication</p>
<p><img src="http://img.blog.csdn.net/20161026175239338" alt="这里写图片描述"></p>
<p>方法中我们可以发现makeApplication是会返回当前的mApplication的，那当前的这个mApplication到底是不是程序最开始创建的那个Application呢，也就是在bindApplicaiton中生成的Application。</p>
<p><img src="http://img.blog.csdn.net/20161026175707140" alt="这里写图片描述"></p>
<p>要看这两个Application是否相同，我们可以跟踪创建它的LoadApk类，也就是这里的data.info和前面的r.packageInfo</p>
<p>好吧，继续追吧，看看能不能看到这两个对象的源头data.info是在handleBindApplication方法中通过getPackageInfoNoCheck获取到的。</p>
<p><img src="http://img.blog.csdn.net/20161026180630012" alt="这里写图片描述"></p>
<p>getPackageInfoNoCheck调用了getPackageInfo方法。看下这个方法</p>
<p><img src="http://img.blog.csdn.net/20161026180758006" alt="这里写图片描述"></p>
<p>这里可以很明显的看出，PackageInfo在ActivityThread中是单例的，这个对象跟packageName挂钩，那么我们也知道，一个Android程序的packageName是唯一的。所以基本可以确定前面两个创建Application的packageInfo是一样的，为了保险起见，我们再追一下另外一个packageInfo吧，也就是r.packageInfo。</p>
<p><img src="http://img.blog.csdn.net/20161026181449946" alt="这里写图片描述"></p>
<p>看到了吧，也是调用前面的getPackageInfoNoCheck方法获取到的。所以正确流程下，一个Android程序中Application是唯一的，getApplication返回的就是这个对象。为什么说是正常流程下呢，这对应的是我们的第二个问题，后面会做出解答。</p>
<p>第二个方法getApplicationContext()<br>这个方法是在ContextWrapper中的，Activity是继承在这个类的。</p>
<p><img src="http://img.blog.csdn.net/20161026181724666" alt="这里写图片描述"></p>
<p>这里又关系到mBase这个对象，这个对象其实也是在Activity attch的时候绑定进来的，就是图中这个地方创建的appContext，这个对象是ContextImpl类型的。</p>
<p><img src="http://img.blog.csdn.net/20161026181855572" alt="这里写图片描述"></p>
<p>我们进去看下它的getApplicationContext方法</p>
<p><img src="http://img.blog.csdn.net/20161026182021733" alt="这里写图片描述"></p>
<p>如果packageInfo不为null，那么返回packageInfo的Application，否则返回mainThread的Application</p>
<p><img src="http://img.blog.csdn.net/20161026182206188" alt="这里写图片描述"></p>
<p>创建这个ContextImpl的packageInfo其实就是前面分析的r.packageInfo，所以这个ApplicationContext跟前面的Application是完全一样的。如果packageInfo是空，返回的是ActivityThread中的Application，而ActivityThread中的Application是handleBindApplication中生成的那个，跟前面也是一样的。</p>
<p>综上所述，getApplicationContext跟getApplication是相同的，接下来我们再看下getBaseContext()</p>
<p><img src="http://img.blog.csdn.net/20161026182544622" alt="这里写图片描述"></p>
<p>这里返回的就是前面说的mBase，这个mBase是一个ContextImpl类型的对象，是为Activity专门创建的，与Application就不一样了。</p>
<p>好，这就是第一个问题的答案。</p>
<h4 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a>第二个问题</h4><p>单个进程中能存在多个application么？</p>
<p>忽然意识到第二个问题其实在第一个问题中已经做了部分回答，一个LoadedApk中只能存在一个application。</p>
<p>但是事实是这样吗，我们来看下ActivityThread中创建Application的地方。正如第一个问题分析的，虽然在第一句话的时候，限制了mApplication的单例性，但是请注意后面对Application的管理。</p>
<p><img src="http://img.blog.csdn.net/20161031110946531" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20161031110409263" alt="这里写图片描述"></p>
<p>ActivityThread是一个进程，这里很明显我们已经能看出，Android中一个进程是允许存在多个Application的，但是正常情况下，是不会出现多个Application的，那么不正常的情况是什么呢，你可以通过反射得到这个mAllApplications，然后手动把自己的Application放进去。为了什么？当然是一些奇技淫巧了，后面有机会讲到插件化实现的时候会说到。</p>
<p>反正这里你知道一个结论就行了，一个进程是允许多个Application的，但是Android的正常流程下，一个进程只有一个Application。</p>
<h4 id="第三个问题"><a href="#第三个问题" class="headerlink" title="第三个问题"></a>第三个问题</h4><p>为什么不能使用service或者application作为创建dialog的context参数？</p>
<p>用service或者Application启动dialog的时候会报错</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Caused by: android.view.WindowManager$BadTokenException: Unable to add window -- token <span class="keyword">null</span> is not <span class="keyword">for</span> an application</div><div class="line">                           at android.view.ViewRootImpl.setView(ViewRootImpl.java:<span class="number">685</span>)</div><div class="line">                           at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:<span class="number">342</span>)</div><div class="line">                           at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:<span class="number">93</span>)</div><div class="line">                           at android.app.Dialog.show(Dialog.java:<span class="number">316</span>)</div></pre></td></tr></table></figure>
<p>我们来看一下这个错误是哪里报出的，是在ViewRootImpl的setView中</p>
<p><img src="http://img.blog.csdn.net/20161026184204831" alt="这里写图片描述"></p>
<p>对res进行判断，而这个res是这句话返回的，既然异常是关于token的，也就是说在addToDisplay的时候对当前view的token进行了检查。</p>
<p><img src="http://img.blog.csdn.net/20161027112934008" alt="这里写图片描述"></p>
<p>mWindowSession是一个Session类型的，addToDidplay代码如下</p>
<p><img src="http://img.blog.csdn.net/20161028150931848" alt="这里写图片描述"></p>
<p>其实如果你分析的多了，不用看也知道mService肯定是WindowManagerService，这个Service和ActivityManagerService一样，在Framework层是很重要的一个类，负责窗口绘制等。</p>
<p>异常报出的case是ADD_NOT_APP_TOKEN，找一下</p>
<p><img src="http://img.blog.csdn.net/20161028151340745" alt="这里写图片描述"></p>
<p>所以看得出来，报出这个异常有两个条件，一是type是APPLICATION_WINDOW，二是要有APPWindowToken。</p>
<p>先看看这个TYPE吧</p>
<p><img src="http://img.blog.csdn.net/20161028151709929" alt="这里写图片描述"></p>
<p>通过看这个类的注释，大概知道什么意思，WINDOW分为几大类<br>1-99是Application window<br>1000-1999是sub window<br>2000-2999是system window</p>
<p>挨个来看注释</p>
<h5 id="Application-Window"><a href="#Application-Window" class="headerlink" title="Application Window"></a>Application Window</h5><p><img src="http://img.blog.csdn.net/20161028152220400" alt="这里写图片描述"></p>
<p>Application Window就是普通的应用程序window，像Activity，Dialog都属于这一类</p>
<h5 id="Sub-Window"><a href="#Sub-Window" class="headerlink" title="Sub Window"></a>Sub Window</h5><p><img src="http://img.blog.csdn.net/20161028152438321" alt="这里写图片描述"></p>
<p>SubWIndow，从注释可以看出，这类window必须有一个可依附的其他Window，然后在坐标轴Z上它是它所依附的Window的下一个，然后它的坐标体系也依附于它所依附的Window的坐标。</p>
<p>下面指出了一些Sub Window，Panel，media等等。</p>
<h5 id="SYSTEM-WINDOW"><a href="#SYSTEM-WINDOW" class="headerlink" title="SYSTEM WINDOW"></a>SYSTEM WINDOW</h5><p><img src="http://img.blog.csdn.net/20161028152806777" alt="这里写图片描述"></p>
<p>注释说这是系统window，一般不是由程序创建的，而在下面它给出的几类中，我们也看到了很多熟悉的身影。</p>
<p><img src="http://img.blog.csdn.net/20161028152932700" alt="这里写图片描述"></p>
<p>状态栏，搜索栏，Toast都是SYSTEM WINDOW</p>
<p>这只是一个小插曲，我们回归正题，那么很明显Dialog应该是一个Application Window，不然它就不会报错了，我们从代码验证一下。</p>
<p>讲真，我有点打脸，因为我没有找到代码，Dialog的构造函数是这样的。</p>
<p><img src="http://img.blog.csdn.net/20161028155113014" alt="这里写图片描述"></p>
<p>创建Window的代码在PolicyManager中，代码如下</p>
<p><img src="http://img.blog.csdn.net/20161028155158458" alt="这里写图片描述"></p>
<p>这里感觉有点打脸了，难道代码跟不下去了？网上查了一些资料，看到一个比较合理的解释是，因为我的源码是SDK的源码，而不是真正编译系统的源码，所以这块内容被屏蔽掉了。没关系，万能的百度说正确的代码是下面这个样子的。</p>
<p><img src="http://img.blog.csdn.net/20161028162358849" alt="这里写图片描述"></p>
<p>看到了静态区动态加载了Policy，这就好说了，我们去看Policy的makeNewWindow吧。</p>
<p><img src="http://img.blog.csdn.net/20161028162517980" alt="这里写图片描述"></p>
<p>返回的是一个PhoneWindow，我没有从代码中找到明确把PhoneWindow设置类型为TYPE_APPLICATION的地方，于是想看一下Window的默认Type是什么。</p>
<p><img src="http://img.blog.csdn.net/20161028170422891" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20161028170435500" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20161028170445195" alt="这里写图片描述"></p>
<p>所以，默认type是TYPE_APPLICATION类型的。PhoneWindow也就是TYPE APPLICATION类型的。</p>
<p>然后我们再看下一点，Dialog的Token是什么<br>Dialog的Token是null，这个可以从代码上看出来。第二个参数设置的就是token。</p>
<p><img src="http://img.blog.csdn.net/20161028165305907" alt="这里写图片描述"></p>
<p>只是如果View的Token是null，WindowManager又会怎么操作呢。我们从异常处反向追一下代码。前面说到了，异常是从WindowManagerService的addWindow方法报出来的，检验的是Token是否是AppToken。</p>
<p><img src="http://img.blog.csdn.net/20161031102436168" alt="这里写图片描述"></p>
<p>addWindow的调用链是这样的，我正向来说一下比较好理解，Dialog的show方法时，调用了mWindowManager的addView方法。</p>
<p><img src="http://img.blog.csdn.net/20161031102800676" alt="这里写图片描述"></p>
<p>mWindowManager的实现是WindowManagerImpl，调用的是WindowManagerGlobal的addView</p>
<p><img src="http://img.blog.csdn.net/20161031102949037" alt="这里写图片描述"></p>
<p>WindowManagerGlobal的addView方法调到了ViewRootImpl的setView</p>
<p><img src="http://img.blog.csdn.net/20161031103246376" alt="这里写图片描述"></p>
<p>然后正如前面说到的，setView方法调到了通过WindowSession调用了WindowManagerService的addWindow，检查Token并报出异常。</p>
<p>这样就很明确了，这个token跟Dialog中的mWindowManager有关，初始化的时候已经看到mWindowManger跟Context有关。</p>
<p><img src="http://img.blog.csdn.net/20161031103849988" alt="这里写图片描述"></p>
<p>如果这个Context是Activity，我们看下mWindowManager是如何表现的。在Activity中，如果要获取WindowService，Activity会把自己的mWindowManager返回过去。</p>
<p><img src="http://img.blog.csdn.net/20161031104032942" alt="这里写图片描述"></p>
<p>而这个WindowManager的初始化是在Activity的attach方法中，从以下代码中我们看到，这个WIndowManager设置过appToken。</p>
<p><img src="http://img.blog.csdn.net/20161031104348943" alt="这里写图片描述"></p>
<p>否则的话，如果Dialog的Context是其他，如Application，因为这几个Context没有重写getSystemService方法，所以调用的是父类ContextWrapper中的getSystemService。</p>
<p><img src="http://img.blog.csdn.net/20161031104822710" alt="这里写图片描述"></p>
<p>在第二篇文章<a href="http://zwgeek.com/2016/10/25/Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%902/">Activity启动流程分析（二）</a> 中分析过，ContextWrapper中的mBase是ContextImpl类型的。</p>
<p>ContextImpl中的getSystemtService获取的是SYSTEM_SERVICE_MAP中的Service。</p>
<p><img src="http://img.blog.csdn.net/20161031105217598" alt="这里写图片描述"></p>
<p>这个map中的service是在static块中放进去的</p>
<p><img src="http://img.blog.csdn.net/20161031105401819" alt="这里写图片描述"></p>
<p>其中也包括Window Service</p>
<p><img src="http://img.blog.csdn.net/20161031105444244" alt="这里写图片描述"></p>
<p>这里很简单，就是返回了一个WindowManagerImpl的实例，而我们知道WindowManagerImpl的实例中是没有AppToken的。</p>
<p>综上所述，只有Activity的WindowManager是设置过AppToken的，所以，只有Context是Activity的时候，才能保证Dialog的show方法不返回异常。</p>
<p>为什么创建一个Dialog一定要带AppToken呢，其实不是什么技术上有问题，而是android的一种安全措施，原因在注释中也写的很清楚。</p>
<p><img src="http://img.blog.csdn.net/20161031113058149" alt="这里写图片描述"></p>
<p>一个TYPE_APPLICATION类型的window必须带APPTOKEN，已区别它显示在哪个窗口上，这就限制了Dialog只能显示在创建它的Activity上，是一种安全措施。</p>
<p>ok，之前分析文章提出的三个问题已经作答完毕。</p>
<p>例行广告，喜欢这篇文章的同学可以关注我的博客<a href="http://zwgeek.com">http://zwgeek.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两篇文章分析了Activity的启动流程的大部分。&lt;/p&gt;
&lt;p&gt;第一篇文章讲了程序在调用startActivity之后发生的一些操作&lt;a href=&quot;http://zwgeek.com/2016/10/09/Activity%E5%90%AF%E5%8A%A8%E6%B
    
    </summary>
    
      <category term="Android" scheme="http://zwgeek.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zwgeek.com/tags/Android/"/>
    
      <category term="Activity启动" scheme="http://zwgeek.com/tags/Activity%E5%90%AF%E5%8A%A8/"/>
    
      <category term="系统" scheme="http://zwgeek.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Activity启动流程分析（二）</title>
    <link href="http://zwgeek.com/2016/10/25/Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%902/"/>
    <id>http://zwgeek.com/2016/10/25/Activity启动流程分析2/</id>
    <published>2016-10-25T09:03:13.000Z</published>
    <updated>2016-10-26T09:08:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>广告时间，大家喜欢我的文章，可以关注我的博客<a href="http://zwgeek.com">http://zwgeek.com</a></p>
<p>前面说到，希望分析一下Activity的启动流程，整个过程准备分为三篇文章来写</p>
<ul>
<li>程序调用startActivity后发生的操作</li>
<li>如果被startActivity的程序是需要启动的程序，程序在最开始初始化时发生的操作。例如在Launcher中启动一个程序。</li>
<li>如果被startActivity的程序是已经启动的程序，发生的操作。例如程序自己调用startActivity启动一个自己程序中的Activity</li>
</ul>
<p>第一篇文章也已经讲完了程序调用startActivity之后发生的事情。</p>
<p>还没有读过的同学可以看这里<a href="http://zwgeek.com/2016/10/09/Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/">Activity启动流程分析</a></p>
<p>这篇文章就来讲第二个部分，一个程序被启动之后发生的事情。第一篇文章中还提到了几个问题，也会在这篇文章中做出解答。</p>
<ul>
<li>getApplication() ，getApplicationContext()，getBaseContext()分别有什么区别？</li>
<li>单个进程中能存在多个application么？</li>
<li>为什么不能使用service或者application作为创建dialog的context参数？</li>
</ul>
<p>第一篇文章最后讲到了Process.start方法，说到了这个方法会启动一个线程，并且运行ActivityThread的main方法来正式开启一个Android程序。所以，很显然，这篇文章就要从ActivityThread的main方法来开始。</p>
<p>首先，来看一下这个Android程序的起点方法，一睹芳容。</p>
<p><img src="http://img.blog.csdn.net/20161025184513316" alt="这里写图片描述"></p>
<p>这个方法重要的是在Looper prepare之后的部分，Handler跟loop的机制比较简单，可以先百度一下，我后面可能也会写篇文章说一下。简单来说loop就是一个无限循环，通过循环去去查询有没有handler发过来命令，如果有就处理，没有就继续循环。</p>
<p>这样的话，我们就能看出，主进程在做了一个初始化工作之后就把自己放在了一个loop循环中，要跟这个程序打交道，怎么办呢，就是通过获取它的handler，然后发命令，比如现在需要调用onResume方法，通过handler告诉主进程looper要调用onResume，looper就会做相应的处理了。当然这个是关于Android生命周期方法的调用问题，我们也是要单独拉出来讲的，这里就不细说了。</p>
<p>其实这篇文章的重点是这一句话，thread.attach(false)，ActivityThread的初始化操作。来看下这个方法具体做了什么操作。</p>
<p><img src="http://img.blog.csdn.net/20161025191248464" alt="这里写图片描述"></p>
<p>这个方法看下来还好，也都是配置一些监听器，像ViewRoot监听，内存监听，等等。重要的还是我选中的这一段，首先创建了一个ApplicationThread，然后把这个ApplicationThread交给了RuntimeInit，很多人开发过程中最头痛的就是RuntimeException，其实这里就是异常监控的初始化过程。然后创建了一个ActivityManagerNative，第一篇文章中就提过，ActivityManagerNative在创建的时候就会和ActivityManagerService绑定。接下来程序就可以通过AMN来访问AMS了。可是大家有想过，Client可以通过AMN来访问AMS，但是Server端怎么访问Client端呢，看这句话attachApplication，其实这里就是程序把自己的一个控制器交给了Server端，然后Server端就可以通过这个控制器来操作Client端了。不信我们来看下ApplicationThread的方法。</p>
<p><img src="http://img.blog.csdn.net/20161026103756562" alt="这里写图片描述"></p>
<p>是不是看到很多控制生命周期的方法，是的，AMS就是通过这个ApplicationThread来控制Client端的。</p>
<p>那么我们来总结一下这里，程序通过AMN来绑定AMS后，自己创建了一个桥梁applicationThread，然后把这个桥梁交给AMS，意思就是说，这是我小弟，以后联系我可以通过他。另一方面，在这个attach中client的各种初始化已经完成了。接下来的工作就通过attachApplication这个方法移交给AMS端了。</p>
<p>那接下来我们来看AMS端的attachApplication方法</p>
<p><img src="http://img.blog.csdn.net/20161026104634204" alt="这里写图片描述"></p>
<p>AMS端先通过Binder查询到程序的pid，然后调用attachApplicationLocked，继续往下看，这个方法就是AMS在接到“一个新进程启动了”这件事之后做了一些工作，很复杂，但AMS毕竟是老板，多做一些是正常的。</p>
<p><img src="http://img.blog.csdn.net/20161026110532870" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20161026110642120" alt="这里写图片描述"></p>
<p>先是用一个ProcessRecord来记录所有和Process有关的信息。</p>
<p><img src="http://img.blog.csdn.net/20161026110745261" alt="这里写图片描述"></p>
<p>这里有一个generateProvider的操作，但是我感觉应该不是生成程序的ContentProvider，因为此时Manifest文件还没有被解析，这里应该是为Application生成一些系统必要的ContentProvider。至于对不对，后面再验证吧。</p>
<p>后面做了一些配置工作后，调用了这个方法</p>
<p><img src="http://img.blog.csdn.net/20161026111207622" alt="这里写图片描述"></p>
<p>是的，这个方法才是主线剧情。通过这个方法，AMS将自己初始化的一些成果，告诉了Client端，并将控制权重新交回给Client端。在看bindApplication之前，我们看下AMS后面的工作。</p>
<p><img src="http://img.blog.csdn.net/20161026111410272" alt="这里写图片描述"></p>
<p>源码的注释写的比较清楚了，判断有没有其他组件在等这个进程启动，如果有，那么这个进程已经启动了，就该通知他们做事了。这不关我们的事，回到正题吧，看看控制权回到Client那边后，又做了什么。不过这里我们也再一次验证了AMS通过ApplicationThread这个类来和Client端打交道。</p>
<p>好，老板做完事情了，工作又回到小弟手中了。什么？你说老板其实什么都没做，你可以去财务领工资了。</p>
<p>但是ApplicationThread毕竟是个桥梁，实际的工作还是得给app的老大ActivityThread来做，所以这个bindApplication方法也是记录了一些AMS传回来的信息之后，又把工作给了ActivityThread。</p>
<p>我们来看下这个bindApplication做了什么，首先记录了一些配置信息</p>
<p><img src="http://img.blog.csdn.net/20161026112941262" alt="这里写图片描述"></p>
<p>然后在VM中注册APP的信息</p>
<p><img src="http://img.blog.csdn.net/20161026113020966" alt="这里写图片描述"></p>
<p>这里注释也说了，有两种情况，两个package是共享runtime的。</p>
<ul>
<li>设置了shareUserId</li>
<li>设置了ProcessName</li>
</ul>
<p>在share的情况下是不用再VM中注册的，我的理解是，share的组件并不是一个完整的app，而他所属的原来的app其实已经注册过了。</p>
<p>这里有个问题是，工作是怎么给ActivityThread的呢？看bindApplication的第三部分</p>
<p><img src="http://img.blog.csdn.net/20161026113436006" alt="这里写图片描述"></p>
<p>ApplicationThread是ActivityThread的内部类，内部类代表什么呢，它其实是持有一个外部类ActivityThread的对象引用的。可以这么说在ApplicationThread中其实是可以调到ActivityThread的所有方法的。那么它为什么要用这种sendMessage，然后通过Handler处理的这种方式呢。我们来想一下Handler的一个作用是什么。切换线程，在任何情况下，不管bindApplication这个方法运行在哪个线程中，只要通过handler这种方式，都可以回到ActivityThread所在的线程，也就是主线程。这就保证了什么呢，保证了Android的所有生命周期方法都是运行在主线程的，也就是我们常说的UI线程。</p>
<p>简单跟下sendMessage</p>
<p><img src="http://img.blog.csdn.net/20161026125950474" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20161026130023435" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20161026130056888" alt="这里写图片描述"></p>
<p>mH是一个H类型的对象，这个H就是ActivityThread内部的Handler</p>
<p><img src="http://img.blog.csdn.net/20161026130144586" alt="这里写图片描述"></p>
<p>看下这个Handler的handleMessage方法，跟下对BIND_APPLICATION消息的处理。</p>
<p><img src="http://img.blog.csdn.net/20161026130314369" alt="这里写图片描述"></p>
<p>进到了handleBIndApplication方法，这里就是Application的启动过程了，让我们来仔细看下这个方法处理的步骤</p>
<p><img src="http://img.blog.csdn.net/20161026133403057" alt="这里写图片描述"></p>
<p>国际惯例，前面也是各种记录，配置，初始化的工作，我们可以完全忽略。</p>
<p><img src="http://img.blog.csdn.net/20161026133429604" alt="这里写图片描述"></p>
<p>这个地方是一个小的知识点，在3.1以前的版本上，AsyncTask会改变默认的executor，我们看下改变之后的executor是什么样的。</p>
<p><img src="http://img.blog.csdn.net/20161026133859665" alt="这里写图片描述"></p>
<p>而默认的executor是这样的</p>
<p><img src="http://img.blog.csdn.net/20161026133929525" alt="这里写图片描述"></p>
<p>所以3.1以前版本的AsyncTask是并行执行任务的，而3.1以后版本反而是顺序执行任务的，当然，这个配置可以通过AsyncTask的参数而改变。</p>
<p>然后我们回到handleBindApplication，后面会继续设置时区，位置，屏幕参数等。</p>
<p><img src="http://img.blog.csdn.net/20161026134148091" alt="这里写图片描述"></p>
<p>之后创建了一个Context对象，注意，这是我们到目前位置接触到的第一个Context。我们知道在Android中Application，Activity等等其实都是Context的子类，但是他们又是不同的。这里创建的这个context对应的是我们开发过程中的哪个呢，让我们继续往下看。</p>
<p><img src="http://img.blog.csdn.net/20161026134554910" alt="这里写图片描述"></p>
<p>然后又是一堆配置，其中包括UI线程不能执行网络操作的配置</p>
<p><img src="http://img.blog.csdn.net/20161026134728344" alt="这里写图片描述"></p>
<p>然后是关于调试的相关配置，开启一个调试端口，其实关于调试也是需要讲很多的，调试本身也是C/S结构的，客户端开一个端口，等着服务端来连接进行调试，这里就是客户端打开端口的操作。</p>
<p><img src="http://img.blog.csdn.net/20161026134924665" alt="这里写图片描述"></p>
<p>设置了一个默认的HTTP代理</p>
<p><img src="http://img.blog.csdn.net/20161026135017838" alt="这里写图片描述"></p>
<p>后面一段是创建了一个Instrumentation对象，这里不截图的。之前第一篇文章我们也提到过，跟ActivityStart有关的操作都是由Instrumentation这个类管理的，被我们亲切的称为大管家，其实是为了监视我们的操作。。。</p>
<p>然后，这个方法讲了这么多，前面大家基本可以忽略，到现在才是重点。</p>
<p><img src="http://img.blog.csdn.net/20161026135315421" alt="这里写图片描述"></p>
<p>这一段，首先创建了一个Application，恩，我们开发过程中遇见的Application就是这里生成的。后面一段是初始化ContentProvider，这个我们后面讲ContentProvider启动过程的时候会看到，不过这里能知道的一个点就是ContentProvider的启动时间是相当早的，在Application的onCreate之前。然后这里的providers确实是之前我们说到的AMS生成的，然后一路传过来的。恩，先不细看了，因为这篇文章主要想说Activity的启动过程。</p>
<p>后面调用了Instrumentation的onCreate方法，是个空方法，可Override，再后面看到吗，通过Instrumentation大管家呼叫了Application的OnCreate方法</p>
<p><img src="http://img.blog.csdn.net/20161026135758475" alt="这里写图片描述"></p>
<p>至此，我们开发者接触到的Android生命周期中的第一个方法，Application的onCreate被执行了。至于前面生成的Context，我看了一下，传给了Instrumentation成为了Instrumentation中的appContext，但是我并没有找到跟Application对象结合的方法。这个继续往后看吧。</p>
<p>到此为止，这个handleBindApplication方法就结束了，创建了一个appContext，一个Instrumentation，一个Application，并且调用了Application的onCreate。中间还涉及到ContentProvider的初始化操作，我们先忽略。那么Activity在哪里，为什么感觉自己被带偏了。我又一路往前找。终于在AMS的attachApplicationLocked中，我看到了这一步。</p>
<p><img src="http://img.blog.csdn.net/20161026141040256" alt="这里写图片描述"></p>
<p>bindApplication在执行完我们上面说的那一堆之后，调用了StackSupervisor的attachApplicationLocked，好，我们来看一下。同时，这里的调用顺序也保证了Application的onCreate方法在Activity之前进行。</p>
<p><img src="http://img.blog.csdn.net/20161026141633514" alt="这里写图片描述"></p>
<p>方法中有一个realStartActivity的方法，名字很形象，前面我们调用过那么多次的startActivity，但是真正的Activity在这里才生成。</p>
<p>这个realStartActivity嘟噜嘟噜的扯了好多，不知道在干吗，但是终于看到了一个熟悉的影子</p>
<p><img src="http://img.blog.csdn.net/20161026150656396" alt="这里写图片描述"></p>
<p>就这样控制权又回到了ActivityThread</p>
<p><img src="http://img.blog.csdn.net/20161026151007131" alt="这里写图片描述"></p>
<p>这里先创建了一个ActivityClientRecord，这个就是Client端管理生成的activity对象的包装类，后面生成的Activity类都会被ActivityClientRecord包装一层，然后保存到ActivityThread的mActivities中。</p>
<p><img src="http://img.blog.csdn.net/20161026151225913" alt="这里写图片描述"></p>
<p>跟Application那边一样，scheduleLaunchActivity最终会被handleLaunchActivity处理，我们略过中间过程，直接看handleLaunchActivity吧。</p>
<p><img src="http://img.blog.csdn.net/20161026151527821" alt="这里写图片描述"></p>
<p>这个方法触发了Activity的两个生命周期方法，分别是我标出来的onCreate的onResume，然后后面那一段我的理解是Activity被创建出来，并且调用了onResume之后并没有被显示，那么就立刻调用onPause，但其实不是很懂这个地方。让我想想再回来补充吧。</p>
<p>接下来看performLaunchActivity吧</p>
<p><img src="http://img.blog.csdn.net/20161026152020367" alt="这里写图片描述"></p>
<p>首先更新了ActivityClientRecord的信息，包括ActivityInfo，ComponentName等，我们开发过程中也是经常用到，这些信息都是存在ActivityClientRecord中的。</p>
<p><img src="http://img.blog.csdn.net/20161026152153386" alt="这里写图片描述"></p>
<p>接下来创建了一个Activity，天哪，我们分析了这么久，终于看到Activity了。创建过程很简单，通过反射new了一个类出来，这个时候的Activity是还没有生命周期的。需要把Activity托管给AMS，才能有生命周期。</p>
<p><img src="http://img.blog.csdn.net/20161026152429639" alt="这里写图片描述"></p>
<p>接着，我们获取到之前创建的那个Application，为Activity创建了一个Context，然后通过Activity的attach方法把这些绑定起来。</p>
<p><img src="http://img.blog.csdn.net/20161026152636325" alt="这里写图片描述"></p>
<p>生成Context的方法和之前为Instrumentation生成Context的方法差不多，返回的是一个ContextImpl类型的对象，保存了Activity的上下文。</p>
<p><img src="http://img.blog.csdn.net/20161026152944396" alt="这里写图片描述"></p>
<p>attach方法将所有的对象包括Instrumentation，Application, ActivityThread等等全部在Activity中保存了一份。</p>
<p><img src="http://img.blog.csdn.net/20161026153551690" alt="这里写图片描述"></p>
<p>回到performLaunchActivity，attach之后通过Instrumentation大管家调用了Activity的onCreate方法</p>
<p><img src="http://img.blog.csdn.net/20161026154101442" alt="这里写图片描述"></p>
<p>然后将生成的activity交给ActivityClientRecord，并保存在mActivities中，这就完成了Activity的生成，并托管给系统，之后系统都可以在适当的时候通过token来获取到相应的Activity，并调用其生命周期。</p>
<p>这样performLaunchActivity就结束了，我们返回上一层handleLaunchActivity继续往下看，Activity在生成之后是会立刻调用onResume的。这两个生命周期有什么区别呢， 其实就在于onCreate跟onResume之间执行的这几句话，说实话，在创建的时候区别不大。不同的是onResume未来还会被调用，但是onCreate只有创建的时候才会被调用。</p>
<p><img src="http://img.blog.csdn.net/20161026154453198" alt="这里写图片描述"></p>
<p>其实到这来一个Activity的启动流程就已经结束了，但是我们顺便来看下handleResumeActivity的工作吧</p>
<p><img src="http://img.blog.csdn.net/20161026154706405" alt="这里写图片描述"></p>
<p>看这来，从mActivities中根据token获取了ActivityClientRecord，并进一步获得了里面的activity，然后执行了onResume方法，我刚想说，咦，这次调用没有通过大管家哎，然后看了一下performResume方法里面，其实还是通过Instrumentation调用的。</p>
<p><img src="http://img.blog.csdn.net/20161026154913320" alt="这里写图片描述"></p>
<p>然后，还更新了ActivityClientRecord的相关信息等。</p>
<p>其实到这里onResume已经调用完成了，那么handleResumeActivity后面的这一堆在干什么呢？</p>
<p><img src="http://img.blog.csdn.net/20161026155148379" alt="这里写图片描述"></p>
<p>通过方法名我们知道，Activity在onResume之后才开始处理显示的逻辑，这里就是通知AMS，Activity onResume已经调用完了，接下来要显示了，那么AMS就会通知WindowManger来显示Activity，这就是另外一件事了，我们在这里就不细细讨论了。</p>
<p>呼~终于写完了，整个流程主线还是很清楚的，AMS和AMN的分工明确。 </p>
<p>整个流程总结一下，是下面这种关系</p>
<p><img src="http://img.blog.csdn.net/20161026165138600" alt="这里写图片描述"></p>
<p>最后还是广告时间，如果喜欢这篇文章，可以关注我的博客<a href="http://zwgeek.com">http://zwgeek.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;广告时间，大家喜欢我的文章，可以关注我的博客&lt;a href=&quot;http://zwgeek.com&quot;&gt;http://zwgeek.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前面说到，希望分析一下Activity的启动流程，整个过程准备分为三篇文章来写&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序调用s
    
    </summary>
    
      <category term="Android" scheme="http://zwgeek.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zwgeek.com/tags/Android/"/>
    
      <category term="Activity启动" scheme="http://zwgeek.com/tags/Activity%E5%90%AF%E5%8A%A8/"/>
    
      <category term="系统" scheme="http://zwgeek.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android NDK 使用简介</title>
    <link href="http://zwgeek.com/2016/10/11/AndroidNDK%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/"/>
    <id>http://zwgeek.com/2016/10/11/AndroidNDK使用简介/</id>
    <published>2016-10-11T09:41:51.000Z</published>
    <updated>2016-10-11T10:40:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们来简单说一下Android NDK的使用方法。众所周知，so文件在Android的开发过程中起到了很重要的作用，无论与底层设备打交道还是在Android安全领域。so文件都格外受人青睐。NDK就是Android发布的用于编译so文件的一套工具，</p>
<p>引用自百度百科的一段解释</p>
<blockquote>
<p>Android NDK 是在SDK前面又加上了“原生”二字，即Native Development Kit，因此又被Google称为“NDK”。</p>
<p>众所周知，Android程序运行在Dalvik虚拟机中，NDK允许用户使用类似C / C++之类的原生代码语言执行部分程序。<br>NDK包括了：</p>
<ul>
<li>从C / C++生成原生代码库所需要的工具和build files。</li>
<li>将一致的原生库嵌入可以在Android设备上部署的应用程序包文件（application packages files ，即.apk文件）中。</li>
<li>支持所有未来Android平台的一系列原生系统头文件和库</li>
</ul>
<p>为何要用到NDK?<br>概括来说主要分为以下几种情况：</p>
<ol>
<li>代码的保护，由于apk的java层代码很容易被反编译，而C/C++库反汇难度较大。</li>
<li>在NDK中调用第三方C/C++库，因为大部分的开源库都是用C/C++代码编写的。</li>
<li>便于移植，用C/C++写的库可以方便在其他的嵌入式平台上再次使用。</li>
</ol>
</blockquote>
<p>本文从以下三个方面讲解NDK的使用</p>
<ul>
<li>直接在命令行中用NDK进行编译</li>
<li>Android Studio2.2以前对NDK的支持</li>
<li>Android Studio2.2及以后对NDK的支持</li>
</ul>
<h3 id="直接在命令行使用NDK"><a href="#直接在命令行使用NDK" class="headerlink" title="直接在命令行使用NDK"></a>直接在命令行使用NDK</h3><p>NDK本来就是一套编译工具，自然是在命令行中执行，其实后面两种方法都是对这种方法的自动化处理，万变不离其宗， 要理解后面两种方法，还是应该熟悉一下不借助任何工具时的操作。</p>
<p>SDK默认是不带NDK的，所以NDK需要额外下载，下载后还需要配置环境变量。具体方法可以查看百度，配置环境变量很简单，只需要把NDK根目录，也就是ndk-build所在的目录加入环境变量即可。</p>
<p>用NDK-BUILD构建一个NDK程序，我们知道就是将C文件编译成so文件，其实原理很简单，用gcc进行编译。哦，因为我是mac环境，所以自带GCC编译环境，如果是windows下的话，还需要安装Cygwin环境来模拟linux，不过听说最新的NDK自带Cygwin，所以不再需要额外安装，Windows的同学可以试一下，有问题可以在评论区提问， 有机会我会补充Win下的使用方法。</p>
<p>编译c程序需要makefile，其实简单说就是告诉GCC怎么编译，先编什么在编什么，需要哪些包等等。这个熟悉c的同学应该知道的。一个简单的so项目包含以下四个文件。</p>
<p><img src="http://img.blog.csdn.net/20161011175730810" alt="这里写图片描述"></p>
<p>除了.h和.c文件，还有两个makefile，Application.mk是项目makefile，它会指定调用哪个子makefile，然后Android.mk是具体执行操作的makefile。Application.mk的名字不能变，因为NDK会默认去找这个文件，后面也会讲到，Android.mk的名字可以变，是配置在Application.mk中的。</p>
<p>然后NDK还有一些规定，看.h文件的名字，c文件中的方法与java中某个方法是一一对应的，出于安全考量，NDK要求C中的方法名应该以对应java文件的包名+类名+方法名来命名。</p>
<p>头文件</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="comment">/* Header for class com_example_zzw_helloworld_JniUtils */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_com_example_zzw_helloworld_JniUtils</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_com_example_zzw_helloworld_JniUtils</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Class:     com_example_zzw_helloworld_JniUtils</div><div class="line"> * Method:    stringFromJNI</div><div class="line"> * Signature: ()Ljava/lang/String;</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_example_zzw_helloworld_JniUtils_stringFromJNI</span></span></div><div class="line">  <span class="params">(JNIEnv *, jobject)</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p> 这个头文件很简单，就声明了一个方法，这两个参数是固定的，这个方法在java中的表现形式为</p>
<pre><code>stringFromJNI() 
</code></pre><p>返回类型对应的是java中的string。然后创建C文件，实现该方法。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by zzw on 16/10/11.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_example_zzw_helloworld_JniUtils.h"</span></span></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_example_zzw_helloworld_JniUtils_stringFromJNI</span></span></div><div class="line">        <span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env, <span class="string">"Hello from JNI !"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们还需要两个make文件，一个是Application.mk另一个是Android.mk<br>Application.mk内容如下：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">APP_BUILD_SCRIPT := /Users/zzw/Desktop/jni/Android.mk</div></pre></td></tr></table></figure>
<p>其实就是声明Android.mk的位置<br>Android.mk如下：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH := <span class="variable">$(call my-dir)</span></div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line">LOCAL_MODULE    := hello-jni</div><div class="line">LOCAL_SRC_FILES := hello-jni.c</div><div class="line"></div><div class="line">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>
<p>然后运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./ndk-build NDK_PROJECT_PATH=/Users/zzw/Desktop</div></pre></td></tr></table></figure>
<p>指定PROJECT的位置，然后NDK会自动寻找该路径下的jni文件夹中的Application.mk，然后去编译。</p>
<p>如果编译成功，则会在该文件夹下生成libs文件夹，里面就是各种架构下的so文件<br><img src="http://img.blog.csdn.net/20161011181217255" alt="这里写图片描述"></p>
<p>生成的文件放在Android的libs中，对应的java文件调用方法为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.zzw.helloworld;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zzw on 16/10/11.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JniUtils</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"hello-jni"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">stringFromJNINative</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> stringFromJNI();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先用loadLibrary引入so文件，然后用native声明底层方法，然后我们就可以在程序中调用方法了。</p>
<p>这种方法完全没有借助任何的IDE，不过你也能看出来，有些工作是可以简化的，下面我们就说下在IDE中的做法。</p>
<h3 id="Android-Studio2-2-之前使用NDK"><a href="#Android-Studio2-2-之前使用NDK" class="headerlink" title="Android Studio2.2 之前使用NDK"></a>Android Studio2.2 之前使用NDK</h3><p>老的Android Studio支持NDK的方式可以根据java类帮我们生成头文件，然后编译过程可以写在gradle中，而不需要先编出so，再编android这样，具体过程如下</p>
<p>先写一个Java类，因为我们可以用jni工具根据java类来生成头文件，java类载入so文件并且声明底层方法，这个和前面一样，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.zzw.helloworld;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zzw on 16/10/11.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JniUtils</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"hello-jni"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">stringFromJNINative</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> stringFromJNI();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后编译程序，注意只编译不运行，因为此时运行会报错，编译后，在build的文件夹下面能看到这个class文件</p>
<p><img src="http://img.blog.csdn.net/20161011181737161" alt="这里写图片描述"></p>
<p>接下来我们可以用jni工具来根据这个class文件自动生成头文件了。命令行cd到build文件夹一层，然后执行如下命令</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> app/build/intermediates/classes/debug/</div><div class="line">javah -jni com.example.zzw.helloworld.JniUtils</div></pre></td></tr></table></figure>
<p>完整路径的类名，如果这一步报错，可以检查一下NDK有没有配到环境变量里。方法可以自行百度。</p>
<p>如果成功的话，你应该能看到在build文件夹下生成了一个.h文件，如下</p>
<p><img src="http://img.blog.csdn.net/20161011181815929" alt="这里写图片描述"></p>
<p>把这个文件拷贝到main下面jni文件夹下，这个文件夹也不是固定的，可以配置。但是我们一般习惯于放在这个地方。</p>
<p>复制过来之后这就是我们的头文件，然后我们可以创建一个c文件，实现头文件的方法</p>
<p>文件内容如下</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_example_zzw_helloworld_JniUtils.h"</span></span></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_example_zzw_helloworld_JniUtils_stringFromJNI</span></span></div><div class="line">        <span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env, <span class="string">"Hello from JNI !"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>build.gradle中需要配置ndk<br><img src="http://img.blog.csdn.net/20161011182053587" alt="这里写图片描述"></p>
<p>然后点击运行。</p>
<p>遇到的问题，<br>报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error:Execution failed for task &apos;:app:compileDebugNdk&apos;.</div><div class="line">&gt; Error: NDK integration is deprecated in the current plugin.  Consider trying the new experimental plugin.  For details, see http://tools.android.com/tech-docs/new-build-system/gradle-experimental.  Set &quot;$USE_DEPRECATED_NDK=true&quot; in gradle.properties to continue using the current NDK integration.</div></pre></td></tr></table></figure>
<p>这是因为gradle插件版本太高，已经不支持这个方法了，它提示我们在gradle.properties里面加一句话，但经过我测试，那句话是不对的，应该加如下一句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android.useDeprecatedNdk=true</div></pre></td></tr></table></figure>
<p>然后运行，正常。</p>
<h3 id="Android-Studio2-2之后使用NDK"><a href="#Android-Studio2-2之后使用NDK" class="headerlink" title="Android Studio2.2之后使用NDK"></a>Android Studio2.2之后使用NDK</h3><p>前面我们看到其实比起第一种方法也没有简化多少，所以在Studio2.2的时候google又尝试简化了做法，Android Studio 2.2开始支持用內建的方法来执行复杂的NDK编译，这意味着开发者只需要写好c文件，其他所有的编译，链接都可以交给系统去做。</p>
<p><em>注意：gradle版本需要2.2及以上</em></p>
<p>这个特性的实现要依赖于一个build标签，叫externalNativeBuild。标签配置如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">    externalNativeBuild &#123;</div><div class="line">        ndkBuild &#123;</div><div class="line">            arguments "NDK_LIBS_OUT=$jniLibsDir", "-j$numProcs", "all"</div><div class="line">            abiFilters "armeabi-v7a"</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">externalNativeBuild&#123;</div><div class="line">    ndkBuild&#123;</div><div class="line">        path "src/main/jni/Android.mk"</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> arguments指定编译的参数，abiFilters指定编译的平台，这些参数都可以省略以使用默认参数。下面path指定make文件的位置。</p>
<p>之后，NDK执行的task配置如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">task ndkBuild(type: Exec) &#123;</div><div class="line">    commandLine getNdkBuildCmd(),</div><div class="line">            '-C', file('src/main/jni').absolutePath,</div><div class="line">            '-j', Runtime.runtime.availableProcessors(),</div><div class="line">            "NDK_LIBS_OUT=$jniLibsDir",</div><div class="line">            'all',</div><div class="line">            'NDK_DEBUG=1'</div><div class="line"></div><div class="line">    dependsOn 'generateLuaBytecodes'</div><div class="line"></div><div class="line">    doFirst &#123;</div><div class="line">        println '== ndkBuild =='</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来让我们来看一下，具体的实现步骤是什么样的，不需要像以前一样自己写头文件，然后再编译，现在只需要关注c文件即可。以hello world为例，我们写一个C文件如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jstring JNICALL</span></div><div class="line"><span class="title">Java_com_example_zzw_helloworld_MainActivity_stringFromJNI</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env, <span class="string">"Hello from JNI !"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意方法名要以调用它的JAVA文件的包名+类名+方法名命名。<br>这样写完之后，我们就可以在相应的JAVA文件中调用了，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.zzw.helloworld;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"hello-jni"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        System.out.println(stringFromJNI());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先用loadLibrary引入so文件，然后用native声明底层方法，然后我们就可以在程序中调用方法了。<br>当然前面提到了make文件，我们要创建一个Android.mk文件在externalNativeBuild中声明的位置，如下：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH := <span class="variable">$(call my-dir)</span></div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line">LOCAL_MODULE    := hello-jni</div><div class="line">LOCAL_SRC_FILES := hello-jni.c</div><div class="line"></div><div class="line">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>
<p>之后，make project，运行程序应该就能看的效果了，通过这种方法生成的so文件放在app/.externalNativeBuild/debug/obj/local/下，并以lib+类名命名文件，如下：</p>
<p><img src="http://img.blog.csdn.net/20161011182623870" alt="这里写图片描述"></p>
<p> 感觉现在应该很简单了，只需要关注方法实现就可以了，其他基本都不要开发者关心了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天我们来简单说一下Android NDK的使用方法。众所周知，so文件在Android的开发过程中起到了很重要的作用，无论与底层设备打交道还是在Android安全领域。so文件都格外受人青睐。NDK就是Android发布的用于编译so文件的一套工具，&lt;/p&gt;
&lt;p&gt;引用自
    
    </summary>
    
      <category term="Android" scheme="http://zwgeek.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zwgeek.com/tags/Android/"/>
    
      <category term="NDK" scheme="http://zwgeek.com/tags/NDK/"/>
    
      <category term="Android Sudio" scheme="http://zwgeek.com/tags/Android-Sudio/"/>
    
  </entry>
  
  <entry>
    <title>Activity启动流程分析</title>
    <link href="http://zwgeek.com/2016/10/09/Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <id>http://zwgeek.com/2016/10/09/Activity启动流程分析/</id>
    <published>2016-10-09T06:08:25.000Z</published>
    <updated>2016-11-02T08:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>广告时间，大家喜欢我的文章，可以关注我的博客<a href="zwgeek.com">zwgeek.com</a></p>
<p>今天想和大家一起分享一下Activity的启动流程。这起源于我发现了一个好的现象，其实不知道大家发现没有，随着Android的发展，这几年Android开发者的素质也越来越高，我说的素质指的是对问题深度的理解，对Android总体的运行原理的分析，而不仅仅局限在应用开发层面了。还记得最开始接触Android的时候，那时候不管面试还是干嘛的，上来就问你生命周期，生命周期。感觉能说清楚生命周期已经是一件很厉害的事了。我也曾一度觉得开发者只要清楚onCreate什么时候调用就可以了，onCreate就是开发者能接触的最上层的内容了。根本没有考虑过程序应该有个入口，onCreate到底是怎么被调用的，更不用说还想着去看看源码。而现在，好像大家比起关心生命周期，关心起了更深层的问题，也就是一个Android程序是怎么被启动的，然后才是它的生命周期是怎么被调用的。我最先意识到这个现象时，是很开心的，这说明Android开发者越来越高级，也就意味着现在开发者不光使用Android，而且也能为Android社区做一些力所能及的贡献了。</p>
<p>这篇文章的目标是总结网上各种对Activity启动流程的分析。现在网上对Activity启动流程的分析已经多如牛毛了。那么我为什么还觉得有必要再写一次呢。一是自己边分析边写更有利于理解。二是我发现网上的分析习惯性的忽略细节，只着眼于一条大的主线，也不是说这样不好，这样确实比较容易理解，我希望我这篇文章能关注到每个细节点，每个方法的作用。</p>
<p>整个过程准备分为三篇文章来写</p>
<ul>
<li>程序调用startActivity后发生的操作，也就是这篇文章。</li>
<li>如果被startActivity的程序是需要重新启动的程序，程序在最开始初始化时发生的操作。例如在Launcher中启动一个程序或启动另外的程序。已经完成，可查阅<a href="http://zwgeek.com/2016/10/25/Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%902/">Activity启动流程分析（二）</a></li>
<li>如果被startActivity的程序是已经启动的程序，发生的操作。例如程序自己调用startActivity启动一个自己程序中的Activity</li>
</ul>
<p>整个分析过程中，希望读者带着这样一些问题</p>
<ul>
<li>getApplication() ，getApplicationContext()，getBaseContext()分别有什么区别？</li>
<li>单个进程中能存在多个application么？</li>
<li>为什么不能使用service或者application作为创建dialog的context参数？</li>
</ul>
<p>讲了这么多，我们可以看代码吧，从哪里开始看呢，就从Activity的startActivity方法作为起点吧。也就是这个方法</p>
<p><img src="http://img.blog.csdn.net/20161009143617855" alt="这里写图片描述"><br>Bundle为空的情况，又调用了带Bundle的同名方法，bundle传null，如下</p>
<p><img src="http://img.blog.csdn.net/20161009143857577" alt="这里写图片描述"></p>
<p>startActivity方法本质其实是调用startActivityForResult的，requestCode传了-1，这个倒是我之前没想到的，一直以为这两个方法是分开的。所以requestCode为-1的情况应该是被系统默认忽略的（后面的分析过程中也发现requestCode为负都是被忽略的）。startActivityForResult的两个方法跟startActivity一样，最终也是进到了带Bundle的方法。</p>
<p>这里先看下这个方法的注释<br><img src="http://img.blog.csdn.net/20161009145144243" alt="这里写图片描述"></p>
<ul>
<li>requestCode为负数时无效，跟调startActivity一样</li>
<li>这个方法仅仅试用于能够在当前Task（关于Task是什么，后面也会讲到，暂时可以考虑成是一个Activity的集合）启动的Activity，只有在这个集合中的Activity才能互相传递Result，如果Activity不能在当前Task启动，则这个方法会立即返回失败</li>
<li>在onCreate和onResume中调用startActivity时，前一个Activiyt不会显示，直到后面启动的Activity关闭返回结果，这是为了防止前一个Activity显示造成的闪烁</li>
<li>方法会抛出一个ActivityNotFoundException</li>
</ul>
<p><img src="http://img.blog.csdn.net/20161009152006663" alt="这里写图片描述"></p>
<p>这个方法一共有两种情况，mParent为null和不为null，mParent其实是指的ActivityGroup，但是这种用法现在已经被弃用了，所以这条线可以不用关注。无伤大雅，我们顺便来看一下吧。</p>
<p>先看一下下个启动过程，当mParent不为null的时候，直接调用mParent的startActivityFromChild方法，如下<br><img src="http://img.blog.csdn.net/20161009153000134" alt="这里写图片描述"></p>
<p>在startActivityFromChild中又通过mInstrumentation调用了其中的execStartActivity方法。</p>
<p>在继续之前，有两个小插曲，先说一下startActivityForResult的最后一步，mActivityTransitionState.startExitOutTransition方法，处理退出当前Activity的相关事宜，这个不太用关注。</p>
<p>然后是mInstrumentation，看过网上文章的同学应该熟悉Instrumentation这个类，Instrumentation这个类是一个管家类，所有跟Activity有关的实际操作都交给它做，恩，与其说大管家，不如说是打杂的。这样有什么好处呢，这个类可以做一些统计工作，因为它知道Activity有关的所有事情。</p>
<p>然后，我们继续，回过头来看mParent为null时候的调用，其实也是调用了mInstrumentation的execStartActivity方法。可以看出，这两个分支最后殊途同归，到了execStartActivity方法，只是有两个参数不同，这就值得我们去看下这两个参数有什么影响，第一个和第四个，两个Activity类型的参数。其实这里mToken也是不一样的，mToken相当于activity的唯一标识符，这个token关系到后面新创建的Activity加入到哪个task栈中。这三个参数体会一下，后面也会遇到一些关于Activity的问题基本都和这里传递的参数有关。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (mParent == <span class="keyword">null</span>)</div><div class="line">mInstrumentation.execStartActivity(<span class="keyword">this</span>, mMainThread.getApplicationThread(), mToken, <span class="keyword">this</span>,</div><div class="line">                    intent, requestCode, options);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(mParent != <span class="keyword">null</span>)</div><div class="line">mInstrumentation.execStartActivity(<span class="keyword">this</span>, mMainThread.getApplicationThread(), mToken, child,</div><div class="line">                intent, requestCode, options);</div></pre></td></tr></table></figure>
<p>这里先调用mInstrumentation的execStartActivity方法，返回一个ActivityResult。如果ActivityResult不为空，调用mMainThread的sendActivityResult方法。这其实是关于Activity通过startActivityForResult启动Activity然后返回Result的过程，这部分准备单独拉一篇文章来讲，这里就不多说了。</p>
<p>然后mMainThread是一个ActivityThread类型的，说起ActivityThread可厉害了，这个类其实就是应用程序的入口，main方法就在这个类里，我们的第二篇文章就主要是对这个类的分析。</p>
<p>然后这里mMainThread.sendActivityResult方法的作用就是调用onActivityResult，其实看到这里我不太明白，onActivityResult应该是新启动的Activity关闭后才调用。为什么这里execStartActivity之后就调用了，道理上这里Activity才启动，并没有关闭啊。我能想到的原因之一是execStartActivity是一个阻塞方法，只有当Activity关闭之后才会返回结果，然后继续往下执行，不知道我想的对不对，后面分析验证。</p>
<p>关于sendActivityResult是怎么调到onActivityResult的，和所有生命周期方法的调用一样，通过Handler，这个后面会统一讲一下。</p>
<p>下面我们去看Instrumentation的execStartActivity方法了。例行先看一下注释<br><img src="http://img.blog.csdn.net/20161009162711191" alt="这里写图片描述"></p>
<p>这个方法执行一个有应用程序发出的startActivity的请求，默认的实现会更新所有ActivityMonitor的信息，你可以用这个类监控activity的启动情况，并且做一些额外操作，这也是前面提到的可以在Instrumentation中监控每个Activity的启动情况。</p>
<p>当ActivityMonitor想要中断Activity启动时，这个方法依然会返回一个正确的ActivityResult。结合下面的代码，我前面提到的那个问题就明白了，这个方法并不阻塞，而且正常流程情况下也不会返回result，触发onActivityResult。只有当你设置了一个监控器，并且监控器是想阻止这个Acitivity启动的时候，这个方法不会真正去启动一个Activity，但是还是会正常返回Result值。</p>
<p>另外前面也提到，有两个参数要重点看下，第一个参数Context，是正在启动的Activity属于哪个Context，这个参数永远都是Parent，当没有Parent的时候是自己。第四个参数Activity，是具体执行startActivity任务的那个Activity，同时这个Activity负责处理onActivityResult。明白了这两个参数后，我们来看具体的代码。</p>
<p><img src="http://img.blog.csdn.net/20161009165506838" alt="这里写图片描述"></p>
<p>基本都在注释里写清楚了，核心方法是调了ActivityManagerNative.getDefault().startActivity方法getDefault是用系统提供的单例方法构造的一个单例对象，感觉这个方法也挺有意思，下次可以研究下。</p>
<p><img src="http://img.blog.csdn.net/20161009170243301" alt="这里写图片描述"></p>
<p>然后我们看ActivityManagerNative类中的startActivity方法<br><img src="http://img.blog.csdn.net/20161009170645365" alt="这里写图片描述"></p>
<p>我们来看ActivityManagerNative这个类，会发现它继承了Binder，如果你对Android的Binder体系熟悉的话，你应该能明显的看出来，这个方法是一个调用远端进程方法，封装数据，然后调用了Remote的transact方法。Binder也是Android中可以拖出来讲很久的一个体系，后面也会拖一篇文章来讲这个。所以ActivityManagerNative就是一个Binder对象，我们需要找到他对应的远端Service。追一下mRemote赋值的地方，会发现是在创建的时候。</p>
<p><img src="http://img.blog.csdn.net/20161009171802041" alt="这里写图片描述"></p>
<p>插播一句，这里Singleton类是java中实现的单例模式，具体这个单例实现的效果如果，然后有什么优化，不是很清楚，准备有空分析下这个类。但是想想系统实现的应该不会太差，所以写单例模式的时候也可以用这个类来。</p>
<p>我们回归正题，这个IBinder也可以跟到，简单来说，ActivityManagerNative的远端服务就是ActivityManagerService。整个Android程序其实是一个C/S结构，本地程序是一个Client，还一个Service端负责所有的程序调度。启动Activity肯定是系统的事啊，所以这里程序就把整个工作推给系统来做了。通过Binder模式，我们调到了远端Service的startActivity方法，来看这个方法。</p>
<p><img src="http://img.blog.csdn.net/20161009172405939" alt="这里写图片描述"></p>
<p>继续跟startActivityAsUser方法<br><img src="http://img.blog.csdn.net/20161009172721029" alt="这里写图片描述"></p>
<p>首先会检查，当前进程是否是孤立进程。孤立进程是Service的一个属性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:isolatedProcess</div></pre></td></tr></table></figure>
<p>如果Service设置了这个属性，那么这个Service将运行在一个特殊的进程中，这个进程和系统其他进程是分开的。这个进程没有任何权限。和这样的Service进行交互就只能通过系统API（也就是bind和start）。</p>
<p>简单来说，非孤立进程可以被拿来重用，重新运行新的app，孤立进程由于权限等问题，不能被重用，只能被销毁。所以在执行启动操作的时候要判断当前进程是否孤立进程，如果是，则不允许做start的操作。</p>
<p>回到正题，startActivityAsUser方法调用了StackSupervisor的startActivityMayWait方法，StackSupervisor是一个Activity栈的管理器，Activity栈是用来存储已经生成的的Activity对象的。这个我们会在后面说明。来看下StackSupervisor的startActivityMayWait方法。我看了一下整个流程，前面处理了Intent，AcitivtyStack等，为startActivity做准备，后面返回Result，都不是很重要。所以我们继续往下追，只寻找关于startActivity的部分。startActivityMayWait中的这一句</p>
<p><img src="http://img.blog.csdn.net/20161009180248576" alt="这里写图片描述"></p>
<p>调用了startActivityLocked方法，startActivityLocked中，也是先进行了一系列的检查，包括intent中各种flag的判定，以一个err命令贯穿整个方法，如果中间有任何异常err就会被改变，就不能继续往下进行。</p>
<p><img src="http://img.blog.csdn.net/20161009180410115" alt="这里写图片描述"></p>
<p>然后，调用到startActivityUncheckedLocked中，这个方法也是一个超级长的方法，对startActivity做了各种检查和准备， 主要是对Activity分各种Flag进行相应的处理。这个方法里面就有我们常见的Activity的各种启动模式的配置。如图</p>
<p><img src="http://img.blog.csdn.net/20161025140715881" alt="这里写图片描述"></p>
<p>前面说到startActivityForResult的时候，提过必须在一个task中，处理也是这里。如果不是一个task，会response一个异常码。</p>
<p><img src="http://img.blog.csdn.net/20161025140911557" alt="这里写图片描述"></p>
<p>这里其他代码的处理太细节化了，我们抓一下主线，生成一个ActivityStack，并<br>调用Stack的startActivityLocked方法<br><img src="http://img.blog.csdn.net/20161009180849750" alt="这里写图片描述"></p>
<p>这样我们就到了ActivityStack类里面，但是没过多久，startActivityLocked通过调用resumeTopActivitiesLocked又回到了ActivityStackSupervisor。</p>
<p><img src="http://img.blog.csdn.net/20161025143058036" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20161025143315259" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20161025143426099" alt="这里写图片描述"></p>
<p>做了一些检查，然后调到了resumeTopActivityInnerLocked，在resumeTopActivityInnerLocked中，因为thread和app都为null，所以执行了startSpecificActivityLocked方法，这就重新回到了ActivityStackSupervisor中</p>
<p><img src="http://img.blog.csdn.net/20161025144451400" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20161009182225273" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20161009182516474" alt="这里写图片描述"></p>
<p>我们可以看到startSpecificActivityLocked中，如果app和thread为null，会调用startProcessLocked启动一个新的线程。后面也会说到，新线程启动后还会回到这里，去调用真正的realStartActivityLocked，我们可以发现源码里的名字起的也是相当到位。</p>
<p>这里暂时thread和app都是null，所以通知ActivityManagerService的startProcessLocked方法启动一个进程</p>
<p>在ActivityManagerService的startProcessLocked方法中，前面处理了一下线程重用等的优化，用processRecord记录了要启动的进程的信息</p>
<p><img src="http://img.blog.csdn.net/20161025145835484" alt="这里写图片描述"></p>
<p>然后调了同名的startProcessLocked方法，但是参数由String的processName变成了ProcessRecord</p>
<p><img src="http://img.blog.csdn.net/20161009183016089" alt="这里写图片描述"></p>
<p>在这个方法中，通过Process.start启动了一个进程，并指定了进程的入口，也就是ActivityThread类的main方法。至于这个进程的启动过程涉及到Android内核层的东西了，这篇文章暂时不看这么细，我们就简单的理解为，新进程启动后，就会去调用指定的ActivityThread的main方法就好。</p>
<p><img src="http://img.blog.csdn.net/20161009183252014" alt="这里写图片描述"></p>
<p>最后总结一下这个过程，如果你不想关注太多的细节，只是提炼调用顺序的话，整个过程是这样的。</p>
<p><img src="http://img.blog.csdn.net/20161025165024179" alt="这里写图片描述"></p>
<p>这篇文章大概就到这里了。</p>
<p>最开始的时候提到，这篇文章介绍的是从头启动一个程序的流程，所以到目前为止，我们可以看到，AMS侧的准备工作已经做好了也记录了Activity的所有信息，但是，Activity包括运行Activity的线程其实还没有正式启动。下一篇文章中我们会详细说明一个Application启动后的流程，也就是main方法中做了什么。</p>
<p>例行广告，大家喜欢我的文章，可以关注我的博客<a href="zwgeek.com">zwgeek.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;广告时间，大家喜欢我的文章，可以关注我的博客&lt;a href=&quot;zwgeek.com&quot;&gt;zwgeek.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天想和大家一起分享一下Activity的启动流程。这起源于我发现了一个好的现象，其实不知道大家发现没有，随着Android的发展，这几年And
    
    </summary>
    
      <category term="Android" scheme="http://zwgeek.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zwgeek.com/tags/Android/"/>
    
      <category term="Activity启动" scheme="http://zwgeek.com/tags/Activity%E5%90%AF%E5%8A%A8/"/>
    
      <category term="系统" scheme="http://zwgeek.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>蒙哥马利算法详解</title>
    <link href="http://zwgeek.com/2016/09/29/%E8%92%99%E5%93%A5%E9%A9%AC%E5%88%A9%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>http://zwgeek.com/2016/09/29/蒙哥马利算法详解/</id>
    <published>2016-09-29T08:58:21.000Z</published>
    <updated>2016-10-08T06:52:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章为大家梳理一下整个蒙哥马利算法的本质，蒙哥马利算法并不是一个独立的算法，而是三个相互独立又相互联系的算法集合，其中包括    </p>
<ul>
<li>蒙哥马利乘模，是用来计算$x\cdot y\ (mod\ N)$</li>
<li>蒙哥马利约减，是用来计算$t\cdot \rho^{-1}\ (mod\ N)$</li>
<li>蒙哥马利幂模，是用来计算$x^y\ (mod\ N)$</li>
</ul>
<p>其中蒙哥马利幂乘是RSA加密算法的核心部分。</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>梳理几个概念，试想一个集合是整数模N之后得到的<br>$Z_N=\left\{0,1,2,\cdots,N-1\right\}$</p>
<p><em>注：N在base-b进制下有$l_N$位。  比如10进制和100进制，都属于base-10进制，因为$100=10^2$，所以b=10。在10进制下，667的$l_N=3$</em></p>
<p>这样的集合叫做N的剩余类环，任何属于这个集合Z的x满足以下两个条件： </p>
<ol>
<li>正整数</li>
<li>最大长度是$l_N$  </li>
</ol>
<p>这篇文章中讲到的蒙哥马利算法就是用来计算基于$Z_N$集合上的运算，简单讲一下原因，因为RSA是基于大数运算的，通常是1024bit或2018bit，而我们的计算机不可能存储完整的大数，因为占空间太大，而且也没必要。因此，这种基于大数运算的加密体系在计算的时候都是基于$Z_N$集合的，自然，蒙哥马利算法也是基于$Z_N$。</p>
<p>在剩余类环上，有两种重要的运算，一类是简单运算，也就是加法和减法，另一类复杂运算，也就是乘法。我们比较熟悉的是自然数集上的运算，下面看下怎么从自然数集的运算演变成剩余类环上的运算。</p>
<p>对于加法运算，如果计算$x\pm y\ (mod\ N)$ ($0\leqslant x,y&lt;N$)，试想自然数集上的 $x\pm y$    </p>
<p>$\qquad 0\leqslant x+y\leqslant 2\cdot(N-1)$  </p>
<p>$-(N-1)\leqslant x-y\leqslant (N-1)$</p>
<p>我们可以简单的通过加减N来实现从自然数到剩余类集的转换</p>
<p>另外一类是乘法操作，也就是$x\cdot y\ (mod\ N)$($0\leqslant x,y&lt;N$)，那么  </p>
<p>$0\leqslant x\cdot y\leqslant (N-1)^2$  </p>
<p>如果在自然数集下，令$t=x\cdot y$，那么对于$\mod N$我们需要计算 </p>
<p>$t-（N\cdot \lfloor\frac{t}{N}\rfloor）$</p>
<p>加减操作很简单，具体的算这里就不细说了，我们用$Z_N-ADD$ 来代表剩余类环上的加法操作。既然我们可以做加法操作，那么我们就可以扩展到乘法操作，算法如下</p>
<p><img src="http://img.blog.csdn.net/20160930181528853" alt="这里写图片描述"></p>
<p>但是这并不是一个好的解决方案，因为通常来说，我们不会直接做w位乘w位的操作，这个后面会用蒙哥马利的乘法来代替解决。</p>
<p>对于取模操作，一般有以下几种方法</p>
<p>1，根据以下公式，来计算取模操作</p>
<p>$t-（N\cdot \lfloor\frac{t}{N}\rfloor）$</p>
<p>这种解法有以下特征</p>
<ul>
<li>整个计算过程是基于标准的数字表示</li>
<li>不需要预计算（也就是提前计算一些变量，以备使用）</li>
<li>涉及到一个除法操作，非常费时和复杂</li>
</ul>
<p>2，用Barrett reduction算法，这篇文章不细说，但是有以下特征</p>
<ul>
<li>基于标准的数字表示</li>
<li>不需要预计算</li>
<li>需要$2 \cdot (l_N+1) \cdot (l_N+1)$ 次数乘运算</li>
</ul>
<p>3，用蒙哥马利约减，也就是下面要讲的算法，有以下特征  </p>
<ul>
<li>不是基于标准的数字表示（后文中有提到，是基于蒙哥马利表示法）</li>
<li>需要预计算</li>
<li>需要$2 \cdot (l_N) \cdot (l_N)$ 次数乘运算</li>
</ul>
<h3 id="蒙哥马利预备知识"><a href="#蒙哥马利预备知识" class="headerlink" title="蒙哥马利预备知识"></a>蒙哥马利预备知识</h3><p>在将蒙哥马利算法之前，先看一下在自然数下的乘法公式  </p>
<p>计算$x\cdot y$，想象一下我们常用的计算乘法的方法，用乘数的每一位乘上被乘数，然后把得到的结果相加，总结成公式，可以写成如下的形式。  </p>
<p>$x\cdot y=x\cdot sum_{i=0}^{l_y-1}y_i \cdot b^i$</p>
<p>$\qquad=sum_{i=0}^{l_y-1}y_i \cdot x \cdot b^i$  </p>
<p>尝试下面一个例子，10进制下（也就是b=10），y=456（也就是$l_n=3$），计算$x\cdot y$，公式可演变如下：  </p>
<p>$x\cdot y=(y_{0}\cdot x\cdot 10^{0})+(y_{1}\cdot x\cdot 10^{1})+(y_{2}\cdot x\cdot 10^{2})$<br>$\qquad=(y_{0}\cdot x\cdot 0)+(y_{1}\cdot x\cdot 10)+(y_{2}\cdot x\cdot 100)$<br>$\qquad=(y_{0}\cdot x)+10\cdot(y_{1}\cdot x+10\cdot(y_{2}\cdot x\cdot +10\cdot(0)))$  </p>
<p>最后一次演变其实就是用霍纳法则(Horner’s rule)所讲的规则，关于霍纳法则，可以自行百度。</p>
<p>这个计算过程写成代码实现的算法应该是这样的：<br><img src="http://img.blog.csdn.net/20161008101121827" alt="这里写图片描述"></p>
<p>接下来我们来看下面这样的计算，计算$(x\cdot y)/1000$，由前面可以知道 </p>
<p>$x\cdot y=(y_{0}\cdot x)+10\cdot(y_{1}\cdot x+10\cdot(y_{2}\cdot x\cdot +10\cdot(0)))$</p>
<p>由此可以知道：</p>
<p>$\frac{x\cdot y}{1000}=\frac{(y_{0}\cdot x\cdot 10^{0})+(y_{1}\cdot x\cdot 10^{1})+(y_{2}\cdot x\cdot 10^{2})}{1000}$</p>
<p>$\qquad=\frac{(y_{0}\cdot x\cdot 0)+(y_{1}\cdot x\cdot 10)+(y_{2}\cdot x\cdot 100)}{1000}$  </p>
<p>$\qquad=\frac{(y_{0}\cdot x)}{1000}+\frac{(y_{1}\cdot x)}{100}+\frac{(y_{2}\cdot x)}{10}$  </p>
<p>$\qquad=(((((y_0\cdot x)/10)+y_1\cdot x)/10)+y_2\cdot x)/10$  </p>
<p>这个计算过程写成代码实现的算法是这样的：<br><img src="http://img.blog.csdn.net/20161008101529067" alt="这里写图片描述"></p>
<p>接下来我们再来看在剩余类集合下的乘法操作 $x\cdot y/1000\ (mod\ 667)$  </p>
<p>我们知道剩余类集合$Z_{667}=\left\{0,1 \cdots 666\right\}$，是不存在小数的，而如果我们采用自然数集的计算方式的话，就会出现小数，比如前面的例子，除10就会有小数。  </p>
<p>这个问题是这样的，我们知道$u·667 \equiv 0 (mod 667)$（$\equiv$表示取模相等），所以我们可以选择一个合适的u，用u乘667再加上r，使得和是一个可以除10没有小数，这样在mod 667之后依然是正确的结果。至于u怎么算出来，这篇文章会在后面的章节说明。</p>
<p>这个过程之后$x\cdot y/1000\ (mod\ 667)$  的计算算法可以写成如下的形式<br><img src="http://img.blog.csdn.net/20161008102045043" alt="这里写图片描述"></p>
<p>至此，你可能还不明白上面说这一堆演变的原因，其实很简单，原来是一个$(x\cdot y)\ (mod\ 667)$的运算，这个运算中的模操作，正常情况下是要通过除法实现的，而除法是一个特别复杂的运算，要涉及到很多乘法，所以在大数运算时，我们要尽量避免除法的出现。而通过以上几个步骤，我们发现$(x\cdot y)/1000\ (mod\ 667)$这个操作是不用除法的。等等，算法中明明有个除10的操作，你骗谁呢。不知道你有没有发现，除数其实是我们的进制数，除进制数在计算机中是怎么做呢，其实很简单，左移操作就ok了。所以这个计算方法是不涉及到除法操作的。</p>
<p>但是我们要计算的明明是$(x_1\cdot y_1)\ (mod\ 667)$，怎么现在变成了$(x_2\cdot y_2)/1000\ (mod\ 667)$，所以在下一步，我们要思考的是怎么样让$(x_1\cdot y_1)\ (mod\ 667)$转变成$(x_2\cdot y_2)/1000\ (mod\ 667)$这种形式。</p>
<p>考虑这样两个算法  </p>
<ul>
<li>第一个是输入x和y，计算$x \cdot y \cdot \rho^{-1}$</li>
<li>第二个算法，输入一个t，计算$t \cdot \rho^{-1}$。</li>
</ul>
<p>$x\cdot y\ (mod\ 667)=((x\cdot1000)\cdot(y\cdot1000)/1000)/1000\ (mod\ 667)$</p>
<p>是不是变成了我们需要的$(x\cdot y)/1000\ (mod\ 667)$模式，而且这个转变过程是不是可以通过上面两个算法来实现，输入值如果是$(x\cdot1000)$和$(y\cdot1000)$，则通过第一个算法可以得到$((x\cdot1000)\cdot(y\cdot1000)/1000)$，把结果作为第二个算法的输入值，则通过第二个算法可以得到$((x\cdot1000)\cdot(y\cdot1000)/1000)/1000$。</p>
<p>扯了一大顿，终于引出了今天文章的主角，前面讲到的两个算法，第一个就是蒙哥马利乘模，第二个就是蒙哥马利约减。下面我们来讲这两个算法的详解。</p>
<p>正如前面提到的蒙哥马利算法的三个特性之一是，不是基于普通的整数表示法，而是基于蒙哥马利表示法。什么是蒙哥马利表示法呢，其实也很简单，上面我们提到，要让$(x_1\cdot y_1)\ (mod\ 667)$转变成$(x_2\cdot y_2)/1000\ (mod\ 667)$这种形式，我们需要将输入参数变成$(x\cdot1000)$和$(y\cdot1000)$，而不是x和y本身，而$(x\cdot1000)$和$(y\cdot1000)$ 其实就是蒙哥马利表示法。</p>
<p>所以我们先定义几个概念：  </p>
<ul>
<li>蒙哥马利参数<br>给定一个N，N在b进制（例如，二进制时，b=2）下共有l位，$gcd(N,b)=1$，先预计算以下几个值(这就是前面提到的特性之一，需要预计算）：</li>
</ul>
<ul>
<li><ul>
<li>$\rho = b^k$ 指定一个最小的k，使得$b^k&gt;N$  </li>
</ul>
</li>
<li><ul>
<li>$\omega =  -N^{-1} (mod\ \rho)$<br>这两个参数是做什么用的呢，你对照前面的演变过程可以猜到$\rho $ 就是前面演变中的1000，而$\omega$ 则是用来计算前面提到的u的。</li>
</ul>
</li>
</ul>
<ul>
<li>蒙哥马利表示法<br>对于x，$0\leqslant x\leqslant N-1$，x的蒙哥马利表示法表示为$x=x\cdot \rho\ (mod\ N)$</li>
</ul>
<h3 id="蒙哥马利约减"><a href="#蒙哥马利约减" class="headerlink" title="蒙哥马利约减"></a>蒙哥马利约减</h3><p>蒙哥马利约减的定义如下<br>给定一些整数t，蒙哥马利约减的计算结果是$t\cdot \rho^{-1}\ (mod\ N)$</p>
<p>蒙哥马利约减的算法可表示为<br><img src="http://img.blog.csdn.net/20161008105605136" alt="这里写图片描述"></p>
<p>蒙哥马利约减可以算作是下面要说的蒙哥马利模乘当$x=1$时的一种特殊形式，。同时它又是蒙哥马利乘模要用到的一部分，这在下一部分讲蒙哥马利乘模的时候有讲到。</p>
<p>蒙哥马利约减可以用来计算某个值得取模操作，比如我们要计算$m(mod\ N)$，只需要将m<br>的蒙哥马利表示法$m\cdot \rho$作为参数，带入蒙哥马利约减，则计算结果就是$m(mod\ N)$。</p>
<h3 id="蒙哥马利乘模"><a href="#蒙哥马利乘模" class="headerlink" title="蒙哥马利乘模"></a>蒙哥马利乘模</h3><p>一个蒙哥马利乘模包括整数乘法和蒙哥马利约减，现在我们有蒙哥马利表示法：  </p>
<p>$ \hat{x}=x\cdot\rho\ (mod\ N)$<br>$ \hat{y}=y\cdot\rho\ (mod\ N)$  </p>
<p>它们相乘的结果是  </p>
<p>$t=\hat{x}\cdot\hat{y}$<br>$\ =(x\cdot\rho)\cdot(y\cdot\rho)$<br>$\ =(x\cdot y)\cdot\rho^2$</p>
<p>最后，用一次蒙哥马利约减得到结果</p>
<p>$ \hat{t}=(x \cdot y) \cdot \rho\ (mod\ N)$</p>
<p>上面我们可以看出，给出的输入参数是$ \hat{x}$ 和$ \hat{y}$， 得到的结果是$(x \cdot y) \cdot \rho\ (mod\ N)$，所以蒙哥马利乘法也可以写成如下形式，已知输入参数x和y，蒙哥马利乘法是计算$(x \cdot y) \cdot \rho ^ {-1}\ (mod\ N)$</p>
<p>举个例子：<br>b=10，也就是说在10进制下，N=667<br>让$b^k&gt;N$的最小的k是3，所以$\rho=b^k=10^3=1000$<br>$\omega=-N^{-1}\ (mod\ \rho)=-667^{-1}\ (mod\ \rho)=997$</p>
<p>因为$x=421$，所以$\hat{x}=x\cdot\rho(mod\ N)=421\cdot1000(mod\ 667)=123$<br>因为$y=422$，所以$\hat{y}=y\cdot\rho(mod\ N)=422\cdot1000(mod\ 667)=456$</p>
<p>所以计算$\hat{x}$和$\hat{y}$蒙哥马利乘结果是 </p>
<p>$\hat{x}\cdot\hat{y}\cdot\rho^{-1}=(421\cdot1000\cdot422\cdot1000)\cdot1000^{-1}\ (mod\ 667)$<br>$\qquad\qquad(421\cdot422)\cdot1000\ (mod\ 667)$<br>$\qquad\qquad(240)\cdot1000\ (mod\ 667)$<br>$\qquad\qquad547\ (mod\ 667)$</p>
<p>然后总结一下蒙哥马利约减和蒙哥马利乘法的伪代码实现，这个算法其实就是从<a href="#蒙哥马利预备知识">蒙哥马利预备知识</a>讲到的算法演变来的。<br><img src="http://img.blog.csdn.net/20161008105553673" alt="这里写图片描述"></p>
<p>上面的例子用这个算法可以描述为<br><img src="http://img.blog.csdn.net/20161008130118944" alt="这里写图片描述"></p>
<p>蒙哥马利算法是一套很完美的算法，为什么这么说呢，你看一开始已知$x$，我们要求$\hat{x}=x \cdot \rho$，这个过程可以通过蒙哥马利乘法本身来计算，输入参数$x$和$\rho^2$，计算结果就是$\hat{x}=x \cdot \rho$。然后在最后，我们知道$\hat{x}=x \cdot \rho$，要求得$x$的时候，同样可以通过蒙哥马利算法本身计算，输入参数$\hat{x}$和$1$，计算结果就是$x$。有没有一种因就是果，果就是因的感觉，这就是为什么说蒙哥马利算法是一套很完美的算法。</p>
<h3 id="蒙哥马利幂模"><a href="#蒙哥马利幂模" class="headerlink" title="蒙哥马利幂模"></a>蒙哥马利幂模</h3><p>最后，才说到我们最开始提到的RSA的核心幂模运算，先来看一下普通幂运算的算法是怎么得出来的。  </p>
<blockquote>
<p>以下资料来自于百度百科<a href="http://baike.baidu.com/link?url=0n8jO-kkk7g7ms-6H2UCJz0sW5BkTB-wEor4aXsmCQ8A3o1u9f5AuAfAiO-PD7R4V7wxzen1AxZpiUkcy7XS0a" target="_blank" rel="external">快速模幂运算</a><br>针对快速模幂运算这一课题，西方现代数学家提出了大量的解决方案，通常都是先将幂模运算转化为乘模运算。<br>例如求D=C^15%N<br>由于：a*b % n = (a % n)*(b % n) % n<br>所以令：<br>C1 =C*C % N =C^2 % N<br>C2 =C1*C % N =C^3 % N<br>C3 =C2*C2 % N =C^6 % N<br>C4 =C3*C % N =C^7 % N<br>C5 =C4*C4 % N =C^14 % N<br>C6 =C5*C % N =C^15 % N<br>即：对于E=15的幂模运算可分解为6 个乘模运算，归纳分析以上方法可以发现：<br>对于任意指数E，都可采用以下算法计算D=C**E % N：<br>D=1<br>WHILE E&gt;0<br>IF E%2=0<br>C=C*C % N<br>E=E/2<br>ELSE<br>D=D*C % N<br>E=E-1<br>RETURN D<br>继续分析会发现，要知道E 何时能整除 2，并不需要反复进行减一或除二的操作，只需验证E 的二进制各位是0 还是1 就可以了，从左至右或从右至左验证都可以，从左至右会更简洁，<br>设E=Sum[i=0 to n](E*2**i)，0&lt;=E&lt;=1<br>则：<br>D=1<br>FOR i=n TO 0<br>D=D*D % N<br>IF E=1<br>D=D*C % N<br>RETURN D这样，模幂运算就转化成了一系列的模乘运算。</p>
</blockquote>
<p>算法可以写成如下的形式<br><img src="http://img.blog.csdn.net/20161008105957718" alt="这里写图片描述"></p>
<p>如果我们现在用蒙哥马利样式稍作改变，就可以变成如下的形式：<br><img src="http://img.blog.csdn.net/20161008110022926" alt="这里写图片描述"></p>
<p>以上就是蒙哥马利算法的全部，通过蒙哥马利算法中的约减运算，我们将大数运算中的模运算变成了移位操作，极大地提高了大数模乘的效率。</p>
<p>但是在以上的算法，可以发现还有两个变量的计算方式不是很清楚，一个是$\omega$，前面说过$\omega =  -N^{-1} (mod N)$ ，其实在算法中，我们看到，$omega$仅仅被用来做$\mod b$操作，所以事实上，我们只需要计算$\mod b$即可。</p>
<p>尽管N有可能是合数（因为两个素数的乘积不一定是素数），但通常N和$\rho$（也就是N和b）是互质的，也就是说$N^{\phi(b)}=1(mob\  b)$(费马定理)，$N^{\phi(b)-1}=N^{-1}(mob\  b)$<br>因为$b=2^\omega$，所以$\phi(b)=2^{(\omega-1)}$，写成算法是这样的<br><img src="http://img.blog.csdn.net/20161008110739777" alt="这里写图片描述"></p>
<p>还有一个参数是$\rho^2$，还记得前面说过$\rho$是怎么得出来吗，选定一个最小的$k$，使得$b^k&gt;N$，我们还知道$N$在$b$进制下是$l_N$位，所以当$k=l_N$的时候肯定是符合要求。</p>
<p>$b=2^{\omega}$ 所以$\rho=b^k=({2^{\omega}})^k$ </p>
<p>$\rho^2={({2^w})^k)}^2=2^{2\cdot k\cdot \omega}=2^{2\cdot l_N\cdot \omega}$，算法如下</p>
<p><img src="http://img.blog.csdn.net/20161008111748040" alt="这里写图片描述"></p>
<p>至此整个蒙哥马利算法就全部说完了。通过这个算法，我们可以实现快速幂模。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章为大家梳理一下整个蒙哥马利算法的本质，蒙哥马利算法并不是一个独立的算法，而是三个相互独立又相互联系的算法集合，其中包括    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;蒙哥马利乘模，是用来计算$x\cdot y\ (mod\ N)$&lt;/li&gt;
&lt;li&gt;蒙哥马利约减，是用来计算$t
    
    </summary>
    
      <category term="密码学" scheme="http://zwgeek.com/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="蒙哥马利约减" scheme="http://zwgeek.com/tags/%E8%92%99%E5%93%A5%E9%A9%AC%E5%88%A9%E7%BA%A6%E5%87%8F/"/>
    
      <category term="蒙哥马利乘法" scheme="http://zwgeek.com/tags/%E8%92%99%E5%93%A5%E9%A9%AC%E5%88%A9%E4%B9%98%E6%B3%95/"/>
    
      <category term="蒙哥马利幂乘" scheme="http://zwgeek.com/tags/%E8%92%99%E5%93%A5%E9%A9%AC%E5%88%A9%E5%B9%82%E4%B9%98/"/>
    
  </entry>
  
  <entry>
    <title>基于SpringMVC4.3.2+Spring4.3.2+MyBatis3.4.1搭建SSM框架</title>
    <link href="http://zwgeek.com/2016/09/28/%E5%9F%BA%E4%BA%8ESpringMVC4-3-2-Spring4-3-2-MyBatis3-4-1%E6%90%AD%E5%BB%BASSM%E6%A1%86%E6%9E%B6/"/>
    <id>http://zwgeek.com/2016/09/28/基于SpringMVC4-3-2-Spring4-3-2-MyBatis3-4-1搭建SSM框架/</id>
    <published>2016-09-28T09:07:08.000Z</published>
    <updated>2016-10-08T10:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>终于到了框架搭建的最后一步，实现我们的终极目标SpringMVC+Spring+MyBatis的SSM框架，这篇文章也是基于之前搭建的SpringMVC+Spring+Hibernate框架演变过来的，所以没看过之前几篇文章的同学请乘传送带。</p>
<p><a href="http://zwgeek.com/2016/09/03/%E5%9F%BA%E4%BA%8Estruts2-5-2-hibernate5-2-2-spring4-3-2%E6%90%AD%E5%BB%BASSH%E6%A1%86%E6%9E%B6v2/">基于struts2.5.2+hibernate5.2.2+spring4.3.2搭建SSH框架</a></p>
<p><a href="http://zwgeek.com/2016/09/27/%E6%90%AD%E5%BB%BASpringMVC-Spring4-3-2-Hibernate5-2-2%E6%A1%86%E6%9E%B6/">搭建SpringMVC+Spring4.3.2+Hibernate5.2.2框架</a></p>
<p>目录</p>
<ol>
<li><a href="#删掉Hibernate相关Jar包">删掉Hibernate相关Jar包</a></li>
<li><a href="#加入MyBatis的Jar包">加入MyBatis的Jar包</a></li>
<li><a href="#加入MyBatis Spring支持包">加入MyBatis Spring支持包</a></li>
<li><a href="#配置Mybatis">配置Mybatis</a></li>
<li><a href="#配置数据库映射">配置数据库映射</a></li>
<li><a href="#修改Mybatis配置文件">修改Mybatis配置文件</a></li>
<li><a href="#修改DAO类">修改DAO类</a></li>
</ol>
<p>在之前搭建SpringMVC+Spring+Hibernate的基础上，我们替换Hibernate至Mybatis，其实很简单了，所以这篇文章也很短，其他关于Spring，DAO设计模式的介绍都在之前文章中说过了。另外至于为什么最后选择使用Mybatis而不是Hibernate的原因，也在之前说过了。所以看这篇文章之前还是要看下之前两篇文章的。好，接下来我们开始替换工作。</p>
<h3 id="删掉Hibernate相关Jar包"><a href="#删掉Hibernate相关Jar包" class="headerlink" title="删掉Hibernate相关Jar包"></a>删掉Hibernate相关Jar包</h3><p>首先删掉Hibernate相关的jar包，在这里我删掉了所有以Hibernate开头的jar包</p>
<p><em>注意：同时要删掉spring-orm的jar包，因为这个包依赖hibernate那边的包，那边的包删掉后这个还在的话会报错</em></p>
<h3 id="加入MyBatis的Jar包"><a href="#加入MyBatis的Jar包" class="headerlink" title="加入MyBatis的Jar包"></a>加入MyBatis的Jar包</h3><p>然后我们引入Mybatis需要的包</p>
<h3 id="加入MyBatis-Spring支持包"><a href="#加入MyBatis-Spring支持包" class="headerlink" title="加入MyBatis Spring支持包"></a>加入MyBatis Spring支持包</h3><p>这个包要单独从MyBatis官网下载，注意每个版本支持的Mybatis和Spring版本不一样，官网也有说明，这里因为我们MyBatis和Spring都是用的最新版本，所以mybatis-spring要最新的1.3.1。</p>
<p><img src="http://img.blog.csdn.net/20160928174741789" alt="这里写图片描述"></p>
<p>如果版本不对的话，会报getTimeOut的异常，如果遇到这个异常，只要检查mybatis-spring这个jar包的版本号就可以了。</p>
<h3 id="配置Mybatis"><a href="#配置Mybatis" class="headerlink" title="配置Mybatis"></a>配置Mybatis</h3><p>其实Mybatis和Hibernate总体的理念是差不多的，包括POJO，DAO的设计等等，不同的是他们对数据库的映射，及操作方式。抱歉这里我也是入门级的，无法评论孰优孰劣，具体关于Mybatis和Hibernate的差异可以自行百度，然后等我用一段时间后，有什么心得也会补充进来。</p>
<p>所以需要改的地方其实不多，除了配置文件就是几个数据库映射，下面一一为大家讲解。</p>
<h3 id="配置数据库映射"><a href="#配置数据库映射" class="headerlink" title="配置数据库映射"></a>配置数据库映射</h3><p>Mybatis对数据库的映射是可以写成xml文件的，当然还有另外一种实现是用接口，这里只说一下xml形式的方法。</p>
<p>值得注意的是Mybatis不需要映射数据表，我简单说一下原因，大家试着理解一下。Hibernate需要映射数据表，是因为Hibernate将对某张表的增删改查操作都用HQL实现了一遍，这样有一个好处就是开发者不用关心sql语言，就算数据库换了也没关心，Hibernate会做一个HQL-&gt;SQL的转换。缺点就是对SQL的优化很难。而Mybatis与Hibernate在这个点上完全不同，Mybatis不关心表结构，你需要自己配置增删改查的SQL语句，至于优点和缺点也恰好和Hibernate相反。下面我们看下Mybatis的配置文件。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mapping/userMapper</div><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line">  <span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></div><div class="line"><span class="comment">&lt;!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的 </span></div><div class="line">	例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀) --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.helloworld.mapping.userMapper"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复 使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型 </span></div><div class="line">		resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回 User类就是users表所对应的实体类 --&gt;</div><div class="line">	<span class="comment">&lt;!-- 根据id查询得到一个user对象 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUser"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.helloworld.pojo.User"</span>&gt;</span></div><div class="line">		select *</div><div class="line">		from user where userId=#&#123;id&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<p>大家看到在配置文件中我们配置了一条查询语句，配置了输入参数id，和返回参数。当然配置返回参数的类型后，Mybatis可以自动将返回的语句映射成一个JAVA类。</p>
<h3 id="修改Mybatis配置文件"><a href="#修改Mybatis配置文件" class="headerlink" title="修改Mybatis配置文件"></a>修改Mybatis配置文件</h3><p>在前面框架配置的基础上，我们删掉spring-common.xml，因为前面也说过这个common配置是对datasource和session等关于Hibernate的配置，创建spring-mybatis.xml，将mybatis配置文件写入这个文件中。这也是前面说到配置文件分开的优势，你看，如果要修改持久层框架配置，只需要简单替换就可以了。</p>
<p>配置如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans  </span></div><div class="line">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  </div><div class="line">                        http://www.springframework.org/schema/context  </div><div class="line">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  </div><div class="line">                        http://www.springframework.org/schema/mvc  </div><div class="line">                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 定义数据源的信息 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span></span></div><div class="line">		<span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>zzw<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>80<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>20<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/helloworld/mapping/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.helloworld.dao"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>配置文件也比较容易理解，因为和Hibernate的概念都是一样的。然后只要定义了mapperLocations，Spring会自动扫描路径下的所有mapper文件，做成Bean。同样的，配置DAO所在的包名，也能自动将session注入到DAO中。</p>
<h3 id="修改DAO类"><a href="#修改DAO类" class="headerlink" title="修改DAO类"></a>修改DAO类</h3><p>前面DAO类继承HibernateDaoSupport是对Hibernate的支持，这里自然也要改掉了，Mybatis需要继承SqlSessionDaoSupport，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.daoImpl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</div><div class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.helloworld.dao.BaseDao;</div><div class="line"><span class="keyword">import</span> com.helloworld.pojo.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">BaseDao</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	  * 获取相关的数据库连接</div><div class="line">	  */</div><div class="line">	 <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</div><div class="line">	  <span class="keyword">return</span> getSqlSession().getConnection();</div><div class="line">	 &#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserDao</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"UserDao IN"</span>);</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</div><div class="line">    	String statement = <span class="string">"com.helloworld.mapping.userMapper.getUser"</span>;<span class="comment">//映射sql的标识字符串</span></div><div class="line">        <span class="comment">//执行查询返回一个唯一user对象的sql</span></div><div class="line">        User user = getSqlSession().selectOne(statement, <span class="number">1</span>);</div><div class="line">    	<span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveObject</span><span class="params">(Object obj)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至于Mapper文件中配置的查询文件怎么用，这里也给了一个简单的例子，非常简单，看一下就可以了。</p>
<p>配置完成之后整个项目的目录结构如下</p>
<p><img src="http://img.blog.csdn.net/20160928174844008" alt="这里写图片描述"></p>
<p>至此，Mybatis框架已经配置完成，可以和Hibernate一样写个Test类，看能不能正常获取到数据库中的数据，也可以将项目发布，看访问页面能不能获取的数据。</p>
<p>如果没什么意外，现在应该已经能够通过访问页面来访问数据库然后显示给用户了。一个WEB项目最简单的流程也就跑通了，然后就可以在这个简单流程上开发自己相应的业务了。那接下来我也要去做我的业务了，开发过程中有什么心得也会发在博客中跟大家分享，敬请期待。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于到了框架搭建的最后一步，实现我们的终极目标SpringMVC+Spring+MyBatis的SSM框架，这篇文章也是基于之前搭建的SpringMVC+Spring+Hibernate框架演变过来的，所以没看过之前几篇文章的同学请乘传送带。&lt;/p&gt;
&lt;p&gt;&lt;a href=
    
    </summary>
    
      <category term="服务端开发" scheme="http://zwgeek.com/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java Web" scheme="http://zwgeek.com/tags/Java-Web/"/>
    
      <category term="服务端" scheme="http://zwgeek.com/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
      <category term="SpringMVC" scheme="http://zwgeek.com/tags/SpringMVC/"/>
    
      <category term="MyBatis" scheme="http://zwgeek.com/tags/MyBatis/"/>
    
      <category term="SSM" scheme="http://zwgeek.com/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>搭建SpringMVC+Spring4.3.2+Hibernate5.2.2框架</title>
    <link href="http://zwgeek.com/2016/09/27/%E6%90%AD%E5%BB%BASpringMVC-Spring4-3-2-Hibernate5-2-2%E6%A1%86%E6%9E%B6/"/>
    <id>http://zwgeek.com/2016/09/27/搭建SpringMVC-Spring4-3-2-Hibernate5-2-2框架/</id>
    <published>2016-09-27T05:15:09.000Z</published>
    <updated>2016-10-08T10:31:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前说过，我最终想搭建一个SpringMVC+Spring+MyBatis的框架，然后从SSH框架开始慢慢演化，这篇博客将讲解怎样将SSH框架中的Struts部分替换为SpringMVC做请求转发。</p>
<p>至于为什么要替换成SpringMVC，我在<a href="http://zwgeek.com/2016/09/03/%E5%9F%BA%E4%BA%8Estruts2-5-2-hibernate5-2-2-spring4-3-2%E6%90%AD%E5%BB%BASSH%E6%A1%86%E6%9E%B6v2/">基于struts2.5.2+hibernate5.2.2+spring4.3.2搭建SSH框架</a>这篇博客里说过，以下几点：</p>
<ul>
<li>struts除了可以做请求转发，还有页面标签，所以你如果只用请求转发的话，这个框架有点多余</li>
<li>现在spring推出了springMVC，是专门做请求转发用的，因为是spring自家推出的，所以和spring的协调性更好，而且在我使用中也感觉springMVC用起来更方便，轻量级</li>
</ul>
<p>关于SSH框架的搭建可以去这篇文章查看</p>
<ul>
<li><a href="http://zwgeek.com/2016/09/03/%E5%9F%BA%E4%BA%8Estruts2-5-2-hibernate5-2-2-spring4-3-2%E6%90%AD%E5%BB%BASSH%E6%A1%86%E6%9E%B6v2/">基于struts2.5.2+hibernate5.2.2+spring4.3.2搭建SSH框架</a></li>
</ul>
<p>在上面的基础上把Struts换成SpringMVC，其实很简单，为什么这么说呢，因为搭建SSH框架的时候，我们把Spring的所有jar包都加入到项目里了，不知道你有没有注意到，有这样一个jar包</p>
<p>其实这个jar包就已经是对MVC的支持了，所以可以说我们上一个框架已经支持SpringMVC了，所以问题就变成了去掉Struts框架，所以很简单。</p>
<p>首先可以删掉Struts的所有jar包，主要是以下两个，其他common开头的jar包因为spring也在用，所以可以不删掉。<br>struts2-core和struts2-spring-plugin，现在lib如下，可做参考：<br><img src="http://img.blog.csdn.net/20160927142022944" alt=""><br><img src="http://img.blog.csdn.net/20160927142042958" alt=""></p>
<p>然后删掉struts.xml配置文件</p>
<p>接下来我们来看怎么让SpringMVC生效</p>
<p>首先把web.xml的拦截规则改成给SpringMVC拦截，如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:config/spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在web.xml中配置SpringMVC的配置文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 加载所有的配置文件 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:config/spring/spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<p>修改之后的web.xml如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xmlns:web</span>=<span class="string">"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>json_test<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- 加载所有的配置文件 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:config/spring/spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- 配置Spring监听 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:config/spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- 配置字符集 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- 配置Session --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>openSession<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>openSession<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>字符集的配置是为了让所有请求和回复都用统一的字符集，比较方便。</p>
<p>OpenSession是为了延长Session的生命周期用的，可以自行baidu一下，网上是这样写的。</p>
<blockquote>
<p>OpenSessionInViewFilter是Spring提供的一个针对Hibernate的一个支持类，其主要意思是在发起一个页面请求时打开Hibernate的Session，一直保持这个Session，直到这个请求结束，具体是通过一个Filter来实现的。
　</p>
<p>由于Hibernate引入了Lazy Load特性，使得脱离Hibernate的Session周期的对象如果再想通过getter方法取到其关联对象的值，Hibernate会抛出一个LazyLoad的Exception。所以为了解决这个问题，Spring引入了这个Filter，使得Hibernate的Session的生命周期变长。</p>
</blockquote>
<p>另外我们来看加载配置文件的地方</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 加载所有的配置文件 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:config/spring/spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这句话的意思是载入config/spring/目录下的所有以spring开头的配置文件。前面说过spring的配置其实就是在配置各种bean，在配置SSH的时候我们把所有bean都写在了applicationContext里面，导致这个文件很大很复杂，这样不利于修改配置和查找异常。其实我们可以把不同的bean配置在不同的文件中，然后在web.xml中告诉程序去哪里找配置文件，就像这里这样。我们可以把关于mvc的bean配置在sprng-mvc.xml中，把业务逻辑bean配置在spring-beans中，把基础bean（比如session，datasource等）配置在spring-common.xml中。</p>
<p>前面一篇文章也说过，eclipse在发布web项目的时候会把src目录映射成classpath目录，当然这是可以配置的。所以我们就在src目录下建立配置文件，如下</p>
<p><img src="http://img.blog.csdn.net/20160927142443663" alt=""></p>
<p>接下来看一下mvc的配置是怎样的</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></div><div class="line">	http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">	http://www.springframework.org/schema/mvc</div><div class="line">	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"&gt;</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 注解扫描包 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.mvc.controller"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 开启注解 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 静态资源(js/image)的访问 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>/&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 定义视图解析器 --&gt;</span>	</div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在主流的对SpringMVC的配置时基于注解的，至于怎么注解，我们后面再说，这个配置文件中前两部分就是配置注解用的，base-package指明注解在哪些包下，你当然可以写所有的包，让框架都去扫描一遍，但没必要。在SpringMVC框架中，控制转发的类叫Controller（对应Struts中的Action），所以注解通常也都是在com.xxx.xxx.controller包中，所以这里只扫描相应的包就可以。</p>
<p>mvc:resources定义静态文件的位置，因为我们前面在web.xml用/设置了过滤器，会拦截所有的请求，同时也会影响对静态文件的请求，这里配置之后，所有/js/**的请求都会去js文件夹去找，而不会跳转到controller控制类</p>
<p>ViewResolver是定义视图解析器，做什么用的的，简单来说，controller控制类中某个方法返回“index”的意思其实是跳转到index页面，但通常这个页面会有前缀（也就是相对路径）和后缀（扩展名），这里这样配置后，return “index”，就会跳转到/index.jsp页面。</p>
<p>解析完配置文件，我们看下Controller具体怎么写，其实就是在Struts框架中的Action类。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.mvc.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.mvc.manager.UserManager;</div><div class="line"><span class="keyword">import</span> com.mvc.pojo.User;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span></div><div class="line">&#123;</div><div class="line">	<span class="meta">@Resource</span>(name = <span class="string">"userManager"</span>) <span class="comment">// 获取spring配置文件中bean的id为userManager的，并注入</span></div><div class="line">	<span class="keyword">private</span> UserManager userManager;</div><div class="line"></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/toAddUser"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toAddUser</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"/addUser"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/getAllUser"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllUser</span><span class="params">(HttpServletResponse response)</span></span></div><div class="line">	&#123;</div><div class="line">		System.out.println(<span class="string">"getAllUser IN"</span>);</div><div class="line">		List&lt;User&gt; user = userManager.getUsers();</div><div class="line"></div><div class="line">		PrintWriter out = <span class="keyword">null</span>;</div><div class="line">		response.setContentType(<span class="string">"application/json"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">try</span></div><div class="line">		&#123;</div><div class="line">			out = response.getWriter();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; user.size(); i++)</div><div class="line">			&#123;</div><div class="line">				out.write(user.get(i).getUserName());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (IOException e)</div><div class="line">		&#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于注解的详细解析，准备在专门写一篇文章，简单来说，就是在方法上加上</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getAllUser"</span>)</div></pre></td></tr></table></figure>
<p>注解，对getAllUser的请求就会跳转到这个方法进行处理，像前面提到的，如果方法返回字符串，处理完之后就会做相应的跳转，如果方法返回void，则不进行任何跳转。</p>
<p>到目前为止SpringMVC就配置完了，这时你访问 <a href="http://host:port/projectName/getAllUser" target="_blank" rel="external">http://host:port/projectName/getAllUser</a> ，就能显示了。好，我们的第二个目标达成了，下个目标就是把Hibernate替换成Mybatis，然后就万事大吉了。</p>
<p>再列一下其他文件吧</p>
<p>spring-beans.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.mvc.daoImpl.UserDao"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"sessionFactory"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--用户注册业务逻辑类 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userManager"</span> <span class="attr">class</span>=<span class="string">"com.mvc.manager.UserManager"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dao"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"userDao"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>spring-common.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></div><div class="line">	http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 定义数据源的信息 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span></span></div><div class="line">		<span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>zzw<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>80<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>20<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--定义Hibernate的SessionFactory --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- SessionFactory使用的数据源为上面的数据源 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 指定了Hibernate的映射文件和配置信息 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingResources"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>com/mvc/pojo/User.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.jdbc.batch_size"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置一个事务管理器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置事务，使用代理的方式 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionProxy"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.transaction.interceptor.TransactionProxyFactoryBean"</span></div><div class="line">		<span class="attr">abstract</span>=<span class="string">"true"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionAttributes"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"add*"</span>&gt;</span>PROPAGATION_REQUIRED,-Exception<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"modify*"</span>&gt;</span>PROPAGATION_REQUIRED,-myException<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"del*"</span>&gt;</span>PROPAGATION_REQUIRED<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"*"</span>&gt;</span>PROPAGATION_REQUIRED<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其他像DAO类，manager类就不细说了，不懂得可以看我上一篇文章<a href="http://zwgeek.com/2016/09/03/%E5%9F%BA%E4%BA%8Estruts2-5-2-hibernate5-2-2-spring4-3-2%E6%90%AD%E5%BB%BASSH%E6%A1%86%E6%9E%B6v2/">基于struts2.5.2+hibernate5.2.2+spring4.3.2搭建SSH框架</a></p>
<p>整个项目的结构如下</p>
<p><img src="http://img.blog.csdn.net/20160927143143944" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前说过，我最终想搭建一个SpringMVC+Spring+MyBatis的框架，然后从SSH框架开始慢慢演化，这篇博客将讲解怎样将SSH框架中的Struts部分替换为SpringMVC做请求转发。&lt;/p&gt;
&lt;p&gt;至于为什么要替换成SpringMVC，我在&lt;a href=&quot;
    
    </summary>
    
      <category term="服务端开发" scheme="http://zwgeek.com/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java Web" scheme="http://zwgeek.com/tags/Java-Web/"/>
    
      <category term="服务端" scheme="http://zwgeek.com/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
      <category term="SpringMVC" scheme="http://zwgeek.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>密码字典生成工具</title>
    <link href="http://zwgeek.com/2016/09/26/%E5%AF%86%E7%A0%81%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
    <id>http://zwgeek.com/2016/09/26/密码字典生成工具/</id>
    <published>2016-09-26T09:48:44.000Z</published>
    <updated>2016-09-26T09:51:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近无事，做了一个密码字典生成工具</p>
<p>其实这种工具网上有很多，但是很多要收费，而且没有源代码，想修改一下也很麻烦，所以我实现了一个基于Python的跨平台的，如果需要一些生成策略或者什么的改动，只要稍微改动一下就行</p>
<p>详细信息可以参考readme</p>
<p>代码托管在<a href="https://github.com/zgzczzw/dictoryGenerator" target="_blank" rel="external">https://github.com/zgzczzw/dictoryGenerator</a></p>
<p>有兴趣的同学可以联系我，共同改进</p>
<p>接下来还想做目录扫描工具，xss扫描和sql注入扫描</p>
<p>空的时候再写一下详细的用户说明</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近无事，做了一个密码字典生成工具&lt;/p&gt;
&lt;p&gt;其实这种工具网上有很多，但是很多要收费，而且没有源代码，想修改一下也很麻烦，所以我实现了一个基于Python的跨平台的，如果需要一些生成策略或者什么的改动，只要稍微改动一下就行&lt;/p&gt;
&lt;p&gt;详细信息可以参考readme&lt;/
    
    </summary>
    
      <category term="安全" scheme="http://zwgeek.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="python" scheme="http://zwgeek.com/tags/python/"/>
    
      <category term="安全" scheme="http://zwgeek.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="密码生成" scheme="http://zwgeek.com/tags/%E5%AF%86%E7%A0%81%E7%94%9F%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>记一次android程序反编译并二次打包的过程</title>
    <link href="http://zwgeek.com/2016/09/15/%E8%AE%B0%E4%B8%80%E6%AC%A1android%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E5%B9%B6%E4%BA%8C%E6%AC%A1%E6%89%93%E5%8C%85%E7%9A%84%E8%BF%87%E7%A8%8Bv2/"/>
    <id>http://zwgeek.com/2016/09/15/记一次android程序反编译并二次打包的过程v2/</id>
    <published>2016-09-15T15:40:24.000Z</published>
    <updated>2016-09-28T10:44:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>在安全界有一句话叫不懂攻，焉知防。</p>
<p>前几天看到有一个问题在问Android端目前防止二次打包的方法有哪些？我想从攻击的角度来说这个问题。在分析过程中讲解每一步都有哪些防范手段。下面以一个市面上大公司的app为例，讲一下我是怎么绕过它的防范机制，修改代码（弹出一个提示框），并进行二次打包，重新签名，运行的。在写这篇文的过程中，我也遇到了一些问题，我在文章的最后进行了整理提问，希望这方面经验丰富的开发者可以一起交流。</p>
<p>另外，绕过程序的防二次打包机制毕竟不是一件好事，搞不好做这个程序的程序员要背锅，所以文章中代码都是以图片形式给出，关键识别位置都打了马赛克，但是我想一些有心人还是可以看出这是什么程序，你看出来就看出来吧，就不要说出来了，好吗。</p>
<h3 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h3><ul>
<li><a href="#Contents">Contents</a></li>
<li><a href="#用ApkTool反编译android程序">用ApkTool反编译android程序</a></li>
<li><a href="#用dex2jar反编译出java源代码">用dex2jar反编译出java源代码</a></li>
<li><a href="#用gui查看代码">用gui查看代码</a></li>
<li><a href="#重新打包，签名，运行">重新打包，签名，运行</a></li>
<li><a href="#绕过程序防二次打包机制">绕过程序防二次打包机制</a></li>
</ul>
<p>好，以下是正文</p>
<p>工欲善其事，必先利其器。首先准备好工具：</p>
<p>反编译工具</p>
<ul>
<li><p>apktool 反编译利器</p>
</li>
<li><p>dex2jar 将dex文件反编译成jar文件（Java代码）工具，用于解读代码</p>
</li>
<li><p>gui 打开jar文件工具</p>
</li>
</ul>
<p>签名工具</p>
<ul>
<li><p>apksign给java程序签名的工具</p>
</li>
<li><p>testkey.pk8 teskkey.x509.pem用于签名的文件</p>
</li>
</ul>
<p>首先下载好apk</p>
<p><img src="http://img.blog.csdn.net/20160921161047823?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h3 id="用ApkTool反编译android程序"><a href="#用ApkTool反编译android程序" class="headerlink" title="用ApkTool反编译android程序"></a>用ApkTool反编译android程序</h3><p>用apktool反编译，命令如下</p>
<p><img src="http://img.blog.csdn.net/20160921161101489?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160921161115411?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>成功后会在同级目录生成一个test文件夹</p>
<p><img src="http://img.blog.csdn.net/20160921161129224?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>这就是反编译之后的Android程序了，可以看出，这个目录结构跟我们编写android代码时的目录结构非常相似，除了java代码是以smali的格式呈现之外，其他都基本是原来的代码。其实有很多人抄界面，到这一步就可以抄出完整的界面了。如manifest文件，里面的Activity定义都可以看的很清楚了。然后layout文件，各种res都可以看见了。</p>
<p><img src="http://img.blog.csdn.net/20160921161150230?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>其实写到这，我就有个问题了，这一步怎么防？我不知道，愿请教一二。</p>
<p>如果我们要参考（chao）一个程序的界面，到这一步已经够了，以为所有的res和layout文件已经能看到了。</p>
<p>改代码重新编译也是要在这个文件夹中改smali文件的，所以smali的语法还是要熟悉一点。但是看代码逻辑我们不用去看晦涩难懂的smali语言，这就是下一步要做的工作。反编译出java代码。</p>
<h3 id="用dex2jar反编译出java源代码"><a href="#用dex2jar反编译出java源代码" class="headerlink" title="用dex2jar反编译出java源代码"></a>用dex2jar反编译出java源代码</h3><p>第一步做的工作先放在这，我们需要重新操作apk文件，其实apk文件就是一种压缩包，所以我们把后缀名改成rar，用解压缩工具打开。</p>
<p><img src="http://img.blog.csdn.net/20160921161216340?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>看到这里，有人会问，为什么不直接解压缩，跟我们刚才用apktool反编译出来的不一样吗，你可以试一下。</p>
<p>这里其他文件在apktool那一步已经反编译出来了，我们需要的仅仅是class文件，这是java代码编译后生成的文件，用dex2jar这个工具就可以反编译出原代码（java格式）了。把这个class文件解压出来，放在dex2jar的同级目录下。</p>
<p><img src="http://img.blog.csdn.net/20160921161229402?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>命令如上，成功之后就会在同级目录下生成jar文件了。</p>
<h3 id="用gui查看代码"><a href="#用gui查看代码" class="headerlink" title="用gui查看代码"></a>用gui查看代码</h3><p>还记得一开始我们说过的工具gui，通过gui打开jar文件，就能看到java代码了</p>
<p><img src="http://img.blog.csdn.net/20160921161255262?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>这里所有的引入的包代码都会有，那么怎么寻找我们要的主程序代码呢，这就要依赖在第一步我们反编译出的manifest文件，熟悉android的朋友知道，在manifest文件中有两个信息比较重要。</p>
<p>一是包名，也就是主程序的路径，在manifest的最开始一行。</p>
<p><img src="http://img.blog.csdn.net/20160921161314773?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>第二个信息是入口activity，这个很简单，只要找到有launcher标识的activity就是入口activity。</p>
<p><img src="http://img.blog.csdn.net/20160921161330367?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>现在你就可以去gui里面找到这个入口类了</p>
<p><img src="http://img.blog.csdn.net/20160921161344809?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>代码有混淆，但是混淆只是替换了一些变量名或者类名而已，增加了代码阅读的困难性，并不会修改程序逻辑本身，所以只要静下心来慢慢看，还是看到懂得。</p>
<p>至此，反编译的过程就结束了，你想看到一个程序的逻辑或者一个程序的界面逻辑都可以看的到的。</p>
<h3 id="重新打包，签名，运行"><a href="#重新打包，签名，运行" class="headerlink" title="重新打包，签名，运行"></a>重新打包，签名，运行</h3><p>下面，开始进行最重要的工作，修改代码，二次打包。其实这里你可以什么代码先都别改，只重新打包一次，看看程序是否能够正常运行，如果不能，看看程序是哪一步阻止了运行，这也方便你后期定位签名验证的位置。目前我见过的签名验证有以下几种：</p>
<ul>
<li>直接抛出异常，禁止运行</li>
<li>弹出提示框提示用户，提示框消失后，退出程序</li>
<li>跟服务器交互传递签名信息，如果不正确则服务器不返回数据</li>
</ul>
<p>重新打包是这样的，还要用到apktool，记得在第一步反编译出的那个文件夹吗，就是用这些文件再重新打包。打包命令如下：</p>
<p><img src="http://img.blog.csdn.net/20160921161400247?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>成功后，在同级目录下会看到test1.apk文件，这里只是打包成功了，程序还没有签名，没有签名的程序是无法安装到手机上的。签名用的的是apksign这个工具，这是java提供给开发者用于程序签名的工具，android的各类IDE也是用这个工具在签名。使用方法如下，将signapk.jar，testkey.pk8，testkey.x509.pem放在一个目录下，写一个signapk.bat文件，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar signapk.jar testkey.x509.pem testkey.pk8 %<span class="number">1</span> %<span class="number">2</span></div></pre></td></tr></table></figure>
<p>然后运行命令</p>
<p><img src="http://img.blog.csdn.net/20160921161418934?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>成功后会在同级目录下生成一个签过名的apk文件，这个文件我们需要的最终文件，只要你改过代码并且签完名后这个apk可以正常安装运行，那么本次的任务就算完成了。现在安装一下，看看会发生什么。</p>
<p>程序启动，然后弹出提示框</p>
<p><img src="http://img.blog.csdn.net/20160921161435809?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>程序弹出提示，点击确认后退出程序，看来这个app的签名验证是用了我说的上面第二种方法，下面来进行一些尝试来绕过这个签名验证。</p>
<h3 id="绕过程序防二次打包机制"><a href="#绕过程序防二次打包机制" class="headerlink" title="绕过程序防二次打包机制"></a>绕过程序防二次打包机制</h3><p>首先，我建议大家先全局搜一下signatures这个字符串，因为程序要获取app的签名就要通过packageInfo.signatures这种方式，如果在这里我们不让程序获取到真正的签名，而是直接返回给它那个“正确”的签名，岂不是瞒天过海，一步搞定。当然了，你必须要有原来那个程序的“正确”签名，不过这个简单，android系统并不阻止你去获取其他程序的签名，所以我们可以写个小的test程序，然后安装原来的apk，去获取一次正确的签名，记录下来。</p>
<p>获取其他程序签名代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getSignture</span><span class="params">(Application paramApplication)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        String packageName = <span class="string">"packageName"</span>;</div><div class="line">        List&lt;PackageInfo&gt; packages = paramApplication.getPackageManager().getInstalledPackages(PackageManager.GET_SIGNATURES);</div><div class="line">        <span class="keyword">for</span> (PackageInfo packageInfo : packages) &#123;</div><div class="line">            Signature[] signs = packageInfo.signatures;</div><div class="line">            Signature sign = signs[<span class="number">0</span>];</div><div class="line">            String signString = sign.toCharsString();</div><div class="line">            System.out.println(signString);</div><div class="line">            <span class="keyword">return</span> signString;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先装上原来从正常渠道下载的程序，然后改一下包名，运行这个程序，就能得到正确程序的正确签名了，记录一下签名，然后去我们反编译的代码里面找signatures相关的代码，看在哪里获取了签名并验证。</p>
<p><img src="http://img.blog.csdn.net/20160921161456325?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>程序中一共有三个地方，MainActivity里是程序用到的，另外两个是第三方库的签名校验，像微信支付这种第三方库都会校验签名，这个可以暂时不管，所以要管的其实就只有MainActivity里这个了，看这个方法：</p>
<p><img src="http://img.blog.csdn.net/20160921161518935?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>是不是跟我写的那个方法完全一样，这个方法其实是获取程序的本来的签名的，这就好说了，我们直接返回刚才记录的“正确”签名就可以瞒过程序了。</p>
<p>好，第一次尝试，去apktool反编译出的文件中的smali文件夹下找到这个类MainActivity，如下</p>
<p><img src="http://img.blog.csdn.net/20160921161536778?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>这是smali的语法，挺复杂的，感兴趣的朋友可以自己再翻阅一下资料。这里我们把这个方法全部注掉，直接返回“正确”的签名。如下</p>
<p><img src="http://img.blog.csdn.net/20160921161552497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>按照前面说的签名的方法，重新打包，签名，安装。</p>
<p>我们会发现，程序第一次进入是不行的，还是会提示，签名验证失败，第二次之后就可以正常进入了，这不是我们要的完美效果，思考一下，为什么会有这个情况，我想到以下几种原因：</p>
<ul>
<li>第一次的时候signinfo还没有获取，为空，所以认为是非法的</li>
<li>除了这里，程序在另外的地方做了二次验证，而且这个二次验证并不一定每次都能执行成功，这个很像是一个网络请求方法，跟服务器做验证，所以根据网络情况，并不一定每次都成功。</li>
</ul>
<p>如果是第一种情况，为什么正常的程序没有问题，我们就只是让返回值变了一下，其他并没有改变逻辑。我推测是时间差，因为原来的方法执行获取签名需要较长的时间，而直接返回正确签名很快，难道是这个时间差的影响？我决定把原来那个方法改回来，只修改返回值。如下：</p>
<p><img src="http://img.blog.csdn.net/20160921161607810?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>只修改返回值，原来的逻辑不变，时间差应该也排除了，重新打包签名运行。好吧，很明显不是，而且情况更严重了，前面这些只是我的经验之谈，你在完全不了解逻辑的情况下，可以这样先试一下，我想能绕过30%的app吧。如果是上面说的第二种情况，我们还是来看一下代码逻辑吧。</p>
<p>全局搜一下应用签名验证失败这句话，看看什么情况下会触发。</p>
<p><img src="http://img.blog.csdn.net/20160921161636309?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>一共有两处，我们先看第一处</p>
<p>其实混淆后的代码挺恶心的，你看这个逻辑好像是如果LoginActivity的c方法为null就执行，但是你去看c方法就会发现根本就没有返回值，稳稳的null。这里代码其实是这样看的，要跳出前面那个while，所以我们去loginActivity找what值是19的情况。</p>
<p><img src="http://img.blog.csdn.net/20160921161648325?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>往前看，可以发现他调用了一个方法</p>
<p><img src="http://img.blog.csdn.net/20160921161703341?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>看来验证应该是在这里了，而且是一个网络请求验证，所以这个app的防二次打包的机制已经做的比较好的。研究下这个方法，混淆代码不是很容易看，我先用抓包工具抓了一下包。</p>
<p>发现程序在启动的时候发了两个用来验证的请求，第一个请求没有参数，服务器返回如下字段</p>
<p><img src="http://img.blog.csdn.net/20160921161725810?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>第二次请求带有如下参数</p>
<p><img src="http://img.blog.csdn.net/20160921161740217?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>正常的包服务器返回的是status=1，而我重新打包后服务器返回的是status=0</p>
<p>这是一种典型的challenge-response的方法，服务器发来challenge，然后程序用自身特性的一个字符串加密后再返回response，如果正确，则通过验证，反之则阻止运行。</p>
<p>这里我想的是，我找的加密challenge的那一段算法，看他是用什么方式加密的，用的是程序的哪一段特征值，然后像前面改签名一样，用“正确”的特征值替换下。</p>
<p>但是，恕我愚钝，看不懂代码，这里我贴一下逻辑，有大神对混淆比较了解的可以跟我交流下。</p>
<p><img src="http://img.blog.csdn.net/20160921161756327?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>首先loginActivity调了这个Post请求，第一次调用参数为空，服务器会返回challenge 四个字符串</p>
<p><img src="http://img.blog.csdn.net/20160921161811139?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>程序会把这四个字符串交给一个handler处理</p>
<p><img src="http://img.blog.csdn.net/20160921161825717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>抱歉我追到这就追不下去了，因为中间这几个不管a还是b都因为混淆无法直接找到，我也没想出什么能间接找到的方法。</p>
<p>是不是到这就束手无策了呢，其实也不是，前面的分析是希望在最上游解决问题，如果我们能在最上游把问题解决了，下面不管什么逻辑都不用担心了，但是现在最上游无解了，那么我们就往下找一找，前面说过， 签名验证失败弹框是在服务器返回后根据服务器返回信息来判断的，那么我们可以把判断的逻辑改掉。</p>
<p><img src="http://img.blog.csdn.net/20160921161841515?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>将这个代码改成永true</p>
<p>我们去smali找到LoginActivity里的f类，smali编译时会把所有的内部类编成一个单独的文件，所有我们去找LoginActivity$f这个文件</p>
<p><img src="http://img.blog.csdn.net/20160921161855921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>这段代码是比较status和1，如果为0则跳到cond_2，cond_2就是会给message19的那部分代码，这里我们不让他跳转，所以删掉这一句即可。另外MainActivity里也有一个同样的校验，一起改掉就行了。</p>
<p>现在打包，签名，运行</p>
<p>程序正常启动，没有弹出任何异常提醒，试试其他功能，都正常。既然签名验证我们搞定，现在往里面加一句弹toast的代码，轻而易举，我准备加在MainActivity的onCreate的时候，找到这部分代码。</p>
<p><img src="http://img.blog.csdn.net/20160921161910031?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>注意要加在super.onCreate之后。弹框代码如下</p>
<p><img src="http://img.blog.csdn.net/20160921161924110?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>加完代码之后如下</p>
<p>打包，签名，运行</p>
<p><img src="http://img.blog.csdn.net/20160921161953186?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>效果如上，至此，这篇文章就结束了，我们绕过了这个app的防二次打包机制，并成功的修改了代码。</p>
<p>总结一下</p>
<p>1， 混淆确实是有用处的，虽然混淆后的逻辑仍然可以看懂，但是如果你想去追踪一些细节逻辑，很难，当然，我混淆代码研究的太少，经验太少也是一个方面。</p>
<p>2， App层面上的签名验证基本是无效的的，比如一开始我们说的getSignature这里。</p>
<p>3， 采用challenge-response的方式跟服务器验证，如果使用不恰当，基本也是完全无效的，比如该应用，成功与否只判断服务器返回的一个字符串，而且判断语句是在本地，这个完全是可以绕过的。</p>
<p>至于更好的方法，我查资料的时候，网上看到这样一个方法，同样是跟服务器验证，但是服务器不是返回一个字段，而是返回一段核心代码，然后程序动态执行这段核心代码。我觉得采用这种方法，难度会上升一个层级。但还是无法有效避免二次打包。</p>
<p><a href="https://link.zhihu.com/?target=http%3A//bbs.pediy.com/showthread.php%3Ft%3D180655" target="_blank" rel="external">点击打开链接</a></p>
<p>几个问题：</p>
<p>1， 跟服务器验证的时候，验证的是什么东西，前面讲了因为那段代码没跟出来，所以不知道实现逻辑。以我的经验，二次打包唯一变动的应该就是签名了，但是签名我们已经绕过去了，不知道还有什么可以拿来验证的东西。</p>
<p>2， Android资源层面的东西有没有防反编译的方法，我是说res，layout这些。</p>
<p>ok，洋洋洒洒的终于写完了，我是觉得自己写得已经很详细了，已经到了读者完全可以复制过程的程度。但难免有一些地方我觉得可以省略，但是读者不懂，可以在评论区提问，我会回答的。</p>
<p>另外，再次强调一下，绕过程序的防二次打包机制毕竟不是一件好事，搞不好做这个程序的程序员要背锅，所以文章中代码都是以图片形式给出，关键识别位置都打了马赛克，但是我想一些有心人还是可以看出这是什么程序，你看出来就看出来吧，就不要说出来了，好吗。</p>
<p>如果这样还有任何侵犯到开发方权利的地方，开发方可以向我提出，我换个程序继续搞，哈哈，开玩笑，我会和你们协商如果处理的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在安全界有一句话叫不懂攻，焉知防。&lt;/p&gt;
&lt;p&gt;前几天看到有一个问题在问Android端目前防止二次打包的方法有哪些？我想从攻击的角度来说这个问题。在分析过程中讲解每一步都有哪些防范手段。下面以一个市面上大公司的app为例，讲一下我是怎么绕过它的防范机制，修改代码（弹出一
    
    </summary>
    
      <category term="Android" scheme="http://zwgeek.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zwgeek.com/tags/Android/"/>
    
      <category term="移动安全" scheme="http://zwgeek.com/tags/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
      <category term="逆向" scheme="http://zwgeek.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>基于struts2.5.2+hibernate5.2.2+spring4.3.2搭建SSH框架</title>
    <link href="http://zwgeek.com/2016/09/03/%E5%9F%BA%E4%BA%8Estruts2-5-2-hibernate5-2-2-spring4-3-2%E6%90%AD%E5%BB%BASSH%E6%A1%86%E6%9E%B6v2/"/>
    <id>http://zwgeek.com/2016/09/03/基于struts2-5-2-hibernate5-2-2-spring4-3-2搭建SSH框架v2/</id>
    <published>2016-09-03T10:42:33.000Z</published>
    <updated>2016-09-28T10:44:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在在学习后端框架，最后的目标是希望搭建一个基于spring mvc + mybatis + spring的框架，因为之前接触过SSH，所以想从SSH开始，慢慢演化，也巩固一下自己的知识。<br>之前每次搭建SSH框架都要在网上查各种资料，而且我也发现各种资料基于的SSH版本都比较老，新版本就会遇到各种各样的问题，所以基于这次的搭建流程，写一下遇到的问题和解决方法。</p>
<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul>
<li><a href="#Contents">Contents</a></li>
<li><a href="#基础需求">基础需求</a></li>
<li><a href="#配置Struts框架">配置Struts框架</a></li>
<li><a href="#搭建Hibernate框架">搭建Hibernate框架</a></li>
<li><a href="#dao">DAO设计模型</a></li>
<li><a href="#搭建Spring框架，整合Struts和Hibernate">搭建Spring框架，整合Struts和Hibernate</a></li>
</ul>
<h2 id="基础需求"><a href="#基础需求" class="headerlink" title="基础需求"></a>基础需求</h2><h3 id="下载-Eclipse-J2EE版"><a href="#下载-Eclipse-J2EE版" class="headerlink" title="下载 Eclipse J2EE版"></a>下载 Eclipse J2EE版</h3><p>J2EE版带server和maven的配置，用起来比较方便，其他也没什么区别，普通版装插件也是可以达到一样效果的</p>
<h3 id="下载tomcat"><a href="#下载tomcat" class="headerlink" title="下载tomcat"></a>下载tomcat</h3><p>目前Eclipse J2EE版的server只支持tomcat 8 以下版本，我试过8.5.5也不支持，所以最好下7</p>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>具体流程可以从网上找，这个简单</p>
<p>创建数据库 create database test；</p>
<p>创建表<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">create table <span class="title">user</span><span class="params">(</span></span></div><div class="line"> userId <span class="keyword">int</span> auto_increment,  </div><div class="line"> userName varchar(<span class="number">16</span>) not <span class="keyword">null</span>,  </div><div class="line"> password <span class="title">varchar</span><span class="params">(<span class="number">16</span>)</span> not <span class="keyword">null</span>,  </div><div class="line"> gender <span class="keyword">int</span> not <span class="keyword">null</span>,  </div><div class="line"> primary <span class="title">key</span><span class="params">(userId)</span>  </div><div class="line">);</div></pre></td></tr></table></figure></p>
<h2 id="配置Struts框架"><a href="#配置Struts框架" class="headerlink" title="配置Struts框架"></a>配置Struts框架</h2><h3 id="安装struts的jar包"><a href="#安装struts的jar包" class="headerlink" title="安装struts的jar包"></a>安装struts的jar包</h3><p>下载struts-2.5.2包</p>
<p>将包下面lib目录下的以下文件拷贝到项目的WEB-INF/lib下面，当然这里要先创建一个Dynamic Web Project，这个也简单，在Eclipse中点下一步下一步下一步就可以。</p>
<p>为什么是放在WEB-INF/lib下，而不放在项目的lib下，这是因为，web项目在发布后依赖包是去寻找WEB-INF目录下的各种包的。这里我后面遇到一个奇怪的问题，也加深了对这个配置的理解，具体什么问题以后再说。然后你把包放在WEB-INF/lib下的时候，eclipse会自动拷贝一份到项目的lib下，方便编程时候的依赖。</p>
<p><img src="http://img.blog.csdn.net/20160922112818884?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h3 id="创建web-xml"><a href="#创建web-xml" class="headerlink" title="创建web.xml"></a>创建web.xml</h3><p>在WEB-INF下面创建web.xml，配置struts监听，这个web.xml其实就是整个web项目的入口，所有的配置都是从这里开始，再跳转的其他地方。格式如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee </span></div><div class="line">    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></div><div class="line">           org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</div><div class="line">        <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"> 	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  		<span class="comment">&lt;!--注意：千万不能写成：*.action ，如果需要：*.action应该配置在struts.xml中--&gt;</span></div><div class="line"> 	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其实熟悉j2ee的人知道，在struts之前，j2ee最基本的跳转是用servlet来做的，struts其实也要基于servlet来做，配置一个filter，name随意。然后在filter-mapping里配置满足一定条件的url请求都交给这个filter来处理，其实也就是struts来处理。这里我们配置为/*，也就是所有的请求都转发给struts处理，这是最简单的，如果需要特殊配置可以在这里再配置。</p>
<p>另外也要注意/<em> 和 /的区别，按照我个人的理解/</em>是所有的请求，包括/test.jsp和/test.html这种带后缀名的请求。/是不带后缀名的所有请求，像/test这样的。</p>
<h3 id="创建struts-xml"><a href="#创建struts-xml" class="headerlink" title="创建struts.xml"></a>创建struts.xml</h3><p>然后所有的请求都给struts处理了，struts本身肯定还需要一个配置文件，来转发各种请求到相应的处理类，这个配置文件是struts.xml，放在src文件夹下，前面说过，web项目的配置文件都是在web-inf下面，为什么这个放在src文件夹下呢，这里就要说到一个eclipse发布映射的问题。</p>
<p>你项目里点右键，选属性，选Deployment Assembly，可以看到这是发包时候的映射关系，src文件夹会发布到WEB-INF/classes，而struts会默认到这个文件夹下面找配置文件。</p>
<p><img src="http://img.blog.csdn.net/20160922122622832?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>回到正题，说一下struts的配置文件，格式如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN" "http://struts.apache.org/dtds/struts-2.0.dtd" &gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">package</span>  <span class="attr">name</span> =<span class="string">"user_curd"</span>  <span class="attr">extends</span> =<span class="string">"struts-default"</span>  &gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">global-results</span>&gt;</span>  </div><div class="line">            <span class="comment">&lt;!--  下面定义的结果对所有的Action都有效  --&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">result</span>  <span class="attr">name</span> =<span class="string">"exception"</span>&gt;</span> /error.jsp <span class="tag">&lt;/<span class="name">result</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">global-results</span>&gt;</span>  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">global-exception-mappings</span>&gt;</span>  </div><div class="line">            <span class="comment">&lt;!--  指Action抛出Exception异常时，转入名为exception的结果。  --&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">exception-mapping</span>  <span class="attr">exception</span> =<span class="string">"java.lang.Exception"</span>  <span class="attr">result</span> =<span class="string">"exception"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">global-exception-mappings</span>&gt;</span>  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span>  <span class="attr">name</span> =<span class="string">"test"</span>  <span class="attr">class</span> =<span class="string">"TestAction"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
<p>配置文件很好懂，下面的action部分就是请求转发，url中对\test的请求会转发到TestAction中处理</p>
<h3 id="创建Action类"><a href="#创建Action类" class="headerlink" title="创建Action类"></a>创建Action类</h3><p>创建Action处理类，前面也说过了，请求会转发到某个类中进行处理，很显然，我们需要定义这样的类<br>在src中创建相应的类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.struts2.ServletActionContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> String contentType = <span class="string">"text/html;charset=utf-8"</span>;     </div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">//指定输出内容类型和编码  </span></div><div class="line">        ServletActionContext.getResponse().setContentType(contentType);   </div><div class="line">        <span class="comment">//获取输出流，然后使用  </span></div><div class="line">        PrintWriter out = ServletActionContext.getResponse().getWriter();   </div><div class="line">        <span class="keyword">try</span>&#123;  </div><div class="line">            <span class="comment">//输出文本信息  </span></div><div class="line">            out.print(<span class="string">"Hello World"</span>);  </div><div class="line">            out.print(<span class="string">"Time: "</span> + (<span class="keyword">new</span> Date()).getTime());   </div><div class="line">            out.flush();  </div><div class="line">            out.close();  </div><div class="line">        &#125;<span class="keyword">catch</span>(Exception ex)&#123;  </div><div class="line">            out.println(ex.toString());  </div><div class="line">        &#125;</div><div class="line">		<span class="keyword">return</span> SUCCESS;  </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>execute方法就是处理请求的方法，具体的使用可以再查相关资料，本文只介绍搭建框架</p>
<h3 id="发包运行"><a href="#发包运行" class="headerlink" title="发包运行"></a>发包运行</h3><p>此时访问test应该会跳转到该类，然后输出信息</p>
<h3 id="配置Struts时遇到的问题："><a href="#配置Struts时遇到的问题：" class="headerlink" title="配置Struts时遇到的问题："></a>配置Struts时遇到的问题：</h3><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><p>java.lang.ClassNotFoundException: org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<br>最新的Struts框架处理类的包名变了，其实碰到这类问题，自己去lib中看下类所在的位置就可以，每次版本更新可能会变一些东西</p>
<p><img src="http://img.blog.csdn.net/20160922123903227?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h4 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a>错误2</h4><p>java.util.concurrent.ExecutionException: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/helloworld]]</p>
<p>这是因为lib包多了或少了，参照我前面lib库的文件，检查一下</p>
<h4 id="错误3"><a href="#错误3" class="headerlink" title="错误3"></a>错误3</h4><p>Unable to load configuration. - bean - jar:file:/Users/zzw/Documents/j2eeworkspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/helloworld/WEB-INF/lib/struts2-gxp-plugin-2.5.2.jar!/struts-plugin.xml:8:162</p>
<p>和上个问题一样，这是因为引用包多了，其实不要觉得我把所有包都放进了就行了，如果包多了会做一些初始化的工作，而初始化的过程中就容易有问题</p>
<p>访问<a href="http://localhost:8080/helloworld/test成功" target="_blank" rel="external">http://localhost:8080/helloworld/test成功</a></p>
<h2 id="搭建Hibernate框架"><a href="#搭建Hibernate框架" class="headerlink" title="搭建Hibernate框架"></a>搭建Hibernate框架</h2><p>Struts到目前为止就算成功了，接下来我们看引入Hibernate框架</p>
<h3 id="官网下载hibernate-5-2-2"><a href="#官网下载hibernate-5-2-2" class="headerlink" title="官网下载hibernate 5.2.2"></a>官网下载hibernate 5.2.2</h3><h3 id="下载JDBC"><a href="#下载JDBC" class="headerlink" title="下载JDBC"></a>下载JDBC</h3><p><a href="http://www.mysql.com/products/connector/" target="_blank" rel="external">http://www.mysql.com/products/connector/</a> 下载jdbc</p>
<h3 id="配置Hibernate的Jar包"><a href="#配置Hibernate的Jar包" class="headerlink" title="配置Hibernate的Jar包"></a>配置Hibernate的Jar包</h3><p>拷贝lib\required下的jar包到WEB-INFO\lib目录下，Hibernate就很好，把所有需要的包都放在了required文件夹下</p>
<h3 id="创建hibernate-cfg-xml"><a href="#创建hibernate-cfg-xml" class="headerlink" title="创建hibernate.cfg.xml"></a>创建hibernate.cfg.xml</h3><p>创建hibernate的配置文件hibernate.cfg.xml，配置数据库连接等等，也是在src目录下，格式如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">	"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/User<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这是最简单的配置，连接数据库的</p>
<h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><p>我们都知道hibernate是实体-关系映射，所以要创建实体类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.test;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> userId;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String userName;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String passWord;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> gender;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> userId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.userId = userId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> userName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.userName = userName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassWord</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> passWord;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassWord</span><span class="params">(String passWord)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.passWord = passWord;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGender</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> gender;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="keyword">int</span> gender)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.gender = gender;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就是对应数据库中一个表</p>
<h3 id="配置映射关系"><a href="#配置映射关系" class="headerlink" title="配置映射关系"></a>配置映射关系</h3><p>明显，这个实体类和表的映射关系也需要配置<br>添加User.hbm.xml文件映射表结构</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC </span></div><div class="line">	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</div><div class="line">	"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.helloworld.test.User"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"userId"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"passWord"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个映射关系配置文件可以放在任何地方，因为下一步我们会在hibernate.xml配置文件中声明这个文件的位置，我目前是放在和User类一起的位置。</p>
<h3 id="添加映射关系"><a href="#添加映射关系" class="headerlink" title="添加映射关系"></a>添加映射关系</h3><p>按照上一步所说，我们需要把映射关系配置文件的路径配置到hibernate.cfg.xml中去，如下：要写清楚包名，位置，就mapping配置的那部分，如果有多个映射，依次添加</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">	"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>zzw<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/helloworld/test/User.hbm.xml"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h3><p>Hibernate不需要发包web项目，可以本地测试，写一个Test类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</div><div class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</div><div class="line"><span class="keyword">import</span> org.hibernate.query.Query;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//读取hibernate.cfg.xml文件  </span></div><div class="line">        Configuration cfg = <span class="keyword">new</span> Configuration().configure();  </div><div class="line">          </div><div class="line">        <span class="comment">//建立SessionFactory  </span></div><div class="line">        SessionFactory factory = cfg.buildSessionFactory();  </div><div class="line">          </div><div class="line">        <span class="comment">//取得session  </span></div><div class="line">        Session session = <span class="keyword">null</span>;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            session = factory.openSession();  </div><div class="line">            <span class="comment">//开启事务  </span></div><div class="line">            session.beginTransaction();  </div><div class="line">            User user = <span class="keyword">new</span> User();  </div><div class="line">            user.setUserName(<span class="string">"zzw"</span>); </div><div class="line">            user.setPassWord(<span class="string">"zzw"</span>);  </div><div class="line">              </div><div class="line">            <span class="comment">//保存User对象  </span></div><div class="line">            session.save(user);   </div><div class="line">            String hql = <span class="string">"from User"</span>;  </div><div class="line">            Query query = session.createQuery(hql);  </div><div class="line">            List&lt;User&gt; roles = query.list();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;roles.size();i++)&#123;</div><div class="line">            	System.out.print(<span class="string">"从数据库加载数据的用户名为"</span>+roles.get(i).getUserName());  </div><div class="line">            &#125;</div><div class="line">            <span class="comment">//提交事务  </span></div><div class="line">            session.getTransaction().commit();  </div><div class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">            <span class="comment">//回滚事务  </span></div><div class="line">            session.getTransaction().rollback();  </div><div class="line">        &#125;<span class="keyword">finally</span> &#123;  </div><div class="line">            <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;  </div><div class="line">                <span class="keyword">if</span> (session.isOpen()) &#123;  </div><div class="line">                    <span class="comment">//关闭session  </span></div><div class="line">                    session.close();  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行成功，这样的话Hibernate框架也算搭建完成了。</p>
<h2 id="DAO设计模型"><a href="#DAO设计模型" class="headerlink" title="DAO设计模型"></a>DAO设计模型</h2><p>提到Hibernate不得不提的是DAO设计模型，为了下一步Spring的配置更加清楚明了，这里我们也采用DAO的设计模型</p>
<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>这里讲几个概念<br>POJO（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称。这里POJO其实就是User类<br>DAO (Data Access Object)是一个数据访问接口，数据访问：顾名思义就是与数据库打交道。夹在业务逻辑与数据库资源中间。</p>
<p>简单一点说，就是把数据库相关操作提到DAO中进行，与业务有关的逻辑放在Manager中，为了分层编程。举个例子来说，比如用户注册这个功能，用户注册的页面显示由RegisterAction负责，Action类中有Manager负责具体的业务，RegisterManager中有具体的业务方法register，Manager中有与数据库打交道的DAO类，RegisterManager中应该有UserDAO，负责所有对User表的操作，比如addUser，deleteUser等。这样说应该很容易理解吧，这是一种分层编程的思想，可以降低各个模块之间的耦合度，比如如果你想把用户注册改成管理员注册，只需要把UserDAO改成managerDAO就可以操作manager表了。就这样。DAO设计模式也是很推崇面向接口的编程，下面我用代码为大家讲解。</p>
<h3 id="DAO类"><a href="#DAO类" class="headerlink" title="DAO类"></a>DAO类</h3><p>1，首先声明接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseDao</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> HibernateException</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Session <span class="title">getSession</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSession</span><span class="params">(Session session)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跟数据库打交道需要获取hibernate的session，所以一个简单的base接口就是几个获取session的方法</p>
<p>然后我们定义HibernateSessionFactory用于在各个DAO中获取Session</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.daoImpl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</div><div class="line"><span class="keyword">import</span> org.hibernate.boot.Metadata;</div><div class="line"><span class="keyword">import</span> org.hibernate.boot.MetadataSources;</div><div class="line"><span class="keyword">import</span> org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl;</div><div class="line"><span class="keyword">import</span> org.hibernate.boot.registry.StandardServiceRegistry;</div><div class="line"><span class="keyword">import</span> org.hibernate.boot.registry.StandardServiceRegistryBuilder;</div><div class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</div><div class="line"><span class="keyword">import</span> org.hibernate.service.ServiceRegistry;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateSessionFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CFG_FILE_LOCATION = <span class="string">"/Hibernate.cfg.xml"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Session&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Session&gt;();</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Configuration cfg = <span class="keyword">new</span> Configuration()</div><div class="line">			.configure(CFG_FILE_LOCATION);</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ServiceRegistry registry;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">currentSession</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException </span>&#123;</div><div class="line">		Session session = threadLocal.get();</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (session == <span class="keyword">null</span> || session.isOpen() == <span class="keyword">false</span>) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (sessionFactory == <span class="keyword">null</span>) &#123;</div><div class="line">				StandardServiceRegistry standardRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder()</div><div class="line">						.configure().build();</div><div class="line">				Metadata metadata = <span class="keyword">new</span> MetadataSources(standardRegistry)</div><div class="line">						.getMetadataBuilder()</div><div class="line">						.applyImplicitNamingStrategy(</div><div class="line">								ImplicitNamingStrategyJpaCompliantImpl.INSTANCE)</div><div class="line">						.build();</div><div class="line">				sessionFactory = metadata</div><div class="line">						.getSessionFactoryBuilder().build();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			session = sessionFactory.openSession();</div><div class="line">			threadLocal.set(session);</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> session;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSession</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException </span>&#123;</div><div class="line">		Session session = threadLocal.get();</div><div class="line">		threadLocal.set(<span class="keyword">null</span>);</div><div class="line">		<span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</div><div class="line">			session.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是跟User表打交道的UserDao</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.daoImpl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.helloworld.dao.BaseDao;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">implements</span> <span class="title">BaseDao</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> Session session;  </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserDao</span><span class="params">()</span></span>&#123;</div><div class="line">		session=HiberanateSessionFactory.currentSession();</div><div class="line">       &#125;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Session <span class="title">getSession</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> session;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSession</span><span class="params">(Session session)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.session = session;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> HibernateException </span>&#123;  </div><div class="line">        session.save(obj);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="业务逻辑类"><a href="#业务逻辑类" class="headerlink" title="业务逻辑类"></a>业务逻辑类</h3><p>然后声明业务逻辑类UserManager，这里我只是举个最简单的例子,直接调用了DAO的getUsers方法，不要觉得没用，在日常事务中，我们需要在DAO方法前后做些处理，都是要在Manager中进行处理的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.manager;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.helloworld.dao.BaseDao;</div><div class="line"><span class="keyword">import</span> com.helloworld.daoImpl.UserDao;</div><div class="line"><span class="keyword">import</span> com.helloworld.pojo.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> BaseDao dao;  </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserManager</span><span class="params">()</span></span>&#123;</div><div class="line">		dao = <span class="keyword">new</span> UserDao();</div><div class="line">		System.out.println(<span class="string">"UserManager IN"</span>);</div><div class="line">	&#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> BaseDao <span class="title">getDao</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> dao;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(BaseDao dao)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.dao = dao;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException </span>&#123;  </div><div class="line">    	<span class="keyword">return</span> dao.getUsers();</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时候就可以在测试类里用manager对象进行数据库操作了。比如</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</div><div class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</div><div class="line"><span class="keyword">import</span> org.hibernate.query.Query;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.helloworld.dao.BaseDao;</div><div class="line"><span class="keyword">import</span> com.helloworld.daoImpl.HibernateSessionFactory;</div><div class="line"><span class="keyword">import</span> com.helloworld.daoImpl.UserDao;</div><div class="line"><span class="keyword">import</span> com.helloworld.manager.UserManager;</div><div class="line"><span class="keyword">import</span> com.helloworld.pojo.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		UserManager userManager=<span class="keyword">new</span> UserManager();</div><div class="line">        userManager.getUsers()</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>DAO模型介绍到这。</p>
<h2 id="搭建Spring框架，整合Struts和Hibernate"><a href="#搭建Spring框架，整合Struts和Hibernate" class="headerlink" title="搭建Spring框架，整合Struts和Hibernate"></a>搭建Spring框架，整合Struts和Hibernate</h2><p>接下来用spring整合struts和hibernate</p>
<p>前面提到的DAO设计模式，在用到的时候new 一个DAO对象进行数据库操作，这是最简单的，但是你想想这样会浪费时间，浪费内存，因为没进行一次访问都要生成一个新的对象，其实全局都可以用一个DAO对象。Spring是干嘛的，Spring有两大特性，IoC和AoP，其中IoC中的一种方式便是依赖注入，Spring全局管理一些Bean，像Session，dao都可以是bean，然后你需要的时候就给你注入，这就是依赖注入。其他的特性可以自行百度，另外Spring其实是一套门路很深的框架，不然也不会在Struts和Hibernate都渐渐退居二线的时候，它依然坚挺在第一线。有机会我准备仔细看下Spring的实现原理，与大家分享一下。</p>
<p>总而言之，整个Spring的配置过程其实就是，配置bean，然后把bean配置到各个类中这样。</p>
<h3 id="下载4-3-2release的spring"><a href="#下载4-3-2release的spring" class="headerlink" title="下载4.3.2release的spring"></a>下载4.3.2release的spring</h3><p>Spring官网改版后找了好久都没有找到直接下载Jar包的链接,下面汇总些网上提供的方法,亲测可用.</p>
<p>直接输入地址,改相应版本即可:<a href="http://repo.springsource.org/libs-release-local/org/springframework/spring/3.2.4.RELEASE/spring-framework-3.2.4.RELEASE-dist.zip" target="_blank" rel="external">http://repo.springsource.org/libs-release-local/org/springframework/spring/3.2.4.RELEASE/spring-framework-3.2.4.RELEASE-dist.zip</a></p>
<p>在1的方法上输入前面部分,有个树形结构可供选择:<a href="http://repo.springsource.org/libs-release-local/org/springframework/spring/" target="_blank" rel="external">http://repo.springsource.org/libs-release-local/org/springframework/spring/</a></p>
<p>同样的,,有树形结构选择需要的包下载:<a href="http://repo.spring.io/milestone/org/springframework/" target="_blank" rel="external">http://repo.spring.io/milestone/org/springframework/</a></p>
<h3 id="加入Spring的Jar包"><a href="#加入Spring的Jar包" class="headerlink" title="加入Spring的Jar包"></a>加入Spring的Jar包</h3><p>将Spring内libs目录下包含所有的jar包（不需要复制结尾为sources和javadoc的jar包）到项目的lib目录下。</p>
<p>这里为了整合Struts还需要加入一个struts的包<br>记得加入struts-spring-plugin的jar包，不然struts无法使用spring管理的bean对象</p>
<h3 id="创建Spring配置文件"><a href="#创建Spring配置文件" class="headerlink" title="创建Spring配置文件"></a>创建Spring配置文件</h3><p>编写Spring的配置文件applicationContext.xml。把该文件放在WEB-INF下，跟web.xml同目录。</p>
<p>这里我们使用C3P0来管理数据池，所以把Hibernate内lib/optional/c3p0下的c3p0-0.9.1.jar复制到lib不目下。</p>
<p>applicationContext的配置很复杂，所有的bean都配置在里面，如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 定义数据源的信息 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span></span></div><div class="line">		<span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>zzw<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>80<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>20<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--定义Hibernate的SessionFactory --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- SessionFactory使用的数据源为上面的数据源 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 指定了Hibernate的映射文件和配置信息 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">local</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingResources"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>com/helloworld/pojo/User.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.jdbc.batch_size"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.helloworld.daoImpl.UserDao"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"sessionFactory"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--用户注册业务逻辑类 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userManager"</span> <span class="attr">class</span>=<span class="string">"com.helloworld.manager.UserManager"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dao"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"userDao"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 用户注册的Action --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testAction"</span> <span class="attr">class</span>=<span class="string">"com.helloworld.action.TestAction"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"manager"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"userManager"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- more bean definitions go here --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>从配置文件我们看出，hibernate的datasource和session的配置完全被spring接管了，所以hibernate的配置文件是可以删掉的。</p>
<h3 id="修改BaseDao和UserDao。"><a href="#修改BaseDao和UserDao。" class="headerlink" title="修改BaseDao和UserDao。"></a>修改BaseDao和UserDao。</h3><p>在引入Spring后，需要用Spring进行统一的事务管理，数据源和sessionFactory都交给Spring去生成，因此接口类和实现类BaseDao和UserDao都需要做相应的修改。Spring提供了HibernateDaoSupport类来完成对数据的操作，因此UserDao在实现BaseDao的同时还需要继承HibernateDaoSupport类。并将先前session的操作修改成HibernateTemplate（可通过getHibernateTemplate（）方法来获得）的操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.helloworld.pojo.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseDao</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> HibernateException</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.daoImpl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.hibernate5.support.HibernateDaoSupport;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.helloworld.dao.BaseDao;</div><div class="line"><span class="keyword">import</span> com.helloworld.pojo.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">BaseDao</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserDao</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"UserDao IN"</span>);</div><div class="line">	&#125;</div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> HibernateException </span>&#123;  </div><div class="line">    	getHibernateTemplate().save(obj);  </div><div class="line">    &#125;  </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException</span>&#123;</div><div class="line">    	List&lt;User&gt; users=getHibernateTemplate().loadAll(User.class);</div><div class="line">    	<span class="keyword">return</span> users;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实HibernateDaoSupport也没干什么大事，就是前面说的session的set get方法，既然每个DAO都需要，那spring就提出来了呗，没什么神秘的。</p>
<h3 id="修改业务逻辑实现类"><a href="#修改业务逻辑实现类" class="headerlink" title="修改业务逻辑实现类"></a>修改业务逻辑实现类</h3><p>也就是Manager的类，跟DAO一样。在没有加入Spring之前，业务逻辑实现类的Session的获得，dao的实例化，以及事务的管理都是该类执行管理的。加入Spring后，这些都交给Spring去管理。该类的dao的实例化由Spring注入。</p>
<h3 id="修改用户注册的testAction类"><a href="#修改用户注册的testAction类" class="headerlink" title="修改用户注册的testAction类"></a>修改用户注册的testAction类</h3><p>同样，testAction类中的userManager的实例化也由Spring注入。可以仔细理解一下上面的applicationContext的配置文件，你需要某个对象，只要把该对象配置成bean，比如下面这样</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userManager"</span> <span class="attr">class</span>=<span class="string">"com.helloworld.manager.UserManager"</span>&gt;</span></div><div class="line">		...</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后用到这个bean的类配置成</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testAction"</span> <span class="attr">class</span>=<span class="string">"com.helloworld.action.TestAction"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"manager"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"userManager"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样这个类里名字为manager的对象就会自动被注入userManager对象。记得需要有set方法，名字需对应。</p>
<h3 id="删除多余类"><a href="#删除多余类" class="headerlink" title="删除多余类"></a>删除多余类</h3><p>删除Hibernate的配置文件Hibernate.cfg.xml和工厂类<br>HibernateSesseionFactory类。他们的工作已经交给Spring去做，已经不再有用。</p>
<h3 id="修改web-xml"><a href="#修改web-xml" class="headerlink" title="修改web.xml"></a>修改web.xml</h3><p>加载Spring。要想启动时加载Spring的配置文件，需要在web.xml中配置对应的监听器（listenser），并指定Spring的配置文件。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee </span></div><div class="line">    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></div><div class="line">           org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</div><div class="line">        <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"> 	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"> 	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"> 	</div><div class="line"> 	</div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="修改Struts的配置文件struts-xml"><a href="#修改Struts的配置文件struts-xml" class="headerlink" title="修改Struts的配置文件struts.xml"></a>修改Struts的配置文件struts.xml</h3><p>把原来指定的名为register的action的class由原来的路径变为applicationContext.xml文件中该bean的id名，不需要再用具体的包名+类名。</p>
<p>包名加类名的方式会在每次访问的时候都生成一个action对应的对象，交给spring管理后，只会在最开始的时候生成一次。如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span>  <span class="attr">name</span> =<span class="string">"test"</span>  <span class="attr">class</span> =<span class="string">"testAction"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>整个项目配置之后结构如图</p>
<p><img src="http://img.blog.csdn.net/20160922132809919?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>在spring的配置中会遇到各种各样的问题，其他无非就是bean配置上写错了路径，类目，对象名，变量名，等等，所以仔细一点，认真检查一下，肯定能找到原因。</p>
<p>到此为止，SSH框架已经搭建好了，但是据我所知，这套框架目前的使用率已经在降低了，有以下几个原因：</p>
<ol>
<li>struts除了可以做请求转发，还有页面标签，所以你如果只用请求转发的话，这个框架有点多余</li>
<li>现在spring推出了springMVC，是专门做请求转发用的，因为是spring自家推出的，所以和spring的协调性更好，而且在我使用中也感觉springMVC用起来更方便，轻量级</li>
<li>HIbernate框架管理数据库很强大，但是同样的问题，重量级。目前因为移动应用的兴起，请求并发量暴增的问题，Mybatis框架对于数据库管理更轻量级，更灵活。这两个框架说不上孰优孰劣，大家可以看下资料。</li>
</ol>
<p>所以在下一篇文章中，准备先用SpringMVC代替struts。敬请期待</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在在学习后端框架，最后的目标是希望搭建一个基于spring mvc + mybatis + spring的框架，因为之前接触过SSH，所以想从SSH开始，慢慢演化，也巩固一下自己的知识。&lt;br&gt;之前每次搭建SSH框架都要在网上查各种资料，而且我也发现各种资料基于的SSH版
    
    </summary>
    
      <category term="服务端开发" scheme="http://zwgeek.com/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java Web" scheme="http://zwgeek.com/tags/Java-Web/"/>
    
      <category term="服务端" scheme="http://zwgeek.com/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
      <category term="SSH" scheme="http://zwgeek.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>实现类知乎android客户端关注和取消关注的按钮点击效果</title>
    <link href="http://zwgeek.com/2016/08/23/%E5%AE%9E%E7%8E%B0%E7%B1%BB%E7%9F%A5%E4%B9%8Eandroid%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%85%B3%E6%B3%A8%E5%92%8C%E5%8F%96%E6%B6%88%E5%85%B3%E6%B3%A8%E7%9A%84%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9Cv2/"/>
    <id>http://zwgeek.com/2016/08/23/实现类知乎android客户端关注和取消关注的按钮点击效果v2/</id>
    <published>2016-08-23T09:41:31.000Z</published>
    <updated>2016-09-28T10:44:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端时间在看Android各个客户端上比较出色的动画效果，发现两个动画做的很好的客户端，一个是豌豆荚，一个是知乎。接下来我可能会对这两个客户端的各种效果进行模仿实现。首先让我们看知乎的关注按钮点击效果，关注按钮点击后会有一层遮挡，从你点击的位置慢慢扩散开来，然后变成被点击状态，感觉非常赞。这篇文章从以下几个方面讨论这个效果。</p>
<ul>
<li>Android中实现类似效果的几种方式<ul>
<li>用Ripple实现类似效果</li>
<li>用Paint画出类似效果</li>
</ul>
</li>
<li>反编译知乎客户端代码</li>
<li>实现最终效果</li>
</ul>
<p>先说明一下，项目代码已上传至github，不想看长篇大论的也可以先去下代码，对照代码，哪里不懂点哪里。</p>
<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul>
<li><a href="#Contents">Contents</a></li>
<li><a href="#Android中实现类似效果的几种方式">Android中实现类似效果的几种方式</a><ul>
<li><a href="#用Ripple实现类似效果">用Ripple实现类似效果</a></li>
<li><a href="#用Paint画出类似效果">用Paint画出类似效果</a></li>
</ul>
</li>
<li><a href="#反编译知乎代码">反编译知乎代码</a></li>
<li><a href="#知乎实现原理">知乎实现原理</a></li>
<li><a href="#实现最终效果">实现最终效果</a></li>
</ul>
<p>代码在这</p>
<p><a href="https://github.com/zgzczzw/ZHFollowButton" target="_blank" rel="external">https://github.com/zgzczzw/ZHFollowButton</a></p>
<p>首先，让我们我先详细观察了一些知乎的效果，其中有一个很神奇的地方，如图：</p>
<p><img src="http://img.blog.csdn.net/20160920201423285?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920201821119?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920201844952?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920201912015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>注意看第二张图，这个圆形在扩散的时候，圆形底下的字还在，而且新的字也在圆形上，就这个效果实现起来最难。</p>
<h2 id="Android中实现类似效果的几种方式"><a href="#Android中实现类似效果的几种方式" class="headerlink" title="Android中实现类似效果的几种方式"></a>Android中实现类似效果的几种方式</h2><h3 id="用Ripple实现类似效果"><a href="#用Ripple实现类似效果" class="headerlink" title="用Ripple实现类似效果"></a>用Ripple实现类似效果</h3><p>ripple即波纹效果，是Android API 21以后引入的一种material design的元素，是触摸反馈的一种，也就是说点击的时候会出现水波扩散的样式，demo（见最后）中第一个按钮就是用了ripple效果。</p>
<p>实现方式很简单，实现一个这样的drawable</p>
<p><img src="http://img.blog.csdn.net/20160920201948796?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>第一个color是波纹颜色，item里面指定background正常的颜色，可以是一个shape，也可以是一个drawable，还可以是一个selector。</p>
<p>设置为按钮的background即可</p>
<p><img src="http://img.blog.csdn.net/20160920202005481?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>如果整个程序的theme用了meterial，那基本所有的带点击效果的控件，比如button都自带这个波纹效果。不过需要注意的是这一套API是21以后才提供的，所以需要做兼容处理。</p>
<p>效果如下：</p>
<p><img src="http://img.blog.csdn.net/20160920202022234?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202034700?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>从图中可以看出即使我设置了波纹为红色（#FF0000），点击后的效果也是淡红色，我猜测因为是水波纹效果，为了不影响按钮本身展示的内容，android系统自动做了透明度的处理，另外从图中也可以明显的看出，水波纹和显示的内容是上下两层的，互不影响，水波纹是在background层面上。这个效果做普通的点击反馈还不错，但绝对实现不出知乎这种用波纹刷新出内容的效果。所以很容易能看出知乎的点击效果不是用ripple做出来的。</p>
<h3 id="用Paint画出类似效果"><a href="#用Paint画出类似效果" class="headerlink" title="用Paint画出类似效果"></a>用Paint画出类似效果</h3><p>可能很多人看到知乎关注按钮的效果后，想到的第一种实现方式就是这个，用 paint在点击的地方画圆形，然后让画的圆形半径慢慢变大，实现出扩散出去的样式，我实现了一下，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">    <span class="keyword">if</span> (mShouldDoAnimation) &#123;</div><div class="line">        mMaxRadius = getMeasuredWidth() + <span class="number">50</span>;</div><div class="line">        <span class="keyword">if</span> (mRevealRadius &gt; mMinBetweenWidthAndHeight / <span class="number">2</span>)</div><div class="line">            mRevealRadius += mRevealRadiusGap * <span class="number">4</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            mRevealRadius += mRevealRadiusGap;<span class="comment">//半径变大</span></div><div class="line">        Paint mPaint = <span class="keyword">new</span> Paint();</div><div class="line">        <span class="keyword">if</span> (!mIsPressed) &#123;</div><div class="line">            mPaint.setColor(Color.WHITE);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mPaint.setColor(Color.RED);</div><div class="line">        &#125;<span class="comment">//设置画笔颜色</span></div><div class="line">        mPaint.setStyle(Paint.Style.FILL);</div><div class="line">        canvas.drawCircle(mCenterX, mCenterY, mRevealRadius, mPaint);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mRevealRadius &lt;= mMaxRadius) &#123;</div><div class="line">            <span class="comment">//一定时间后再刷新</span></div><div class="line">            postInvalidateDelayed(INVALIDATE_DURATION);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (mIsPressed) &#123;</div><div class="line">                setTextColor(Color.WHITE);</div><div class="line">                <span class="keyword">this</span>.setBackgroundColor(Color.RED);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                setTextColor(Color.BLACK);</div><div class="line">                <span class="keyword">this</span>.setBackgroundColor(Color.WHITE);</div><div class="line">            &#125;</div><div class="line">            mShouldDoAnimation = <span class="keyword">false</span>;</div><div class="line">            invalidate();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如图：</p>
<p><img src="http://img.blog.csdn.net/20160920202051969?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202110748?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202122766?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202144061?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202157467?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>本来觉得差不多就是这样，但是跟知乎的效果比较一下，还是能发现差别的。用paint画圆能实现的是在点击的地方画一个圆，然后半径慢慢变大慢慢扩散。但是问题在于，画的这个圆会盖住显示的内容，而且画的圆上也不能显示内容。我试过用drawText，也实现不了字和圆一起的效果，解决方法只有，</p>
<ul>
<li>画的过程中改背景色和上面文字。</li>
<li>然后，画完圆之后把圆擦掉，把下面的背景色和文字显示出来。</li>
</ul>
<p>这样就会出现一次文字闪烁的问题，首先文字会消失掉，然后画完圆之后才显示出来。因为圆在扩散的时候是看不到文字的，只有等圆消失了，文字才能显示出来。而知乎的效果是文字和圆一起刷出来，而且底下的文字还在，中间也没有文字闪烁的问题，整个过程行云流水，看起来很顺畅，好像用圆形揭开了幕布一样。</p>
<p>综上所述，知乎不是用这两种方式实现的，其实如果不是我自己实现了一下，真的以为第二种方法就是知乎采用的，但是目前看来，很遗憾，知乎采用了一种更好的方式来实现这个效果。</p>
<p>那怎么办呢，我也没什么思路，怎么才能在画圆的时候把字也画在圆上，然后圆下面的背景也还有呢。没什么思路，看看知乎的代码吧，反编译。</p>
<h2 id="反编译知乎代码"><a href="#反编译知乎代码" class="headerlink" title="反编译知乎代码"></a>反编译知乎代码</h2><p>反编译的过程我简单说一下：</p>
<p>到知乎官网下载最新的知乎apk<br>用apktool反编译apk，得到资源文件</p>
<p><img src="http://img.blog.csdn.net/20160920202223063?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>在资源文件中搜索follow，这里一开始我搜的是ripple，因为我觉得这个效果总归应该和ripple有关，没结果，于是搜了follow，没想到还真搜出来了。</p>
<p><img src="http://img.blog.csdn.net/20160920202246843?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><strong>RevealFollowButton</strong>这明显就是我们要的波纹展开的控件，这就好说了，下一步就是去代码里找到这个控件了。这里要记一下，这个控件的位置<strong>com.zhihu.android.app.ui.widget.RevealFollowButton</strong>。</p>
<p>反编译代码<br>将apk改名成rar，打开，可以找到里面的class文件</p>
<p><img src="http://img.blog.csdn.net/20160920202302501?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>知乎用了multidex，所以会有两个class文件，都拖出来放在dex2jar里反编译一下，就能生成两个jar包了，把jar包放在GUI里看一下，就能看到代码了，虽然代码被混淆过，但是基本逻辑还是能看出来的。</p>
<h2 id="知乎实现原理"><a href="#知乎实现原理" class="headerlink" title="知乎实现原理"></a>知乎实现原理</h2><p><img src="http://img.blog.csdn.net/20160920202319360?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>然后根据前面xml里的路径找到RevelFollowButton的位置，打开代码看就可以了。</p>
<p>这是类的继承关系，RevealFollowButton继承自RevealFrameLayout，然后继承自ZHFrameLayout，这个ZHFrameLayout的父类就是FrameLayout了，从名字我们能看出，RevelFollowButton和RevealFrameLayout就是这个效果实现的两个类了。</p>
<p><img src="http://img.blog.csdn.net/20160920202333360?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202347376?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>看到这个效果的实现是基于Framelayout，我就知道我们之前讨论的方法其实都走错了方向，如果告诉你用framelayout来实现这个效果，你会怎么做？</p>
<p>我的想法是加入两个TextView到这个layout里，然后一个Visible一个gone，如此切换，后来看过代码后，也证明我的这个想法是对的。</p>
<p><img src="http://img.blog.csdn.net/20160920202400813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>看，这里有两个TextView。如此的话，其实切换TextView是很容易实现的，问题是怎么实现波纹切换的效果，那第一件事就是看onDraw函数了，对于GroupView来说是drawChild方法。</p>
<p><img src="http://img.blog.csdn.net/20160920202919460?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>RevealFollowButton的drawChild方法没什么内容，基本是调用了父类，那么我们来看RevealFrameLayout的drawChild方法。</p>
<p>这里有两部分逻辑，如果满足一个条件，就做第一部分，一开始我也不知道这个条件是什么，混淆后的代码能看懂大逻辑，像这种小逻辑只能走一步看一步了。所以假设这个条件永远false吧，看第二部分，看到这里瞬间明白了，原来是采用切割画布的方式，把画布切成一个圆的，就能做到显示的内容也在圆上，而不是内容被覆盖在圆下面了。然后同理，把这个圆形区域不断扩大，然后不断刷新，就是实现波形刷出内容的效果了。代码如下吧</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">drawChild</span><span class="params">(Canvas canvas, View paramView, <span class="keyword">long</span> paramLong)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i = canvas.save();</div><div class="line">    mPath.reset();</div><div class="line">    <span class="comment">//mCenterX mCenterY是点击的位置，在onTouchEvent里设置</span></div><div class="line">    <span class="comment">//mRevealRadius是圆的半径，会渐渐变大</span></div><div class="line">    mPath.addCircle(mCenterX, mCenterY, mRevealRadius, Path.Direction.CW);</div><div class="line">    canvas.clipPath(<span class="keyword">this</span>.mPath);</div><div class="line">    <span class="keyword">boolean</span> bool2 = <span class="keyword">super</span>.drawChild(canvas, paramView, paramLong);</div><div class="line">    canvas.restoreToCount(i);</div><div class="line">    <span class="keyword">return</span> bool2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>按照上面说的，肯定还有一个类似于定时器的东西，能不断改变圆形的半径，然后刷新，其实这个在代码里找找很容易就找到了。RevealFrameLayout里除了这个drawChild，没有别的代码了。所以我们来看RevealFollowButton。</p>
<p>RevealFollowButton里面跟定时器有关的就是这句了</p>
<p><img src="http://img.blog.csdn.net/20160920202426142?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>一个Animator对象，其实这句代码我是没看懂的，但逻辑很简单，设置一个Animator，定时500ms，在这个过程中修改圆形半径，然后刷新。</p>
<p><code>Math.hypot(getWidth(), getHeight()))</code></p>
<p>其中这个方法是根据勾股定理获取三角形的斜边长度，想想我们所要绘制的圆形半径最长是多少，没错，就是TextView的对角线长度。所以，整个逻辑就很简单了。</p>
<p>我搞了下代码，就这样吧</p>
<p><img src="http://img.blog.csdn.net/20160920202443596?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>整个方法的代码如下吧，还包括控制FollowTv和unFollowTv哪个显示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setFollowed</span><span class="params">(<span class="keyword">boolean</span> isFollowed, <span class="keyword">boolean</span> needAnimate)</span> </span>&#123;</div><div class="line">    mIsFollowed = isFollowed;</div><div class="line">    <span class="keyword">if</span> (isFollowed) &#123;</div><div class="line">        mUnFollowTv.setVisibility(View.VISIBLE);</div><div class="line">        mFollowTv.setVisibility(View.VISIBLE);</div><div class="line">        mFollowTv.bringToFront();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mUnFollowTv.setVisibility(View.VISIBLE);</div><div class="line">        mFollowTv.setVisibility(View.VISIBLE);</div><div class="line">        mUnFollowTv.bringToFront();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (needAnimate) &#123;</div><div class="line">        ValueAnimator animator = ObjectAnimator.ofFloat(mFollowTv, <span class="string">"empty"</span>, <span class="number">0.0F</span>, (<span class="keyword">float</span>) Math.hypot(getMeasuredWidth(), getMeasuredHeight()));</div><div class="line">        animator.setDuration(<span class="number">500L</span>);</div><div class="line">        animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">                mRevealRadius = (Float) animation.getAnimatedValue();</div><div class="line">                invalidate();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        animator.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据当前状态把Follow的Textview或UnFollow的TextView显示出来，然后设置一个定时器不断扩大所要绘制圆的半径，根据这个半径裁剪画布成一个渐渐变大的圆形，然后内容就渐渐显示出来了。</p>
<h2 id="实现最终效果"><a href="#实现最终效果" class="headerlink" title="实现最终效果"></a>实现最终效果</h2><p>这个效果实现出来之后，试着运行一下，还不错，但是总觉得有地方不对，于是细细观察，终于发现了，知乎的那个效果在刷新的时候，底下的背景不是白色的，还是之前的状态，比如要变成关注的时候，背景中的未关注还是在的，而我们实现的这个，刷新的时候背景是白色的。</p>
<p>这是知乎的</p>
<p><img src="http://img.blog.csdn.net/20160920202500751?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>这是我的</p>
<p><img src="http://img.blog.csdn.net/20160920202513237?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>所以还是没有知乎那么行云流水，所以我们是少了什么吗。这时候想起来了，之前在RevealFrameLayout的drawChild里有一个判断条件，当时我们不知道它的逻辑是干什么的，现在看来。那部分逻辑就是处理这个的，画子控件的时候，要画两个，FollowTextView和UnFollowTextView，要随圆形刷出的控件我们采用裁剪画布的方式慢慢画出。那作为背景的另一个控件就不需要慢慢画出，只要完全画出来就行了。所以，猜想这里这个判断条件就是判断当前控件是不是要随圆形刷出的控件，如果不是，就直接画出来就行了。所以修改代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">drawChild</span><span class="params">(Canvas canvas, View paramView, <span class="keyword">long</span> paramLong)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (drawBackground(paramView)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.drawChild(canvas, paramView, paramLong);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> i = canvas.save();</div><div class="line">    mPath.reset();</div><div class="line">    mPath.addCircle(mCenterX, mCenterY, mRevealRadius, Path.Direction.CW);</div><div class="line">    canvas.clipPath(<span class="keyword">this</span>.mPath);</div><div class="line">    <span class="keyword">boolean</span> bool2 = <span class="keyword">super</span>.drawChild(canvas, paramView, paramLong);</div><div class="line">    canvas.restoreToCount(i);</div><div class="line">    <span class="keyword">return</span> bool2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>判断的方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">drawBackground</span><span class="params">(View paramView)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mIsFollowed &amp;&amp; paramView == mUnFollowTv) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!mIsFollowed &amp;&amp; paramView == mFollowTv) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，整个效果就和知乎完全一样了，刷新过程行云流水，非常赞。效果如下</p>
<p><img src="http://img.blog.csdn.net/20160920202528190?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202540940?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202552455?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202620051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202635129?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202650911?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>实现代码已上传至github：</p>
<p><a href="https://github.com/zgzczzw/ZHFollowButton" target="_blank" rel="external">https://github.com/zgzczzw/ZHFollowButton</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端时间在看Android各个客户端上比较出色的动画效果，发现两个动画做的很好的客户端，一个是豌豆荚，一个是知乎。接下来我可能会对这两个客户端的各种效果进行模仿实现。首先让我们看知乎的关注按钮点击效果，关注按钮点击后会有一层遮挡，从你点击的位置慢慢扩散开来，然后变成被点击状
    
    </summary>
    
      <category term="Android" scheme="http://zwgeek.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zwgeek.com/tags/Android/"/>
    
      <category term="View" scheme="http://zwgeek.com/tags/View/"/>
    
      <category term="知乎" scheme="http://zwgeek.com/tags/%E7%9F%A5%E4%B9%8E/"/>
    
      <category term="按钮点击" scheme="http://zwgeek.com/tags/%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB/"/>
    
  </entry>
  
</feed>
