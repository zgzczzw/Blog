<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>逍遥居</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zwgeek.com/"/>
  <updated>2016-09-26T09:51:26.000Z</updated>
  <id>http://zwgeek.com/</id>
  
  <author>
    <name>轩辕</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>密码字典生成工具</title>
    <link href="http://zwgeek.com/2016/09/26/%E5%AF%86%E7%A0%81%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
    <id>http://zwgeek.com/2016/09/26/密码字典生成工具/</id>
    <published>2016-09-26T09:48:44.000Z</published>
    <updated>2016-09-26T09:51:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近无事，做了一个密码字典生成工具</p>
<p>其实这种工具网上有很多，但是很多要收费，而且没有源代码，想修改一下也很麻烦，所以我实现了一个基于Python的跨平台的，如果需要一些生成策略或者什么的改动，只要稍微改动一下就行</p>
<p>详细信息可以参考readme</p>
<p>代码托管在<a href="https://github.com/zgzczzw/dictoryGenerator" target="_blank" rel="external">https://github.com/zgzczzw/dictoryGenerator</a></p>
<p>有兴趣的同学可以联系我，共同改进</p>
<p>接下来还想做目录扫描工具，xss扫描和sql注入扫描</p>
<p>空的时候再写一下详细的用户说明</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近无事，做了一个密码字典生成工具&lt;/p&gt;
&lt;p&gt;其实这种工具网上有很多，但是很多要收费，而且没有源代码，想修改一下也很麻烦，所以我实现了一个基于Python的跨平台的，如果需要一些生成策略或者什么的改动，只要稍微改动一下就行&lt;/p&gt;
&lt;p&gt;详细信息可以参考readme&lt;/
    
    </summary>
    
      <category term="安全" scheme="http://zwgeek.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="python" scheme="http://zwgeek.com/tags/python/"/>
    
      <category term="安全" scheme="http://zwgeek.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="密码生成" scheme="http://zwgeek.com/tags/%E5%AF%86%E7%A0%81%E7%94%9F%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>记一次android程序反编译并二次打包的过程</title>
    <link href="http://zwgeek.com/2016/09/25/%E8%AE%B0%E4%B8%80%E6%AC%A1android%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E5%B9%B6%E4%BA%8C%E6%AC%A1%E6%89%93%E5%8C%85%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://zwgeek.com/2016/09/25/记一次android程序反编译并二次打包的过程/</id>
    <published>2016-09-25T15:40:24.000Z</published>
    <updated>2016-09-26T04:40:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在安全界有一句话叫不懂攻，焉知防。</p>
<p>前几天看到有一个问题在问Android端目前防止二次打包的方法有哪些？我想从攻击的角度来说这个问题。在分析过程中讲解每一步都有哪些防范手段。下面以一个市面上大公司的app为例，讲一下我是怎么绕过它的防范机制，修改代码（弹出一个提示框），并进行二次打包，重新签名，运行的。在写这篇文的过程中，我也遇到了一些问题，我在文章的最后进行了整理提问，希望这方面经验丰富的开发者可以一起交流。</p>
<p>另外，绕过程序的防二次打包机制毕竟不是一件好事，搞不好做这个程序的程序员要背锅，所以文章中代码都是以图片形式给出，关键识别位置都打了马赛克，但是我想一些有心人还是可以看出这是什么程序，你看出来就看出来吧，就不要说出来了，好吗。</p>
<p>好，以下是正文</p>
<p>工欲善其事，必先利其器。首先准备好工具：</p>
<p>反编译工具</p>
<ul>
<li><p>apktool 反编译利器</p>
</li>
<li><p>dex2jar 将dex文件反编译成jar文件（Java代码）工具，用于解读代码</p>
</li>
<li><p>gui 打开jar文件工具</p>
</li>
</ul>
<p>签名工具</p>
<ul>
<li><p>apksign给java程序签名的工具</p>
</li>
<li><p>testkey.pk8 teskkey.x509.pem用于签名的文件</p>
</li>
</ul>
<p>首先下载好apk</p>
<p><img src="http://img.blog.csdn.net/20160921161047823?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h3 id="用ApkTool反编译android程序"><a href="#用ApkTool反编译android程序" class="headerlink" title="用ApkTool反编译android程序"></a>用ApkTool反编译android程序</h3><p>用apktool反编译，命令如下</p>
<p><img src="http://img.blog.csdn.net/20160921161101489?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160921161115411?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>成功后会在同级目录生成一个test文件夹</p>
<p><img src="http://img.blog.csdn.net/20160921161129224?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>这就是反编译之后的Android程序了，可以看出，这个目录结构跟我们编写android代码时的目录结构非常相似，除了java代码是以smali的格式呈现之外，其他都基本是原来的代码。其实有很多人抄界面，到这一步就可以抄出完整的界面了。如manifest文件，里面的Activity定义都可以看的很清楚了。然后layout文件，各种res都可以看见了。</p>
<p><img src="http://img.blog.csdn.net/20160921161150230?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>其实写到这，我就有个问题了，这一步怎么防？我不知道，愿请教一二。</p>
<p>如果我们要参考（chao）一个程序的界面，到这一步已经够了，以为所有的res和layout文件已经能看到了。</p>
<p>改代码重新编译也是要在这个文件夹中改smali文件的，所以smali的语法还是要熟悉一点。但是看代码逻辑我们不用去看晦涩难懂的smali语言，这就是下一步要做的工作。反编译出java代码。</p>
<h3 id="用dex2jar反编译出java源代码"><a href="#用dex2jar反编译出java源代码" class="headerlink" title="用dex2jar反编译出java源代码"></a>用dex2jar反编译出java源代码</h3><p>第一步做的工作先放在这，我们需要重新操作apk文件，其实apk文件就是一种压缩包，所以我们把后缀名改成rar，用解压缩工具打开。</p>
<p><img src="http://img.blog.csdn.net/20160921161216340?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>看到这里，有人会问，为什么不直接解压缩，跟我们刚才用apktool反编译出来的不一样吗，你可以试一下。</p>
<p>这里其他文件在apktool那一步已经反编译出来了，我们需要的仅仅是class文件，这是java代码编译后生成的文件，用dex2jar这个工具就可以反编译出原代码（java格式）了。把这个class文件解压出来，放在dex2jar的同级目录下。</p>
<p><img src="http://img.blog.csdn.net/20160921161229402?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>命令如上，成功之后就会在同级目录下生成jar文件了。</p>
<h3 id="用gui查看代码"><a href="#用gui查看代码" class="headerlink" title="用gui查看代码"></a>用gui查看代码</h3><p>还记得一开始我们说过的工具gui，通过gui打开jar文件，就能看到java代码了</p>
<p><img src="http://img.blog.csdn.net/20160921161255262?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>这里所有的引入的包代码都会有，那么怎么寻找我们要的主程序代码呢，这就要依赖在第一步我们反编译出的manifest文件，熟悉android的朋友知道，在manifest文件中有两个信息比较重要。</p>
<p>一是包名，也就是主程序的路径，在manifest的最开始一行。</p>
<p><img src="http://img.blog.csdn.net/20160921161314773?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>第二个信息是入口activity，这个很简单，只要找到有launcher标识的activity就是入口activity。</p>
<p><img src="http://img.blog.csdn.net/20160921161330367?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>现在你就可以去gui里面找到这个入口类了</p>
<p><img src="http://img.blog.csdn.net/20160921161344809?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>代码有混淆，但是混淆只是替换了一些变量名或者类名而已，增加了代码阅读的困难性，并不会修改程序逻辑本身，所以只要静下心来慢慢看，还是看到懂得。</p>
<p>至此，反编译的过程就结束了，你想看到一个程序的逻辑或者一个程序的界面逻辑都可以看的到的。</p>
<h3 id="重新打包，签名，运行"><a href="#重新打包，签名，运行" class="headerlink" title="重新打包，签名，运行"></a>重新打包，签名，运行</h3><p>下面，开始进行最重要的工作，修改代码，二次打包。其实这里你可以什么代码先都别改，只重新打包一次，看看程序是否能够正常运行，如果不能，看看程序是哪一步阻止了运行，这也方便你后期定位签名验证的位置。目前我见过的签名验证有以下几种：</p>
<ul>
<li>直接抛出异常，禁止运行</li>
<li>弹出提示框提示用户，提示框消失后，退出程序</li>
<li>跟服务器交互传递签名信息，如果不正确则服务器不返回数据</li>
</ul>
<p>重新打包是这样的，还要用到apktool，记得在第一步反编译出的那个文件夹吗，就是用这些文件再重新打包。打包命令如下：</p>
<p><img src="http://img.blog.csdn.net/20160921161400247?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>成功后，在同级目录下会看到test1.apk文件，这里只是打包成功了，程序还没有签名，没有签名的程序是无法安装到手机上的。签名用的的是apksign这个工具，这是java提供给开发者用于程序签名的工具，android的各类IDE也是用这个工具在签名。使用方法如下，将signapk.jar，testkey.pk8，testkey.x509.pem放在一个目录下，写一个signapk.bat文件，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar signapk.jar testkey.x509.pem testkey.pk8 %<span class="number">1</span> %<span class="number">2</span></div></pre></td></tr></table></figure>
<p>然后运行命令</p>
<p><img src="http://img.blog.csdn.net/20160921161418934?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>成功后会在同级目录下生成一个签过名的apk文件，这个文件我们需要的最终文件，只要你改过代码并且签完名后这个apk可以正常安装运行，那么本次的任务就算完成了。现在安装一下，看看会发生什么。</p>
<p>程序启动，然后弹出提示框</p>
<p><img src="http://img.blog.csdn.net/20160921161435809?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>程序弹出提示，点击确认后退出程序，看来这个app的签名验证是用了我说的上面第二种方法，下面来进行一些尝试来绕过这个签名验证。</p>
<h3 id="绕过程序防二次打包机制"><a href="#绕过程序防二次打包机制" class="headerlink" title="绕过程序防二次打包机制"></a>绕过程序防二次打包机制</h3><p>首先，我建议大家先全局搜一下signatures这个字符串，因为程序要获取app的签名就要通过packageInfo.signatures这种方式，如果在这里我们不让程序获取到真正的签名，而是直接返回给它那个“正确”的签名，岂不是瞒天过海，一步搞定。当然了，你必须要有原来那个程序的“正确”签名，不过这个简单，android系统并不阻止你去获取其他程序的签名，所以我们可以写个小的test程序，然后安装原来的apk，去获取一次正确的签名，记录下来。</p>
<p>获取其他程序签名代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getSignture</span><span class="params">(Application paramApplication)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        String packageName = <span class="string">"packageName"</span>;</div><div class="line">        List&lt;PackageInfo&gt; packages = paramApplication.getPackageManager().getInstalledPackages(PackageManager.GET_SIGNATURES);</div><div class="line">        <span class="keyword">for</span> (PackageInfo packageInfo : packages) &#123;</div><div class="line">            Signature[] signs = packageInfo.signatures;</div><div class="line">            Signature sign = signs[<span class="number">0</span>];</div><div class="line">            String signString = sign.toCharsString();</div><div class="line">            System.out.println(signString);</div><div class="line">            <span class="keyword">return</span> signString;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先装上原来从正常渠道下载的程序，然后改一下包名，运行这个程序，就能得到正确程序的正确签名了，记录一下签名，然后去我们反编译的代码里面找signatures相关的代码，看在哪里获取了签名并验证。</p>
<p><img src="http://img.blog.csdn.net/20160921161456325?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>程序中一共有三个地方，MainActivity里是程序用到的，另外两个是第三方库的签名校验，像微信支付这种第三方库都会校验签名，这个可以暂时不管，所以要管的其实就只有MainActivity里这个了，看这个方法：</p>
<p><img src="http://img.blog.csdn.net/20160921161518935?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>是不是跟我写的那个方法完全一样，这个方法其实是获取程序的本来的签名的，这就好说了，我们直接返回刚才记录的“正确”签名就可以瞒过程序了。</p>
<p>好，第一次尝试，去apktool反编译出的文件中的smali文件夹下找到这个类MainActivity，如下</p>
<p><img src="http://img.blog.csdn.net/20160921161536778?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>这是smali的语法，挺复杂的，感兴趣的朋友可以自己再翻阅一下资料。这里我们把这个方法全部注掉，直接返回“正确”的签名。如下</p>
<p><img src="http://img.blog.csdn.net/20160921161552497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>按照前面说的签名的方法，重新打包，签名，安装。</p>
<p>我们会发现，程序第一次进入是不行的，还是会提示，签名验证失败，第二次之后就可以正常进入了，这不是我们要的完美效果，思考一下，为什么会有这个情况，我想到以下几种原因：</p>
<ul>
<li>第一次的时候signinfo还没有获取，为空，所以认为是非法的</li>
<li>除了这里，程序在另外的地方做了二次验证，而且这个二次验证并不一定每次都能执行成功，这个很像是一个网络请求方法，跟服务器做验证，所以根据网络情况，并不一定每次都成功。</li>
</ul>
<p>如果是第一种情况，为什么正常的程序没有问题，我们就只是让返回值变了一下，其他并没有改变逻辑。我推测是时间差，因为原来的方法执行获取签名需要较长的时间，而直接返回正确签名很快，难道是这个时间差的影响？我决定把原来那个方法改回来，只修改返回值。如下：</p>
<p><img src="http://img.blog.csdn.net/20160921161607810?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>只修改返回值，原来的逻辑不变，时间差应该也排除了，重新打包签名运行。好吧，很明显不是，而且情况更严重了，前面这些只是我的经验之谈，你在完全不了解逻辑的情况下，可以这样先试一下，我想能绕过30%的app吧。如果是上面说的第二种情况，我们还是来看一下代码逻辑吧。</p>
<p>全局搜一下应用签名验证失败这句话，看看什么情况下会触发。</p>
<p><img src="http://img.blog.csdn.net/20160921161636309?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>一共有两处，我们先看第一处</p>
<p>其实混淆后的代码挺恶心的，你看这个逻辑好像是如果LoginActivity的c方法为null就执行，但是你去看c方法就会发现根本就没有返回值，稳稳的null。这里代码其实是这样看的，要跳出前面那个while，所以我们去loginActivity找what值是19的情况。</p>
<p><img src="http://img.blog.csdn.net/20160921161648325?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>往前看，可以发现他调用了一个方法</p>
<p><img src="http://img.blog.csdn.net/20160921161703341?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>看来验证应该是在这里了，而且是一个网络请求验证，所以这个app的防二次打包的机制已经做的比较好的。研究下这个方法，混淆代码不是很容易看，我先用抓包工具抓了一下包。</p>
<p>发现程序在启动的时候发了两个用来验证的请求，第一个请求没有参数，服务器返回如下字段</p>
<p><img src="http://img.blog.csdn.net/20160921161725810?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>第二次请求带有如下参数</p>
<p><img src="http://img.blog.csdn.net/20160921161740217?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>正常的包服务器返回的是status=1，而我重新打包后服务器返回的是status=0</p>
<p>这是一种典型的challenge-response的方法，服务器发来challenge，然后程序用自身特性的一个字符串加密后再返回response，如果正确，则通过验证，反之则阻止运行。</p>
<p>这里我想的是，我找的加密challenge的那一段算法，看他是用什么方式加密的，用的是程序的哪一段特征值，然后像前面改签名一样，用“正确”的特征值替换下。</p>
<p>但是，恕我愚钝，看不懂代码，这里我贴一下逻辑，有大神对混淆比较了解的可以跟我交流下。</p>
<p><img src="http://img.blog.csdn.net/20160921161756327?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>首先loginActivity调了这个Post请求，第一次调用参数为空，服务器会返回challenge 四个字符串</p>
<p><img src="http://img.blog.csdn.net/20160921161811139?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>程序会把这四个字符串交给一个handler处理</p>
<p><img src="http://img.blog.csdn.net/20160921161825717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>抱歉我追到这就追不下去了，因为中间这几个不管a还是b都因为混淆无法直接找到，我也没想出什么能间接找到的方法。</p>
<p>是不是到这就束手无策了呢，其实也不是，前面的分析是希望在最上游解决问题，如果我们能在最上游把问题解决了，下面不管什么逻辑都不用担心了，但是现在最上游无解了，那么我们就往下找一找，前面说过， 签名验证失败弹框是在服务器返回后根据服务器返回信息来判断的，那么我们可以把判断的逻辑改掉。</p>
<p><img src="http://img.blog.csdn.net/20160921161841515?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>将这个代码改成永true</p>
<p>我们去smali找到LoginActivity里的f类，smali编译时会把所有的内部类编成一个单独的文件，所有我们去找LoginActivity$f这个文件</p>
<p><img src="http://img.blog.csdn.net/20160921161855921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>这段代码是比较status和1，如果为0则跳到cond_2，cond_2就是会给message19的那部分代码，这里我们不让他跳转，所以删掉这一句即可。另外MainActivity里也有一个同样的校验，一起改掉就行了。</p>
<p>现在打包，签名，运行</p>
<p>程序正常启动，没有弹出任何异常提醒，试试其他功能，都正常。既然签名验证我们搞定，现在往里面加一句弹toast的代码，轻而易举，我准备加在MainActivity的onCreate的时候，找到这部分代码。</p>
<p><img src="http://img.blog.csdn.net/20160921161910031?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>注意要加在super.onCreate之后。弹框代码如下</p>
<p><img src="http://img.blog.csdn.net/20160921161924110?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>加完代码之后如下</p>
<p>打包，签名，运行</p>
<p><img src="http://img.blog.csdn.net/20160921161953186?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>效果如上，至此，这篇文章就结束了，我们绕过了这个app的防二次打包机制，并成功的修改了代码。</p>
<p>总结一下</p>
<p>1， 混淆确实是有用处的，虽然混淆后的逻辑仍然可以看懂，但是如果你想去追踪一些细节逻辑，很难，当然，我混淆代码研究的太少，经验太少也是一个方面。</p>
<p>2， App层面上的签名验证基本是无效的的，比如一开始我们说的getSignature这里。</p>
<p>3， 采用challenge-response的方式跟服务器验证，如果使用不恰当，基本也是完全无效的，比如该应用，成功与否只判断服务器返回的一个字符串，而且判断语句是在本地，这个完全是可以绕过的。</p>
<p>至于更好的方法，我查资料的时候，网上看到这样一个方法，同样是跟服务器验证，但是服务器不是返回一个字段，而是返回一段核心代码，然后程序动态执行这段核心代码。我觉得采用这种方法，难度会上升一个层级。但还是无法有效避免二次打包。</p>
<p><a href="https://link.zhihu.com/?target=http%3A//bbs.pediy.com/showthread.php%3Ft%3D180655" target="_blank" rel="external">点击打开链接</a></p>
<p>几个问题：</p>
<p>1， 跟服务器验证的时候，验证的是什么东西，前面讲了因为那段代码没跟出来，所以不知道实现逻辑。以我的经验，二次打包唯一变动的应该就是签名了，但是签名我们已经绕过去了，不知道还有什么可以拿来验证的东西。</p>
<p>2， Android资源层面的东西有没有防反编译的方法，我是说res，layout这些。</p>
<p>ok，洋洋洒洒的终于写完了，我是觉得自己写得已经很详细了，已经到了读者完全可以复制过程的程度。但难免有一些地方我觉得可以省略，但是读者不懂，可以在评论区提问，我会回答的。</p>
<p>另外，再次强调一下，绕过程序的防二次打包机制毕竟不是一件好事，搞不好做这个程序的程序员要背锅，所以文章中代码都是以图片形式给出，关键识别位置都打了马赛克，但是我想一些有心人还是可以看出这是什么程序，你看出来就看出来吧，就不要说出来了，好吗。</p>
<p>如果这样还有任何侵犯到开发方权利的地方，开发方可以向我提出，我换个程序继续搞，哈哈，开玩笑，我会和你们协商如果处理的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在安全界有一句话叫不懂攻，焉知防。&lt;/p&gt;
&lt;p&gt;前几天看到有一个问题在问Android端目前防止二次打包的方法有哪些？我想从攻击的角度来说这个问题。在分析过程中讲解每一步都有哪些防范手段。下面以一个市面上大公司的app为例，讲一下我是怎么绕过它的防范机制，修改代码（弹出一
    
    </summary>
    
      <category term="Android" scheme="http://zwgeek.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zwgeek.com/tags/Android/"/>
    
      <category term="移动安全" scheme="http://zwgeek.com/tags/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
      <category term="逆向" scheme="http://zwgeek.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>基于struts2.5.2+hibernate5.2.2+spring4.3.2搭建SSH框架</title>
    <link href="http://zwgeek.com/2016/09/23/%E5%9F%BA%E4%BA%8Estruts2-5-2-hibernate5-2-2-spring4-3-2%E6%90%AD%E5%BB%BASSH%E6%A1%86%E6%9E%B6/"/>
    <id>http://zwgeek.com/2016/09/23/基于struts2-5-2-hibernate5-2-2-spring4-3-2搭建SSH框架/</id>
    <published>2016-09-23T10:42:33.000Z</published>
    <updated>2016-09-26T09:43:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在在学习后端框架，最后的目标是希望搭建一个基于spring mvc + mybatis + spring的框架，因为之前接触过SSH，所以想从SSH开始，慢慢演化，也巩固一下自己的知识。<br>之前每次搭建SSH框架都要在网上查各种资料，而且我也发现各种资料基于的SSH版本都比较老，新版本就会遇到各种各样的问题，所以基于这次的搭建流程，写一下遇到的问题和解决方法。</p>
<h2 id="基础需求"><a href="#基础需求" class="headerlink" title="基础需求"></a>基础需求</h2><h3 id="下载-Eclipse-J2EE版"><a href="#下载-Eclipse-J2EE版" class="headerlink" title="下载 Eclipse J2EE版"></a>下载 Eclipse J2EE版</h3><p>J2EE版带server和maven的配置，用起来比较方便，其他也没什么区别，普通版装插件也是可以达到一样效果的</p>
<h3 id="下载tomcat"><a href="#下载tomcat" class="headerlink" title="下载tomcat"></a>下载tomcat</h3><p>目前Eclipse J2EE版的server只支持tomcat 8 以下版本，我试过8.5.5也不支持，所以最好下7</p>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>具体流程可以从网上找，这个简单</p>
<p>创建数据库 create database test；</p>
<p>创建表<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">create table <span class="title">user</span><span class="params">(</span></span></div><div class="line"> userId <span class="keyword">int</span> auto_increment,  </div><div class="line"> userName varchar(<span class="number">16</span>) not <span class="keyword">null</span>,  </div><div class="line"> password <span class="title">varchar</span><span class="params">(<span class="number">16</span>)</span> not <span class="keyword">null</span>,  </div><div class="line"> gender <span class="keyword">int</span> not <span class="keyword">null</span>,  </div><div class="line"> primary <span class="title">key</span><span class="params">(userId)</span>  </div><div class="line">);</div></pre></td></tr></table></figure></p>
<h2 id="配置Struts框架"><a href="#配置Struts框架" class="headerlink" title="配置Struts框架"></a>配置Struts框架</h2><h3 id="安装struts的jar包"><a href="#安装struts的jar包" class="headerlink" title="安装struts的jar包"></a>安装struts的jar包</h3><p>下载struts-2.5.2包</p>
<p>将包下面lib目录下的以下文件拷贝到项目的WEB-INF/lib下面，当然这里要先创建一个Dynamic Web Project，这个也简单，在Eclipse中点下一步下一步下一步就可以。</p>
<p>为什么是放在WEB-INF/lib下，而不放在项目的lib下，这是因为，web项目在发布后依赖包是去寻找WEB-INF目录下的各种包的。这里我后面遇到一个奇怪的问题，也加深了对这个配置的理解，具体什么问题以后再说。然后你把包放在WEB-INF/lib下的时候，eclipse会自动拷贝一份到项目的lib下，方便编程时候的依赖。</p>
<p><img src="http://img.blog.csdn.net/20160922112818884?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h3 id="创建web-xml"><a href="#创建web-xml" class="headerlink" title="创建web.xml"></a>创建web.xml</h3><p>在WEB-INF下面创建web.xml，配置struts监听，这个web.xml其实就是整个web项目的入口，所有的配置都是从这里开始，再跳转的其他地方。格式如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee </span></div><div class="line">    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></div><div class="line">           org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</div><div class="line">        <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"> 	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  		<span class="comment">&lt;!--注意：千万不能写成：*.action ，如果需要：*.action应该配置在struts.xml中--&gt;</span></div><div class="line"> 	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其实熟悉j2ee的人知道，在struts之前，j2ee最基本的跳转是用servlet来做的，struts其实也要基于servlet来做，配置一个filter，name随意。然后在filter-mapping里配置满足一定条件的url请求都交给这个filter来处理，其实也就是struts来处理。这里我们配置为/*，也就是所有的请求都转发给struts处理，这是最简单的，如果需要特殊配置可以在这里再配置。</p>
<p>另外也要注意/<em> 和 /的区别，按照我个人的理解/</em>是所有的请求，包括/test.jsp和/test.html这种带后缀名的请求。/是不带后缀名的所有请求，像/test这样的。</p>
<h3 id="创建struts-xml"><a href="#创建struts-xml" class="headerlink" title="创建struts.xml"></a>创建struts.xml</h3><p>然后所有的请求都给struts处理了，struts本身肯定还需要一个配置文件，来转发各种请求到相应的处理类，这个配置文件是struts.xml，放在src文件夹下，前面说过，web项目的配置文件都是在web-inf下面，为什么这个放在src文件夹下呢，这里就要说到一个eclipse发布映射的问题。</p>
<p>你项目里点右键，选属性，选Deployment Assembly，可以看到这是发包时候的映射关系，src文件夹会发布到WEB-INF/classes，而struts会默认到这个文件夹下面找配置文件。</p>
<p><img src="http://img.blog.csdn.net/20160922122622832?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>回到正题，说一下struts的配置文件，格式如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN" "http://struts.apache.org/dtds/struts-2.0.dtd" &gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">package</span>  <span class="attr">name</span> =<span class="string">"user_curd"</span>  <span class="attr">extends</span> =<span class="string">"struts-default"</span>  &gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">global-results</span>&gt;</span>  </div><div class="line">            <span class="comment">&lt;!--  下面定义的结果对所有的Action都有效  --&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">result</span>  <span class="attr">name</span> =<span class="string">"exception"</span>&gt;</span> /error.jsp <span class="tag">&lt;/<span class="name">result</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">global-results</span>&gt;</span>  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">global-exception-mappings</span>&gt;</span>  </div><div class="line">            <span class="comment">&lt;!--  指Action抛出Exception异常时，转入名为exception的结果。  --&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">exception-mapping</span>  <span class="attr">exception</span> =<span class="string">"java.lang.Exception"</span>  <span class="attr">result</span> =<span class="string">"exception"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">global-exception-mappings</span>&gt;</span>  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span>  <span class="attr">name</span> =<span class="string">"test"</span>  <span class="attr">class</span> =<span class="string">"TestAction"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
<p>配置文件很好懂，下面的action部分就是请求转发，url中对\test的请求会转发到TestAction中处理</p>
<h3 id="创建Action类"><a href="#创建Action类" class="headerlink" title="创建Action类"></a>创建Action类</h3><p>创建Action处理类，前面也说过了，请求会转发到某个类中进行处理，很显然，我们需要定义这样的类<br>在src中创建相应的类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.struts2.ServletActionContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> String contentType = <span class="string">"text/html;charset=utf-8"</span>;     </div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">//指定输出内容类型和编码  </span></div><div class="line">        ServletActionContext.getResponse().setContentType(contentType);   </div><div class="line">        <span class="comment">//获取输出流，然后使用  </span></div><div class="line">        PrintWriter out = ServletActionContext.getResponse().getWriter();   </div><div class="line">        <span class="keyword">try</span>&#123;  </div><div class="line">            <span class="comment">//输出文本信息  </span></div><div class="line">            out.print(<span class="string">"Hello World"</span>);  </div><div class="line">            out.print(<span class="string">"Time: "</span> + (<span class="keyword">new</span> Date()).getTime());   </div><div class="line">            out.flush();  </div><div class="line">            out.close();  </div><div class="line">        &#125;<span class="keyword">catch</span>(Exception ex)&#123;  </div><div class="line">            out.println(ex.toString());  </div><div class="line">        &#125;</div><div class="line">		<span class="keyword">return</span> SUCCESS;  </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>execute方法就是处理请求的方法，具体的使用可以再查相关资料，本文只介绍搭建框架</p>
<h3 id="发包运行"><a href="#发包运行" class="headerlink" title="发包运行"></a>发包运行</h3><p>此时访问test应该会跳转到该类，然后输出信息</p>
<h3 id="配置Struts时遇到的问题："><a href="#配置Struts时遇到的问题：" class="headerlink" title="配置Struts时遇到的问题："></a>配置Struts时遇到的问题：</h3><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><p>java.lang.ClassNotFoundException: org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<br>最新的Struts框架处理类的包名变了，其实碰到这类问题，自己去lib中看下类所在的位置就可以，每次版本更新可能会变一些东西</p>
<p><img src="http://img.blog.csdn.net/20160922123903227?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h4 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a>错误2</h4><p>java.util.concurrent.ExecutionException: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/helloworld]]</p>
<p>这是因为lib包多了或少了，参照我前面lib库的文件，检查一下</p>
<h4 id="错误3"><a href="#错误3" class="headerlink" title="错误3"></a>错误3</h4><p>Unable to load configuration. - bean - jar:file:/Users/zzw/Documents/j2eeworkspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/helloworld/WEB-INF/lib/struts2-gxp-plugin-2.5.2.jar!/struts-plugin.xml:8:162</p>
<p>和上个问题一样，这是因为引用包多了，其实不要觉得我把所有包都放进了就行了，如果包多了会做一些初始化的工作，而初始化的过程中就容易有问题</p>
<p>访问<a href="http://localhost:8080/helloworld/test成功" target="_blank" rel="external">http://localhost:8080/helloworld/test成功</a></p>
<h2 id="搭建Hibernate框架"><a href="#搭建Hibernate框架" class="headerlink" title="搭建Hibernate框架"></a>搭建Hibernate框架</h2><p>Struts到目前为止就算成功了，接下来我们看引入Hibernate框架</p>
<h3 id="官网下载hibernate-5-2-2"><a href="#官网下载hibernate-5-2-2" class="headerlink" title="官网下载hibernate 5.2.2"></a>官网下载hibernate 5.2.2</h3><h3 id="下载JDBC"><a href="#下载JDBC" class="headerlink" title="下载JDBC"></a>下载JDBC</h3><p><a href="http://www.mysql.com/products/connector/" target="_blank" rel="external">http://www.mysql.com/products/connector/</a> 下载jdbc</p>
<h3 id="配置Hibernate的Jar包"><a href="#配置Hibernate的Jar包" class="headerlink" title="配置Hibernate的Jar包"></a>配置Hibernate的Jar包</h3><p>拷贝lib\required下的jar包到WEB-INFO\lib目录下，Hibernate就很好，把所有需要的包都放在了required文件夹下</p>
<h3 id="创建hibernate-cfg-xml"><a href="#创建hibernate-cfg-xml" class="headerlink" title="创建hibernate.cfg.xml"></a>创建hibernate.cfg.xml</h3><p>创建hibernate的配置文件hibernate.cfg.xml，配置数据库连接等等，也是在src目录下，格式如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">	"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/User<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这是最简单的配置，连接数据库的</p>
<h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><p>我们都知道hibernate是实体-关系映射，所以要创建实体类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.test;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> userId;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String userName;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String passWord;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> gender;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> userId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.userId = userId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> userName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.userName = userName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassWord</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> passWord;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassWord</span><span class="params">(String passWord)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.passWord = passWord;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGender</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> gender;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="keyword">int</span> gender)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.gender = gender;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就是对应数据库中一个表</p>
<h3 id="配置映射关系"><a href="#配置映射关系" class="headerlink" title="配置映射关系"></a>配置映射关系</h3><p>明显，这个实体类和表的映射关系也需要配置<br>添加User.hbm.xml文件映射表结构</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC </span></div><div class="line">	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</div><div class="line">	"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.helloworld.test.User"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"userId"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"passWord"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个映射关系配置文件可以放在任何地方，因为下一步我们会在hibernate.xml配置文件中声明这个文件的位置，我目前是放在和User类一起的位置。</p>
<h3 id="添加映射关系"><a href="#添加映射关系" class="headerlink" title="添加映射关系"></a>添加映射关系</h3><p>按照上一步所说，我们需要把映射关系配置文件的路径配置到hibernate.cfg.xml中去，如下：要写清楚包名，位置，就mapping配置的那部分，如果有多个映射，依次添加</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">	"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>zzw<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/helloworld/test/User.hbm.xml"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h3><p>Hibernate不需要发包web项目，可以本地测试，写一个Test类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</div><div class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</div><div class="line"><span class="keyword">import</span> org.hibernate.query.Query;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//读取hibernate.cfg.xml文件  </span></div><div class="line">        Configuration cfg = <span class="keyword">new</span> Configuration().configure();  </div><div class="line">          </div><div class="line">        <span class="comment">//建立SessionFactory  </span></div><div class="line">        SessionFactory factory = cfg.buildSessionFactory();  </div><div class="line">          </div><div class="line">        <span class="comment">//取得session  </span></div><div class="line">        Session session = <span class="keyword">null</span>;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            session = factory.openSession();  </div><div class="line">            <span class="comment">//开启事务  </span></div><div class="line">            session.beginTransaction();  </div><div class="line">            User user = <span class="keyword">new</span> User();  </div><div class="line">            user.setUserName(<span class="string">"zzw"</span>); </div><div class="line">            user.setPassWord(<span class="string">"zzw"</span>);  </div><div class="line">              </div><div class="line">            <span class="comment">//保存User对象  </span></div><div class="line">            session.save(user);   </div><div class="line">            String hql = <span class="string">"from User"</span>;  </div><div class="line">            Query query = session.createQuery(hql);  </div><div class="line">            List&lt;User&gt; roles = query.list();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;roles.size();i++)&#123;</div><div class="line">            	System.out.print(<span class="string">"从数据库加载数据的用户名为"</span>+roles.get(i).getUserName());  </div><div class="line">            &#125;</div><div class="line">            <span class="comment">//提交事务  </span></div><div class="line">            session.getTransaction().commit();  </div><div class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">            <span class="comment">//回滚事务  </span></div><div class="line">            session.getTransaction().rollback();  </div><div class="line">        &#125;<span class="keyword">finally</span> &#123;  </div><div class="line">            <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;  </div><div class="line">                <span class="keyword">if</span> (session.isOpen()) &#123;  </div><div class="line">                    <span class="comment">//关闭session  </span></div><div class="line">                    session.close();  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行成功，这样的话Hibernate框架也算搭建完成了。</p>
<h2 id="DAO设计模型"><a href="#DAO设计模型" class="headerlink" title="DAO设计模型"></a>DAO设计模型</h2><p>提到Hibernate不得不提的是DAO设计模型，为了下一步Spring的配置更加清楚明了，这里我们也采用DAO的设计模型</p>
<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>这里讲几个概念<br>POJO（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称。这里POJO其实就是User类<br>DAO (Data Access Object)是一个数据访问接口，数据访问：顾名思义就是与数据库打交道。夹在业务逻辑与数据库资源中间。</p>
<p>简单一点说，就是把数据库相关操作提到DAO中进行，与业务有关的逻辑放在Manager中，为了分层编程。举个例子来说，比如用户注册这个功能，用户注册的页面显示由RegisterAction负责，Action类中有Manager负责具体的业务，RegisterManager中有具体的业务方法register，Manager中有与数据库打交道的DAO类，RegisterManager中应该有UserDAO，负责所有对User表的操作，比如addUser，deleteUser等。这样说应该很容易理解吧，这是一种分层编程的思想，可以降低各个模块之间的耦合度，比如如果你想把用户注册改成管理员注册，只需要把UserDAO改成managerDAO就可以操作manager表了。就这样。DAO设计模式也是很推崇面向接口的编程，下面我用代码为大家讲解。</p>
<h3 id="DAO类"><a href="#DAO类" class="headerlink" title="DAO类"></a>DAO类</h3><p>1，首先声明接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseDao</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> HibernateException</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Session <span class="title">getSession</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSession</span><span class="params">(Session session)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跟数据库打交道需要获取hibernate的session，所以一个简单的base接口就是几个获取session的方法</p>
<p>然后我们定义HibernateSessionFactory用于在各个DAO中获取Session</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.daoImpl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</div><div class="line"><span class="keyword">import</span> org.hibernate.boot.Metadata;</div><div class="line"><span class="keyword">import</span> org.hibernate.boot.MetadataSources;</div><div class="line"><span class="keyword">import</span> org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl;</div><div class="line"><span class="keyword">import</span> org.hibernate.boot.registry.StandardServiceRegistry;</div><div class="line"><span class="keyword">import</span> org.hibernate.boot.registry.StandardServiceRegistryBuilder;</div><div class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</div><div class="line"><span class="keyword">import</span> org.hibernate.service.ServiceRegistry;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateSessionFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CFG_FILE_LOCATION = <span class="string">"/Hibernate.cfg.xml"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Session&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Session&gt;();</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Configuration cfg = <span class="keyword">new</span> Configuration()</div><div class="line">			.configure(CFG_FILE_LOCATION);</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ServiceRegistry registry;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">currentSession</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException </span>&#123;</div><div class="line">		Session session = threadLocal.get();</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (session == <span class="keyword">null</span> || session.isOpen() == <span class="keyword">false</span>) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (sessionFactory == <span class="keyword">null</span>) &#123;</div><div class="line">				StandardServiceRegistry standardRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder()</div><div class="line">						.configure().build();</div><div class="line">				Metadata metadata = <span class="keyword">new</span> MetadataSources(standardRegistry)</div><div class="line">						.getMetadataBuilder()</div><div class="line">						.applyImplicitNamingStrategy(</div><div class="line">								ImplicitNamingStrategyJpaCompliantImpl.INSTANCE)</div><div class="line">						.build();</div><div class="line">				sessionFactory = metadata</div><div class="line">						.getSessionFactoryBuilder().build();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			session = sessionFactory.openSession();</div><div class="line">			threadLocal.set(session);</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> session;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSession</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException </span>&#123;</div><div class="line">		Session session = threadLocal.get();</div><div class="line">		threadLocal.set(<span class="keyword">null</span>);</div><div class="line">		<span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</div><div class="line">			session.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是跟User表打交道的UserDao</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.daoImpl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.helloworld.dao.BaseDao;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">implements</span> <span class="title">BaseDao</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> Session session;  </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserDao</span><span class="params">()</span></span>&#123;</div><div class="line">		session=HiberanateSessionFactory.currentSession();</div><div class="line">       &#125;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Session <span class="title">getSession</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> session;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSession</span><span class="params">(Session session)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.session = session;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> HibernateException </span>&#123;  </div><div class="line">        session.save(obj);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="业务逻辑类"><a href="#业务逻辑类" class="headerlink" title="业务逻辑类"></a>业务逻辑类</h3><p>然后声明业务逻辑类UserManager，这里我只是举个最简单的例子,直接调用了DAO的getUsers方法，不要觉得没用，在日常事务中，我们需要在DAO方法前后做些处理，都是要在Manager中进行处理的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.manager;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.helloworld.dao.BaseDao;</div><div class="line"><span class="keyword">import</span> com.helloworld.daoImpl.UserDao;</div><div class="line"><span class="keyword">import</span> com.helloworld.pojo.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> BaseDao dao;  </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserManager</span><span class="params">()</span></span>&#123;</div><div class="line">		dao = <span class="keyword">new</span> UserDao();</div><div class="line">		System.out.println(<span class="string">"UserManager IN"</span>);</div><div class="line">	&#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> BaseDao <span class="title">getDao</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> dao;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(BaseDao dao)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.dao = dao;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException </span>&#123;  </div><div class="line">    	<span class="keyword">return</span> dao.getUsers();</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时候就可以在测试类里用manager对象进行数据库操作了。比如</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</div><div class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</div><div class="line"><span class="keyword">import</span> org.hibernate.query.Query;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.helloworld.dao.BaseDao;</div><div class="line"><span class="keyword">import</span> com.helloworld.daoImpl.HibernateSessionFactory;</div><div class="line"><span class="keyword">import</span> com.helloworld.daoImpl.UserDao;</div><div class="line"><span class="keyword">import</span> com.helloworld.manager.UserManager;</div><div class="line"><span class="keyword">import</span> com.helloworld.pojo.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		UserManager userManager=<span class="keyword">new</span> UserManager();</div><div class="line">        userManager.getUsers()</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>DAO模型介绍到这。</p>
<h2 id="搭建Spring框架，整合Struts和Hibernate"><a href="#搭建Spring框架，整合Struts和Hibernate" class="headerlink" title="搭建Spring框架，整合Struts和Hibernate"></a>搭建Spring框架，整合Struts和Hibernate</h2><p>接下来用spring整合struts和hibernate</p>
<p>前面提到的DAO设计模式，在用到的时候new 一个DAO对象进行数据库操作，这是最简单的，但是你想想这样会浪费时间，浪费内存，因为没进行一次访问都要生成一个新的对象，其实全局都可以用一个DAO对象。Spring是干嘛的，Spring有两大特性，IoC和AoP，其中IoC中的一种方式便是依赖注入，Spring全局管理一些Bean，像Session，dao都可以是bean，然后你需要的时候就给你注入，这就是依赖注入。其他的特性可以自行百度，另外Spring其实是一套门路很深的框架，不然也不会在Struts和Hibernate都渐渐退居二线的时候，它依然坚挺在第一线。有机会我准备仔细看下Spring的实现原理，与大家分享一下。</p>
<p>总而言之，整个Spring的配置过程其实就是，配置bean，然后把bean配置到各个类中这样。</p>
<h3 id="下载4-3-2release的spring"><a href="#下载4-3-2release的spring" class="headerlink" title="下载4.3.2release的spring"></a>下载4.3.2release的spring</h3><p>Spring官网改版后找了好久都没有找到直接下载Jar包的链接,下面汇总些网上提供的方法,亲测可用.</p>
<p>直接输入地址,改相应版本即可:<a href="http://repo.springsource.org/libs-release-local/org/springframework/spring/3.2.4.RELEASE/spring-framework-3.2.4.RELEASE-dist.zip" target="_blank" rel="external">http://repo.springsource.org/libs-release-local/org/springframework/spring/3.2.4.RELEASE/spring-framework-3.2.4.RELEASE-dist.zip</a></p>
<p>在1的方法上输入前面部分,有个树形结构可供选择:<a href="http://repo.springsource.org/libs-release-local/org/springframework/spring/" target="_blank" rel="external">http://repo.springsource.org/libs-release-local/org/springframework/spring/</a></p>
<p>同样的,,有树形结构选择需要的包下载:<a href="http://repo.spring.io/milestone/org/springframework/" target="_blank" rel="external">http://repo.spring.io/milestone/org/springframework/</a></p>
<h3 id="加入Spring的Jar包"><a href="#加入Spring的Jar包" class="headerlink" title="加入Spring的Jar包"></a>加入Spring的Jar包</h3><p>将Spring内libs目录下包含所有的jar包（不需要复制结尾为sources和javadoc的jar包）到项目的lib目录下。</p>
<p>这里为了整合Struts还需要加入一个struts的包<br>记得加入struts-spring-plugin的jar包，不然struts无法使用spring管理的bean对象</p>
<h3 id="创建Spring配置文件"><a href="#创建Spring配置文件" class="headerlink" title="创建Spring配置文件"></a>创建Spring配置文件</h3><p>编写Spring的配置文件applicationContext.xml。把该文件放在WEB-INF下，跟web.xml同目录。</p>
<p>这里我们使用C3P0来管理数据池，所以把Hibernate内lib/optional/c3p0下的c3p0-0.9.1.jar复制到lib不目下。</p>
<p>applicationContext的配置很复杂，所有的bean都配置在里面，如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 定义数据源的信息 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span></span></div><div class="line">		<span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>zzw<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>80<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>20<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--定义Hibernate的SessionFactory --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- SessionFactory使用的数据源为上面的数据源 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 指定了Hibernate的映射文件和配置信息 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">local</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingResources"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>com/helloworld/pojo/User.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.jdbc.batch_size"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.helloworld.daoImpl.UserDao"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"sessionFactory"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--用户注册业务逻辑类 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userManager"</span> <span class="attr">class</span>=<span class="string">"com.helloworld.manager.UserManager"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dao"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"userDao"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 用户注册的Action --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testAction"</span> <span class="attr">class</span>=<span class="string">"com.helloworld.action.TestAction"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"manager"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"userManager"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- more bean definitions go here --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>从配置文件我们看出，hibernate的datasource和session的配置完全被spring接管了，所以hibernate的配置文件是可以删掉的。</p>
<h3 id="修改BaseDao和UserDao。"><a href="#修改BaseDao和UserDao。" class="headerlink" title="修改BaseDao和UserDao。"></a>修改BaseDao和UserDao。</h3><p>在引入Spring后，需要用Spring进行统一的事务管理，数据源和sessionFactory都交给Spring去生成，因此接口类和实现类BaseDao和UserDao都需要做相应的修改。Spring提供了HibernateDaoSupport类来完成对数据的操作，因此UserDao在实现BaseDao的同时还需要继承HibernateDaoSupport类。并将先前session的操作修改成HibernateTemplate（可通过getHibernateTemplate（）方法来获得）的操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.helloworld.pojo.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseDao</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> HibernateException</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.helloworld.daoImpl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.hibernate5.support.HibernateDaoSupport;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.helloworld.dao.BaseDao;</div><div class="line"><span class="keyword">import</span> com.helloworld.pojo.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">BaseDao</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserDao</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"UserDao IN"</span>);</div><div class="line">	&#125;</div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> HibernateException </span>&#123;  </div><div class="line">    	getHibernateTemplate().save(obj);  </div><div class="line">    &#125;  </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException</span>&#123;</div><div class="line">    	List&lt;User&gt; users=getHibernateTemplate().loadAll(User.class);</div><div class="line">    	<span class="keyword">return</span> users;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实HibernateDaoSupport也没干什么大事，就是前面说的session的set get方法，既然每个DAO都需要，那spring就提出来了呗，没什么神秘的。</p>
<h3 id="修改业务逻辑实现类"><a href="#修改业务逻辑实现类" class="headerlink" title="修改业务逻辑实现类"></a>修改业务逻辑实现类</h3><p>也就是Manager的类，跟DAO一样。在没有加入Spring之前，业务逻辑实现类的Session的获得，dao的实例化，以及事务的管理都是该类执行管理的。加入Spring后，这些都交给Spring去管理。该类的dao的实例化由Spring注入。</p>
<h3 id="修改用户注册的testAction类"><a href="#修改用户注册的testAction类" class="headerlink" title="修改用户注册的testAction类"></a>修改用户注册的testAction类</h3><p>同样，testAction类中的userManager的实例化也由Spring注入。可以仔细理解一下上面的applicationContext的配置文件，你需要某个对象，只要把该对象配置成bean，比如下面这样</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userManager"</span> <span class="attr">class</span>=<span class="string">"com.helloworld.manager.UserManager"</span>&gt;</span></div><div class="line">		...</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后用到这个bean的类配置成</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testAction"</span> <span class="attr">class</span>=<span class="string">"com.helloworld.action.TestAction"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"manager"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"userManager"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样这个类里名字为manager的对象就会自动被注入userManager对象。记得需要有set方法，名字需对应。</p>
<h3 id="删除多余类"><a href="#删除多余类" class="headerlink" title="删除多余类"></a>删除多余类</h3><p>删除Hibernate的配置文件Hibernate.cfg.xml和工厂类<br>HibernateSesseionFactory类。他们的工作已经交给Spring去做，已经不再有用。</p>
<h3 id="修改web-xml"><a href="#修改web-xml" class="headerlink" title="修改web.xml"></a>修改web.xml</h3><p>加载Spring。要想启动时加载Spring的配置文件，需要在web.xml中配置对应的监听器（listenser），并指定Spring的配置文件。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee </span></div><div class="line">    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></div><div class="line">           org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</div><div class="line">        <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"> 	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"> 	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"> 	</div><div class="line"> 	</div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="修改Struts的配置文件struts-xml"><a href="#修改Struts的配置文件struts-xml" class="headerlink" title="修改Struts的配置文件struts.xml"></a>修改Struts的配置文件struts.xml</h3><p>把原来指定的名为register的action的class由原来的路径变为applicationContext.xml文件中该bean的id名，不需要再用具体的包名+类名。</p>
<p>包名加类名的方式会在每次访问的时候都生成一个action对应的对象，交给spring管理后，只会在最开始的时候生成一次。如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span>  <span class="attr">name</span> =<span class="string">"test"</span>  <span class="attr">class</span> =<span class="string">"testAction"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>整个项目配置之后结构如图</p>
<p><img src="http://img.blog.csdn.net/20160922132809919?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>在spring的配置中会遇到各种各样的问题，其他无非就是bean配置上写错了路径，类目，对象名，变量名，等等，所以仔细一点，认真检查一下，肯定能找到原因。</p>
<p>到此为止，SSH框架已经搭建好了，但是据我所知，这套框架目前的使用率已经在降低了，有以下几个原因：</p>
<ol>
<li>struts除了可以做请求转发，还有页面标签，所以你如果只用请求转发的话，这个框架有点多余</li>
<li>现在spring推出了springMVC，是专门做请求转发用的，因为是spring自家推出的，所以和spring的协调性更好，而且在我使用中也感觉springMVC用起来更方便，轻量级</li>
<li>HIbernate框架管理数据库很强大，但是同样的问题，重量级。目前因为移动应用的兴起，请求并发量暴增的问题，Mybatis框架对于数据库管理更轻量级，更灵活。这两个框架说不上孰优孰劣，大家可以看下资料。</li>
</ol>
<p>所以在下一篇文章中，准备先用SpringMVC代替struts。敬请期待</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在在学习后端框架，最后的目标是希望搭建一个基于spring mvc + mybatis + spring的框架，因为之前接触过SSH，所以想从SSH开始，慢慢演化，也巩固一下自己的知识。&lt;br&gt;之前每次搭建SSH框架都要在网上查各种资料，而且我也发现各种资料基于的SSH版
    
    </summary>
    
      <category term="服务端开发" scheme="http://zwgeek.com/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java Web" scheme="http://zwgeek.com/tags/Java-Web/"/>
    
      <category term="服务端" scheme="http://zwgeek.com/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
      <category term="SSH" scheme="http://zwgeek.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>实现类知乎android客户端关注和取消关注的按钮点击效果</title>
    <link href="http://zwgeek.com/2016/09/23/%E5%AE%9E%E7%8E%B0%E7%B1%BB%E7%9F%A5%E4%B9%8Eandroid%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%85%B3%E6%B3%A8%E5%92%8C%E5%8F%96%E6%B6%88%E5%85%B3%E6%B3%A8%E7%9A%84%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9C/"/>
    <id>http://zwgeek.com/2016/09/23/实现类知乎android客户端关注和取消关注的按钮点击效果/</id>
    <published>2016-09-23T09:41:31.000Z</published>
    <updated>2016-09-23T11:16:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端时间在看Android各个客户端上比较出色的动画效果，发现两个动画做的很好的客户端，一个是豌豆荚，一个是知乎。接下来我可能会对这两个客户端的各种效果进行模仿实现。首先让我们看知乎的关注按钮点击效果，关注按钮点击后会有一层遮挡，从你点击的位置慢慢扩散开来，然后变成被点击状态，感觉非常赞。这篇文章从以下几个方面讨论这个效果。</p>
<ul>
<li>Android中实现类似效果的几种方式<ul>
<li>用Ripple实现类似效果</li>
<li>用Paint画出类似效果</li>
</ul>
</li>
<li>反编译知乎客户端代码</li>
<li>实现最终效果</li>
</ul>
<p>先说明一下，项目代码已上传至github，不想看长篇大论的也可以先去下代码，对照代码，哪里不懂点哪里。</p>
<p>代码在这</p>
<p><a href="https://github.com/zgzczzw/ZHFollowButton" target="_blank" rel="external">https://github.com/zgzczzw/ZHFollowButton</a></p>
<p>首先，让我们我先详细观察了一些知乎的效果，其中有一个很神奇的地方，如图：</p>
<p><img src="http://img.blog.csdn.net/20160920201423285?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920201821119?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920201844952?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920201912015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>注意看第二张图，这个圆形在扩散的时候，圆形底下的字还在，而且新的字也在圆形上，就这个效果实现起来最难。</p>
<h2 id="Android中实现类似效果的几种方式"><a href="#Android中实现类似效果的几种方式" class="headerlink" title="Android中实现类似效果的几种方式"></a>Android中实现类似效果的几种方式</h2><h3 id="用Ripple实现类似效果"><a href="#用Ripple实现类似效果" class="headerlink" title="用Ripple实现类似效果"></a>用Ripple实现类似效果</h3><p>ripple即波纹效果，是Android API 21以后引入的一种material design的元素，是触摸反馈的一种，也就是说点击的时候会出现水波扩散的样式，demo（见最后）中第一个按钮就是用了ripple效果。</p>
<p>实现方式很简单，实现一个这样的drawable</p>
<p><img src="http://img.blog.csdn.net/20160920201948796?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>第一个color是波纹颜色，item里面指定background正常的颜色，可以是一个shape，也可以是一个drawable，还可以是一个selector。</p>
<p>设置为按钮的background即可</p>
<p><img src="http://img.blog.csdn.net/20160920202005481?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>如果整个程序的theme用了meterial，那基本所有的带点击效果的控件，比如button都自带这个波纹效果。不过需要注意的是这一套API是21以后才提供的，所以需要做兼容处理。</p>
<p>效果如下：</p>
<p><img src="http://img.blog.csdn.net/20160920202022234?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202034700?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>从图中可以看出即使我设置了波纹为红色（#FF0000），点击后的效果也是淡红色，我猜测因为是水波纹效果，为了不影响按钮本身展示的内容，android系统自动做了透明度的处理，另外从图中也可以明显的看出，水波纹和显示的内容是上下两层的，互不影响，水波纹是在background层面上。这个效果做普通的点击反馈还不错，但绝对实现不出知乎这种用波纹刷新出内容的效果。所以很容易能看出知乎的点击效果不是用ripple做出来的。</p>
<h3 id="用Paint画出类似效果"><a href="#用Paint画出类似效果" class="headerlink" title="用Paint画出类似效果"></a>用Paint画出类似效果</h3><p>可能很多人看到知乎关注按钮的效果后，想到的第一种实现方式就是这个，用 paint在点击的地方画圆形，然后让画的圆形半径慢慢变大，实现出扩散出去的样式，我实现了一下，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">    <span class="keyword">if</span> (mShouldDoAnimation) &#123;</div><div class="line">        mMaxRadius = getMeasuredWidth() + <span class="number">50</span>;</div><div class="line">        <span class="keyword">if</span> (mRevealRadius &gt; mMinBetweenWidthAndHeight / <span class="number">2</span>)</div><div class="line">            mRevealRadius += mRevealRadiusGap * <span class="number">4</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            mRevealRadius += mRevealRadiusGap;<span class="comment">//半径变大</span></div><div class="line">        Paint mPaint = <span class="keyword">new</span> Paint();</div><div class="line">        <span class="keyword">if</span> (!mIsPressed) &#123;</div><div class="line">            mPaint.setColor(Color.WHITE);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mPaint.setColor(Color.RED);</div><div class="line">        &#125;<span class="comment">//设置画笔颜色</span></div><div class="line">        mPaint.setStyle(Paint.Style.FILL);</div><div class="line">        canvas.drawCircle(mCenterX, mCenterY, mRevealRadius, mPaint);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mRevealRadius &lt;= mMaxRadius) &#123;</div><div class="line">            <span class="comment">//一定时间后再刷新</span></div><div class="line">            postInvalidateDelayed(INVALIDATE_DURATION);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (mIsPressed) &#123;</div><div class="line">                setTextColor(Color.WHITE);</div><div class="line">                <span class="keyword">this</span>.setBackgroundColor(Color.RED);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                setTextColor(Color.BLACK);</div><div class="line">                <span class="keyword">this</span>.setBackgroundColor(Color.WHITE);</div><div class="line">            &#125;</div><div class="line">            mShouldDoAnimation = <span class="keyword">false</span>;</div><div class="line">            invalidate();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如图：</p>
<p><img src="http://img.blog.csdn.net/20160920202051969?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202110748?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202122766?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202144061?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202157467?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>本来觉得差不多就是这样，但是跟知乎的效果比较一下，还是能发现差别的。用paint画圆能实现的是在点击的地方画一个圆，然后半径慢慢变大慢慢扩散。但是问题在于，画的这个圆会盖住显示的内容，而且画的圆上也不能显示内容。我试过用drawText，也实现不了字和圆一起的效果，解决方法只有，</p>
<ul>
<li>画的过程中改背景色和上面文字。</li>
<li>然后，画完圆之后把圆擦掉，把下面的背景色和文字显示出来。</li>
</ul>
<p>这样就会出现一次文字闪烁的问题，首先文字会消失掉，然后画完圆之后才显示出来。因为圆在扩散的时候是看不到文字的，只有等圆消失了，文字才能显示出来。而知乎的效果是文字和圆一起刷出来，而且底下的文字还在，中间也没有文字闪烁的问题，整个过程行云流水，看起来很顺畅，好像用圆形揭开了幕布一样。</p>
<p>综上所述，知乎不是用这两种方式实现的，其实如果不是我自己实现了一下，真的以为第二种方法就是知乎采用的，但是目前看来，很遗憾，知乎采用了一种更好的方式来实现这个效果。</p>
<p>那怎么办呢，我也没什么思路，怎么才能在画圆的时候把字也画在圆上，然后圆下面的背景也还有呢。没什么思路，看看知乎的代码吧，反编译。</p>
<h2 id="反编译知乎代码"><a href="#反编译知乎代码" class="headerlink" title="反编译知乎代码"></a>反编译知乎代码</h2><p>反编译的过程我简单说一下：</p>
<p>到知乎官网下载最新的知乎apk<br>用apktool反编译apk，得到资源文件</p>
<p><img src="http://img.blog.csdn.net/20160920202223063?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>在资源文件中搜索follow，这里一开始我搜的是ripple，因为我觉得这个效果总归应该和ripple有关，没结果，于是搜了follow，没想到还真搜出来了。</p>
<p><img src="http://img.blog.csdn.net/20160920202246843?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><strong>RevealFollowButton</strong>这明显就是我们要的波纹展开的控件，这就好说了，下一步就是去代码里找到这个控件了。这里要记一下，这个控件的位置<strong>com.zhihu.android.app.ui.widget.RevealFollowButton</strong>。</p>
<p>反编译代码<br>将apk改名成rar，打开，可以找到里面的class文件</p>
<p><img src="http://img.blog.csdn.net/20160920202302501?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>知乎用了multidex，所以会有两个class文件，都拖出来放在dex2jar里反编译一下，就能生成两个jar包了，把jar包放在GUI里看一下，就能看到代码了，虽然代码被混淆过，但是基本逻辑还是能看出来的。</p>
<h2 id="知乎实现原理"><a href="#知乎实现原理" class="headerlink" title="知乎实现原理"></a>知乎实现原理</h2><p><img src="http://img.blog.csdn.net/20160920202319360?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>然后根据前面xml里的路径找到RevelFollowButton的位置，打开代码看就可以了。</p>
<p>这是类的继承关系，RevealFollowButton继承自RevealFrameLayout，然后继承自ZHFrameLayout，这个ZHFrameLayout的父类就是FrameLayout了，从名字我们能看出，RevelFollowButton和RevealFrameLayout就是这个效果实现的两个类了。</p>
<p><img src="http://img.blog.csdn.net/20160920202333360?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202347376?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>看到这个效果的实现是基于Framelayout，我就知道我们之前讨论的方法其实都走错了方向，如果告诉你用framelayout来实现这个效果，你会怎么做？</p>
<p>我的想法是加入两个TextView到这个layout里，然后一个Visible一个gone，如此切换，后来看过代码后，也证明我的这个想法是对的。</p>
<p><img src="http://img.blog.csdn.net/20160920202400813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>看，这里有两个TextView。如此的话，其实切换TextView是很容易实现的，问题是怎么实现波纹切换的效果，那第一件事就是看onDraw函数了，对于GroupView来说是drawChild方法。</p>
<p><img src="http://img.blog.csdn.net/20160920202919460?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>RevealFollowButton的drawChild方法没什么内容，基本是调用了父类，那么我们来看RevealFrameLayout的drawChild方法。</p>
<p>这里有两部分逻辑，如果满足一个条件，就做第一部分，一开始我也不知道这个条件是什么，混淆后的代码能看懂大逻辑，像这种小逻辑只能走一步看一步了。所以假设这个条件永远false吧，看第二部分，看到这里瞬间明白了，原来是采用切割画布的方式，把画布切成一个圆的，就能做到显示的内容也在圆上，而不是内容被覆盖在圆下面了。然后同理，把这个圆形区域不断扩大，然后不断刷新，就是实现波形刷出内容的效果了。代码如下吧</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">drawChild</span><span class="params">(Canvas canvas, View paramView, <span class="keyword">long</span> paramLong)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i = canvas.save();</div><div class="line">    mPath.reset();</div><div class="line">    <span class="comment">//mCenterX mCenterY是点击的位置，在onTouchEvent里设置</span></div><div class="line">    <span class="comment">//mRevealRadius是圆的半径，会渐渐变大</span></div><div class="line">    mPath.addCircle(mCenterX, mCenterY, mRevealRadius, Path.Direction.CW);</div><div class="line">    canvas.clipPath(<span class="keyword">this</span>.mPath);</div><div class="line">    <span class="keyword">boolean</span> bool2 = <span class="keyword">super</span>.drawChild(canvas, paramView, paramLong);</div><div class="line">    canvas.restoreToCount(i);</div><div class="line">    <span class="keyword">return</span> bool2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>按照上面说的，肯定还有一个类似于定时器的东西，能不断改变圆形的半径，然后刷新，其实这个在代码里找找很容易就找到了。RevealFrameLayout里除了这个drawChild，没有别的代码了。所以我们来看RevealFollowButton。</p>
<p>RevealFollowButton里面跟定时器有关的就是这句了</p>
<p><img src="http://img.blog.csdn.net/20160920202426142?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>一个Animator对象，其实这句代码我是没看懂的，但逻辑很简单，设置一个Animator，定时500ms，在这个过程中修改圆形半径，然后刷新。</p>
<p><code>Math.hypot(getWidth(), getHeight()))</code></p>
<p>其中这个方法是根据勾股定理获取三角形的斜边长度，想想我们所要绘制的圆形半径最长是多少，没错，就是TextView的对角线长度。所以，整个逻辑就很简单了。</p>
<p>我搞了下代码，就这样吧</p>
<p><img src="http://img.blog.csdn.net/20160920202443596?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>整个方法的代码如下吧，还包括控制FollowTv和unFollowTv哪个显示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setFollowed</span><span class="params">(<span class="keyword">boolean</span> isFollowed, <span class="keyword">boolean</span> needAnimate)</span> </span>&#123;</div><div class="line">    mIsFollowed = isFollowed;</div><div class="line">    <span class="keyword">if</span> (isFollowed) &#123;</div><div class="line">        mUnFollowTv.setVisibility(View.VISIBLE);</div><div class="line">        mFollowTv.setVisibility(View.VISIBLE);</div><div class="line">        mFollowTv.bringToFront();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mUnFollowTv.setVisibility(View.VISIBLE);</div><div class="line">        mFollowTv.setVisibility(View.VISIBLE);</div><div class="line">        mUnFollowTv.bringToFront();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (needAnimate) &#123;</div><div class="line">        ValueAnimator animator = ObjectAnimator.ofFloat(mFollowTv, <span class="string">"empty"</span>, <span class="number">0.0F</span>, (<span class="keyword">float</span>) Math.hypot(getMeasuredWidth(), getMeasuredHeight()));</div><div class="line">        animator.setDuration(<span class="number">500L</span>);</div><div class="line">        animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">                mRevealRadius = (Float) animation.getAnimatedValue();</div><div class="line">                invalidate();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        animator.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据当前状态把Follow的Textview或UnFollow的TextView显示出来，然后设置一个定时器不断扩大所要绘制圆的半径，根据这个半径裁剪画布成一个渐渐变大的圆形，然后内容就渐渐显示出来了。</p>
<h2 id="实现最终效果"><a href="#实现最终效果" class="headerlink" title="实现最终效果"></a>实现最终效果</h2><p>这个效果实现出来之后，试着运行一下，还不错，但是总觉得有地方不对，于是细细观察，终于发现了，知乎的那个效果在刷新的时候，底下的背景不是白色的，还是之前的状态，比如要变成关注的时候，背景中的未关注还是在的，而我们实现的这个，刷新的时候背景是白色的。</p>
<p>这是知乎的</p>
<p><img src="http://img.blog.csdn.net/20160920202500751?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>这是我的</p>
<p><img src="http://img.blog.csdn.net/20160920202513237?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>所以还是没有知乎那么行云流水，所以我们是少了什么吗。这时候想起来了，之前在RevealFrameLayout的drawChild里有一个判断条件，当时我们不知道它的逻辑是干什么的，现在看来。那部分逻辑就是处理这个的，画子控件的时候，要画两个，FollowTextView和UnFollowTextView，要随圆形刷出的控件我们采用裁剪画布的方式慢慢画出。那作为背景的另一个控件就不需要慢慢画出，只要完全画出来就行了。所以，猜想这里这个判断条件就是判断当前控件是不是要随圆形刷出的控件，如果不是，就直接画出来就行了。所以修改代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">drawChild</span><span class="params">(Canvas canvas, View paramView, <span class="keyword">long</span> paramLong)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (drawBackground(paramView)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.drawChild(canvas, paramView, paramLong);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> i = canvas.save();</div><div class="line">    mPath.reset();</div><div class="line">    mPath.addCircle(mCenterX, mCenterY, mRevealRadius, Path.Direction.CW);</div><div class="line">    canvas.clipPath(<span class="keyword">this</span>.mPath);</div><div class="line">    <span class="keyword">boolean</span> bool2 = <span class="keyword">super</span>.drawChild(canvas, paramView, paramLong);</div><div class="line">    canvas.restoreToCount(i);</div><div class="line">    <span class="keyword">return</span> bool2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>判断的方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">drawBackground</span><span class="params">(View paramView)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mIsFollowed &amp;&amp; paramView == mUnFollowTv) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!mIsFollowed &amp;&amp; paramView == mFollowTv) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，整个效果就和知乎完全一样了，刷新过程行云流水，非常赞。效果如下</p>
<p><img src="http://img.blog.csdn.net/20160920202528190?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202540940?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202552455?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202620051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202635129?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160920202650911?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>实现代码已上传至github：</p>
<p><a href="https://github.com/zgzczzw/ZHFollowButton" target="_blank" rel="external">https://github.com/zgzczzw/ZHFollowButton</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端时间在看Android各个客户端上比较出色的动画效果，发现两个动画做的很好的客户端，一个是豌豆荚，一个是知乎。接下来我可能会对这两个客户端的各种效果进行模仿实现。首先让我们看知乎的关注按钮点击效果，关注按钮点击后会有一层遮挡，从你点击的位置慢慢扩散开来，然后变成被点击状
    
    </summary>
    
      <category term="Android" scheme="http://zwgeek.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zwgeek.com/tags/Android/"/>
    
      <category term="View" scheme="http://zwgeek.com/tags/View/"/>
    
      <category term="知乎" scheme="http://zwgeek.com/tags/%E7%9F%A5%E4%B9%8E/"/>
    
      <category term="按钮点击" scheme="http://zwgeek.com/tags/%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB/"/>
    
  </entry>
  
</feed>
